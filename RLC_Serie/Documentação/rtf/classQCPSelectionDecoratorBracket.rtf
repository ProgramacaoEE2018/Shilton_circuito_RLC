{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referência da Classe QCPSelectionDecoratorBracket\par \pard\plain 
{\tc\tcl2 \v QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket}
{\bkmkstart AAAAAAADLT}
{\bkmkend AAAAAAADLT}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A selection decorator which draws brackets around each selected data segment. }}\par
{
{\f2 #include <qcustomplot.h>}}\par
Diagrama de hierarquia para QCPSelectionDecoratorBracket:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classQCPSelectionDecoratorBracket__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Diagrama de colaboração para QCPSelectionDecoratorBracket:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classQCPSelectionDecoratorBracket__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b BracketStyle} \{ {\b bsSquareBracket}, 
{\b bsHalfEllipse}, 
{\b bsEllipse}, 
{\b bsPlus}, 
{\b bsUserStyle}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPSelectionDecoratorBracket} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~QCPSelectionDecoratorBracket} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b bracketPen} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QBrush {\b bracketBrush} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bracketWidth} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bracketHeight} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BracketStyle} {\b bracketStyle} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b tangentToData} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tangentAverage} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBracketPen} (const QPen &{\b pen})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBracketBrush} (const QBrush &{\b brush})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBracketWidth} (int width)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBracketHeight} (int height)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBracketStyle} ({\b BracketStyle} style)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTangentToData} (bool enabled)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTangentAverage} (int pointCount)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b drawBracket} ({\b QCPPainter} *painter, int direction) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b drawDecoration} ({\b QCPPainter} *painter, {\b QCPDataSelection} selection) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b pen} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QBrush {\b brush} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} {\b scatterStyle} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QCPScatterStyle::ScatterProperties {\b usedScatterProperties} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPen} (const QPen &{\b pen})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBrush} (const QBrush &{\b brush})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setScatterStyle} (const {\b QCPScatterStyle} &{\b scatterStyle}, QCPScatterStyle::ScatterProperties usedProperties={\b QCPScatterStyle::spPen})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setUsedScatterProperties} (const QCPScatterStyle::ScatterProperties &properties)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b applyPen} ({\b QCPPainter} *painter) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b applyBrush} ({\b QCPPainter} *painter) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} {\b getFinalScatterStyle} (const {\b QCPScatterStyle} &unselectedStyle) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b copyFrom} (const {\b QCPSelectionDecorator} *other)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getTangentAngle} (const {\b QCPPlottableInterface1D} *interface1d, int dataIndex, int direction) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPointF {\b getPixelCoordinates} (const {\b QCPPlottableInterface1D} *interface1d, int dataIndex) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b registerWithPlottable} ({\b QCPAbstractPlottable} *plottable)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b mBracketPen}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QBrush {\b mBracketBrush}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mBracketWidth}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mBracketHeight}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BracketStyle} {\b mBracketStyle}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mTangentToData}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mTangentAverage}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b mPen}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QBrush {\b mBrush}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} {\b mScatterStyle}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QCPScatterStyle::ScatterProperties {\b mUsedScatterProperties}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAbstractPlottable} * {\b mPlottable}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descrição detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A selection decorator which draws brackets around each selected data segment. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Additionally to the regular highlighting of selected segments via color, fill and scatter style, this {\b QCPSelectionDecorator} subclass draws markers at the begin and end of each selected data segment of the plottable.\par
The shape of the markers can be controlled with {\b setBracketStyle}, {\b setBracketWidth} and {\b setBracketHeight}. The color/fill can be controlled with {\b setBracketPen} and {\b setBracketBrush}.\par
To introduce custom bracket styles, it is only necessary to sublcass {\b QCPSelectionDecoratorBracket} and reimplement {\b drawBracket}. The rest will be managed by the base class. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerações\par
\pard\plain 
{\xe \v BracketStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:BracketStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPSelectionDecoratorBracket::BracketStyle}}}
\par
{\bkmkstart AAAAAAADLU}
{\bkmkend AAAAAAADLU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines which shape is drawn at the boundaries of selected data ranges.\par
Some of the bracket styles further allow specifying a height and/or width, see {\b setBracketHeight} and {\b setBracketWidth}. \par
}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v bsSquareBracket\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bsSquareBracket}
{\qr bsSquareBracket{\bkmkstart AAAAAAADLV}
{\bkmkend AAAAAAADLV}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A square bracket is drawn. \par
}\cell }{\row }
{\xe \v bsHalfEllipse\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bsHalfEllipse}
{\qr bsHalfEllipse{\bkmkstart AAAAAAADLW}
{\bkmkend AAAAAAADLW}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A half ellipse is drawn. The size of the ellipse is given by the bracket width/height properties. \par
}\cell }{\row }
{\xe \v bsEllipse\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bsEllipse}
{\qr bsEllipse{\bkmkstart AAAAAAADLX}
{\bkmkend AAAAAAADLX}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
An ellipse is drawn. The size of the ellipse is given by the bracket width/height properties. \par
}\cell }{\row }
{\xe \v bsPlus\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bsPlus}
{\qr bsPlus{\bkmkstart AAAAAAADLY}
{\bkmkend AAAAAAADLY}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A plus is drawn. \par
}\cell }{\row }
{\xe \v bsUserStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bsUserStyle}
{\qr bsUserStyle{\bkmkstart AAAAAAADLZ}
{\bkmkend AAAAAAADLZ}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Start custom bracket styles at this index when subclassing and reimplementing {\b drawBracket}. \par
}\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4524                     \{ bsSquareBracket \par
 4525                       ,bsHalfEllipse   \par
 4526                       ,bsEllipse       \par
 4527                       ,bsPlus         \par
 4528                       ,bsUserStyle    \par
 4529   \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v QCPSelectionDecoratorBracket\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:QCPSelectionDecoratorBracket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPSelectionDecoratorBracket::QCPSelectionDecoratorBracket ()}}
\par
{\bkmkstart AAAAAAADMA}
{\bkmkend AAAAAAADMA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPSelectionDecoratorBracket} instance with default values. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16387                                                            :\par
16388   mBracketPen(QPen(Qt::black)),\par
16389   mBracketBrush(Qt::NoBrush),\par
16390   mBracketWidth(5),\par
16391   mBracketHeight(50),\par
16392   mBracketStyle(bsSquareBracket),\par
16393   mTangentToData(false),\par
16394   mTangentAverage(2)\par
16395 \{\par
16396   \par
16397 \}\par
}
}
{\xe \v ~QCPSelectionDecoratorBracket\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:~QCPSelectionDecoratorBracket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPSelectionDecoratorBracket::~QCPSelectionDecoratorBracket (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADMB}
{\bkmkend AAAAAAADMB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16400 \{\par
16401 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções membros\par
\pard\plain 
{\xe \v applyBrush\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:applyBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecorator::applyBrush ({\b QCPPainter} *  {\i painter}) const{\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADKY}
{\bkmkend AAAAAAADKY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the brush of {\i painter}  to the brush of this selection decorator.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b applyPen}, {\b getFinalScatterStyle} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10401 \{\par
10402   painter->setBrush(mBrush);\par
10403 \}\par
}
}
{\xe \v applyPen\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:applyPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecorator::applyPen ({\b QCPPainter} *  {\i painter}) const{\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADKZ}
{\bkmkend AAAAAAADKZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the pen of {\i painter}  to the pen of this selection decorator.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b applyBrush}, {\b getFinalScatterStyle} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10391 \{\par
10392   painter->setPen(mPen);\par
10393 \}\par
}
}
{\xe \v bracketBrush\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bracketBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QBrush QCPSelectionDecoratorBracket::bracketBrush () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADMC}
{\bkmkend AAAAAAADMC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4537 \{ return mBracketBrush; \}\par
}
}
{\xe \v bracketHeight\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bracketHeight}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPSelectionDecoratorBracket::bracketHeight () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADMD}
{\bkmkend AAAAAAADMD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4539 \{ return mBracketHeight; \}\par
}
}
{\xe \v bracketPen\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bracketPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPSelectionDecoratorBracket::bracketPen () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADME}
{\bkmkend AAAAAAADME}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4536 \{ return mBracketPen; \}\par
}
}
{\xe \v bracketStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bracketStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b BracketStyle} QCPSelectionDecoratorBracket::bracketStyle () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADMF}
{\bkmkend AAAAAAADMF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4540 \{ return mBracketStyle; \}\par
}
}
{\xe \v bracketWidth\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:bracketWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPSelectionDecoratorBracket::bracketWidth () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADMG}
{\bkmkend AAAAAAADMG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4538 \{ return mBracketWidth; \}\par
}
}
{\xe \v brush\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:brush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QBrush QCPSelectionDecorator::brush () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLA}
{\bkmkend AAAAAAADLA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3249 \{ return mBrush; \}\par
}
}
{\xe \v copyFrom\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:copyFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecorator::copyFrom (const {\b QCPSelectionDecorator} *  {\i other}){\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLB}
{\bkmkend AAAAAAADLB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copies all properties (e.g. color, fill, scatter style) of the {\i other}  selection decorator to this selection decorator. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10432 \{\par
10433   setPen(other->pen());\par
10434   setBrush(other->brush());\par
10435   setScatterStyle(other->scatterStyle(), other->usedScatterProperties());\par
10436 \}\par
}
}
{\xe \v drawBracket\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:drawBracket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::drawBracket ({\b QCPPainter} *  {\i painter}, int  {\i direction}) const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADMH}
{\bkmkend AAAAAAADMH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draws the bracket shape with {\i painter} . The parameter {\i direction}  is either -1 or 1 and indicates whether the bracket shall point to the left or the right (i.e. is a closing or opening bracket, respectively).\par
The passed {\i painter}  already contains all transformations that are necessary to position and rotate the bracket appropriately. Painting operations can be performed as if drawing upright brackets on flat data with horizontal key axis, with (0, 0) being the center of the bracket.\par
If you wish to sublcass {\b QCPSelectionDecoratorBracket} in order to provide custom bracket shapes (see {\b QCPSelectionDecoratorBracket::bsUserStyle}), this is the method you should reimplement. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16492 \{\par
16493   switch (mBracketStyle)\par
16494   \{\par
16495     case bsSquareBracket:\par
16496     \{\par
16497       painter->drawLine(QLineF(mBracketWidth*direction, -mBracketHeight*0.5, 0, -mBracketHeight*0.5));\par
16498       painter->drawLine(QLineF(mBracketWidth*direction, mBracketHeight*0.5, 0, mBracketHeight*0.5));\par
16499       painter->drawLine(QLineF(0, -mBracketHeight*0.5, 0, mBracketHeight*0.5));\par
16500       break;\par
16501     \}\par
16502     case bsHalfEllipse:\par
16503     \{\par
16504       painter->drawArc(-mBracketWidth*0.5, -mBracketHeight*0.5, mBracketWidth, mBracketHeight, -90*16, -180*16*direction);\par
16505       break;\par
16506     \}\par
16507     case bsEllipse:\par
16508     \{\par
16509       painter->drawEllipse(-mBracketWidth*0.5, -mBracketHeight*0.5, mBracketWidth, mBracketHeight);\par
16510       break;\par
16511     \}\par
16512     case bsPlus:\par
16513     \{\par
16514       painter->drawLine(QLineF(0, -mBracketHeight*0.5, 0, mBracketHeight*0.5));\par
16515       painter->drawLine(QLineF(-mBracketWidth*0.5, 0, mBracketWidth*0.5, 0));\par
16516       break;\par
16517     \}\par
16518     default:\par
16519     \{\par
16520       qDebug() << Q_FUNC_INFO << "unknown/custom bracket style can't be handeld by default implementation:" << static_cast<int>(mBracketStyle);\par
16521       break;\par
16522     \}\par
16523   \}\par
16524 \}\par
}
}
{\xe \v drawDecoration\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:drawDecoration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::drawDecoration ({\b QCPPainter} *  {\i painter}, {\b QCPDataSelection}  {\i selection}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAADLD}
{\bkmkend AAAAAAADLD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draws the bracket decoration on the data points at the begin and end of each selected data segment given in {\i seletion} .\par
It uses the method {\b drawBracket} to actually draw the shapes.\par
}{
Reimplementa {\b QCPSelectionDecorator} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAADLC \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16535 \{\par
16536   if (!mPlottable || selection.isEmpty()) return;\par
16537   \par
16538   if (QCPPlottableInterface1D *interface1d = mPlottable->interface1D())\par
16539   \{\par
16540     foreach (const QCPDataRange &dataRange, selection.dataRanges())\par
16541     \{\par
16542       // determine position and (if tangent mode is enabled) angle of brackets:\par
16543       int openBracketDir = (mPlottable->keyAxis() && !mPlottable->keyAxis()->rangeReversed()) ? 1 : -1;\par
16544       int closeBracketDir = -openBracketDir;\par
16545       QPointF openBracketPos = getPixelCoordinates(interface1d, dataRange.begin());\par
16546       QPointF closeBracketPos = getPixelCoordinates(interface1d, dataRange.end()-1);\par
16547       double openBracketAngle = 0;\par
16548       double closeBracketAngle = 0;\par
16549       if (mTangentToData)\par
16550       \{\par
16551         openBracketAngle = getTangentAngle(interface1d, dataRange.begin(), openBracketDir);\par
16552         closeBracketAngle = getTangentAngle(interface1d, dataRange.end()-1, closeBracketDir);\par
16553       \}\par
16554       // draw opening bracket:\par
16555       QTransform oldTransform = painter->transform();\par
16556       painter->setPen(mBracketPen);\par
16557       painter->setBrush(mBracketBrush);\par
16558       painter->translate(openBracketPos);\par
16559       painter->rotate(openBracketAngle/M_PI*180.0);\par
16560       drawBracket(painter, openBracketDir);\par
16561       painter->setTransform(oldTransform);\par
16562       // draw closing bracket:\par
16563       painter->setPen(mBracketPen);\par
16564       painter->setBrush(mBracketBrush);\par
16565       painter->translate(closeBracketPos);\par
16566       painter->rotate(closeBracketAngle/M_PI*180.0);\par
16567       drawBracket(painter, closeBracketDir);\par
16568       painter->setTransform(oldTransform);\par
16569     \}\par
16570   \}\par
16571 \}\par
}
}
{\xe \v getFinalScatterStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:getFinalScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPScatterStyle} QCPSelectionDecorator::getFinalScatterStyle (const {\b QCPScatterStyle} &  {\i unselectedStyle}) const{\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLE}
{\bkmkend AAAAAAADLE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the scatter style that the parent plottable shall use for selected scatter points. The plottable's original (unselected) scatter style must be passed as {\i unselectedStyle} . Depending on the setting of {\b setUsedScatterProperties}, the returned scatter style is a mixture of this selecion decorator's scatter style ({\b setScatterStyle}), and {\i unselectedStyle} .\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b applyPen}, {\b applyBrush}, {\b setScatterStyle} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10414 \{\par
10415   QCPScatterStyle result(unselectedStyle);\par
10416   result.setFromOther(mScatterStyle, mUsedScatterProperties);\par
10417   \par
10418   // if style shall inherit pen from plottable (has no own pen defined), give it the selected\par
10419   // plottable pen explicitly, so it doesn't use the unselected plottable pen when used in the\par
10420   // plottable:\par
10421   if (!result.isPenDefined())\par
10422     result.setPen(mPen);\par
10423   \par
10424   return result;\par
10425 \}\par
}
}
{\xe \v getPixelCoordinates\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:getPixelCoordinates}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPointF QCPSelectionDecoratorBracket::getPixelCoordinates (const {\b QCPPlottableInterface1D} *  {\i interface1d}, int  {\i dataIndex}) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMI}
{\bkmkend AAAAAAADMI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16634 \{\par
16635   QCPAxis *keyAxis = mPlottable->keyAxis();\par
16636   QCPAxis *valueAxis = mPlottable->valueAxis();\par
16637   if (!keyAxis || !valueAxis) \{ qDebug() << Q_FUNC_INFO << "invalid key or value axis"; return QPointF(0, 0); \}\par
16638   \par
16639   if (keyAxis->orientation() == Qt::Horizontal)\par
16640     return QPointF(keyAxis->coordToPixel(interface1d->dataMainKey(dataIndex)), valueAxis->coordToPixel(interface1d->dataMainValue(dataIndex)));\par
16641   else\par
16642     return QPointF(valueAxis->coordToPixel(interface1d->dataMainValue(dataIndex)), keyAxis->coordToPixel(interface1d->dataMainKey(dataIndex)));\par
16643 \}\par
}
}
{\xe \v getTangentAngle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:getTangentAngle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPSelectionDecoratorBracket::getTangentAngle (const {\b QCPPlottableInterface1D} *  {\i interface1d}, int  {\i dataIndex}, int  {\i direction}) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMJ}
{\bkmkend AAAAAAADMJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16587 \{\par
16588   if (!interface1d || dataIndex < 0 || dataIndex >= interface1d->dataCount())\par
16589     return 0;\par
16590   direction = direction < 0 ? -1 : 1; // enforce direction is either -1 or 1\par
16591   \par
16592   // how many steps we can actually go from index in the given direction without exceeding data bounds:\par
16593   int averageCount;\par
16594   if (direction < 0)\par
16595     averageCount = qMin(mTangentAverage, dataIndex);\par
16596   else\par
16597     averageCount = qMin(mTangentAverage, interface1d->dataCount()-1-dataIndex);\par
16598   qDebug() << averageCount;\par
16599   // calculate point average of averageCount points:\par
16600   QVector<QPointF> points(averageCount);\par
16601   QPointF pointsAverage;\par
16602   int currentIndex = dataIndex;\par
16603   for (int i=0; i<averageCount; ++i)\par
16604   \{\par
16605     points[i] = getPixelCoordinates(interface1d, currentIndex);\par
16606     pointsAverage += points[i];\par
16607     currentIndex += direction;\par
16608   \}\par
16609   pointsAverage /= (double)averageCount;\par
16610   \par
16611   // calculate slope of linear regression through points:\par
16612   double numSum = 0;\par
16613   double denomSum = 0;\par
16614   for (int i=0; i<averageCount; ++i)\par
16615   \{\par
16616     const double dx = points.at(i).x()-pointsAverage.x();\par
16617     const double dy = points.at(i).y()-pointsAverage.y();\par
16618     numSum += dx*dy;\par
16619     denomSum += dx*dx;\par
16620   \}\par
16621   if (!qFuzzyIsNull(denomSum) && !qFuzzyIsNull(numSum))\par
16622   \{\par
16623     return qAtan2(numSum, denomSum);\par
16624   \} else // undetermined angle, probably mTangentAverage == 1, so using only one data point\par
16625     return 0;\par
16626 \}\par
}
}
{\xe \v pen\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:pen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPSelectionDecorator::pen () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLF}
{\bkmkend AAAAAAADLF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3248 \{ return mPen; \}\par
}
}
{\xe \v registerWithPlottable\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:registerWithPlottable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPSelectionDecorator::registerWithPlottable ({\b QCPAbstractPlottable} *  {\i plottable}){\f2 [protected]}, {\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLG}
{\bkmkend AAAAAAADLG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10462 \{\par
10463   if (!mPlottable)\par
10464   \{\par
10465     mPlottable = plottable;\par
10466     return true;\par
10467   \} else\par
10468   \{\par
10469     qDebug() << Q_FUNC_INFO << "This selection decorator is already registered with plottable:" << reinterpret_cast<quintptr>(mPlottable);\par
10470     return false;\par
10471   \}\par
10472 \}\par
}
}
{\xe \v scatterStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:scatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPScatterStyle} QCPSelectionDecorator::scatterStyle () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLH}
{\bkmkend AAAAAAADLH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3250 \{ return mScatterStyle; \}\par
}
}
{\xe \v setBracketBrush\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setBracketBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::setBracketBrush (const QBrush &  {\i brush})}}
\par
{\bkmkstart AAAAAAADMK}
{\bkmkend AAAAAAADMK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the brush that will be used to draw the brackets at the beginning and end of each selected data segment. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16417 \{\par
16418   mBracketBrush = brush;\par
16419 \}\par
}
}
{\xe \v setBracketHeight\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setBracketHeight}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::setBracketHeight (int  {\i height})}}
\par
{\bkmkstart AAAAAAADML}
{\bkmkend AAAAAAADML}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the height of the drawn bracket. The height dimension is always perpendicular to the key axis of the data, or the tangent direction of the current data slope, if {\b setTangentToData} is enabled. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16437 \{\par
16438   mBracketHeight = height;\par
16439 \}\par
}
}
{\xe \v setBracketPen\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setBracketPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::setBracketPen (const QPen &  {\i pen})}}
\par
{\bkmkstart AAAAAAADMM}
{\bkmkend AAAAAAADMM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the pen that will be used to draw the brackets at the beginning and end of each selected data segment. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16408 \{\par
16409   mBracketPen = pen;\par
16410 \}\par
}
}
{\xe \v setBracketStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setBracketStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::setBracketStyle ({\b QCPSelectionDecoratorBracket::BracketStyle}  {\i style})}}
\par
{\bkmkstart AAAAAAADMN}
{\bkmkend AAAAAAADMN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the shape that the bracket/marker will have.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setBracketWidth}, {\b setBracketHeight} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16447 \{\par
16448   mBracketStyle = style;\par
16449 \}\par
}
}
{\xe \v setBracketWidth\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setBracketWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::setBracketWidth (int  {\i width})}}
\par
{\bkmkstart AAAAAAADMO}
{\bkmkend AAAAAAADMO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the width of the drawn bracket. The width dimension is always parallel to the key axis of the data, or the tangent direction of the current data slope, if {\b setTangentToData} is enabled. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16427 \{\par
16428   mBracketWidth = width;\par
16429 \}\par
}
}
{\xe \v setBrush\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecorator::setBrush (const QBrush &  {\i brush}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLI}
{\bkmkend AAAAAAADLI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the brush that will be used by the parent plottable to draw selected data segments. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10356 \{\par
10357   mBrush = brush;\par
10358 \}\par
}
}
{\xe \v setPen\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecorator::setPen (const QPen &  {\i pen}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLJ}
{\bkmkend AAAAAAADLJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the pen that will be used by the parent plottable to draw selected data segments. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10348 \{\par
10349   mPen = pen;\par
10350 \}\par
}
}
{\xe \v setScatterStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecorator::setScatterStyle (const {\b QCPScatterStyle} &  {\i scatterStyle}, QCPScatterStyle::ScatterProperties  {\i usedProperties} = {\f2 {\b QCPScatterStyle::spPen}}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLK}
{\bkmkend AAAAAAADLK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the scatter style that will be used by the parent plottable to draw scatters in selected data segments.\par
{\i usedProperties}  specifies which parts of the passed {\i scatterStyle}  will be used by the plottable. The used properties can also be changed via {\b setUsedScatterProperties}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10368 \{\par
10369   mScatterStyle = scatterStyle;\par
10370   setUsedScatterProperties(usedProperties);\par
10371 \}\par
}
}
{\xe \v setTangentAverage\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setTangentAverage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::setTangentAverage (int  {\i pointCount})}}
\par
{\bkmkstart AAAAAAADMP}
{\bkmkend AAAAAAADMP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Controls over how many data points the slope shall be averaged, when brackets shall be aligned with the data (if {\b setTangentToData} is true).\par
From the position of the bracket, {\i pointCount}  points towards the selected data range will be taken into account. The smallest value of {\i pointCount}  is 1, which is effectively equivalent to disabling {\b setTangentToData}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16472 \{\par
16473   mTangentAverage = pointCount;\par
16474   if (mTangentAverage < 1)\par
16475     mTangentAverage = 1;\par
16476 \}\par
}
}
{\xe \v setTangentToData\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setTangentToData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecoratorBracket::setTangentToData (bool  {\i enabled})}}
\par
{\bkmkstart AAAAAAADMQ}
{\bkmkend AAAAAAADMQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets whether the brackets will be rotated such that they align with the slope of the data at the position that they appear in.\par
For noisy data, it might be more visually appealing to average the slope over multiple data points. This can be configured via {\b setTangentAverage}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 16459 \{\par
16460   mTangentToData = enabled;\par
16461 \}\par
}
}
{\xe \v setUsedScatterProperties\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:setUsedScatterProperties}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPSelectionDecorator::setUsedScatterProperties (const QCPScatterStyle::ScatterProperties &  {\i properties}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLL}
{\bkmkend AAAAAAADLL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Use this method to define which properties of the scatter style (set via {\b setScatterStyle}) will be used for selected data segments. All properties of the scatter style that are not specified in {\i properties}  will remain as specified in the plottable's original scatter style.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b QCPScatterStyle::ScatterProperty} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10381 \{\par
10382   mUsedScatterProperties = properties;\par
10383 \}\par
}
}
{\xe \v tangentAverage\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:tangentAverage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPSelectionDecoratorBracket::tangentAverage () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADMR}
{\bkmkend AAAAAAADMR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4542 \{ return mTangentAverage; \}\par
}
}
{\xe \v tangentToData\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:tangentToData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPSelectionDecoratorBracket::tangentToData () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADMS}
{\bkmkend AAAAAAADMS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  4541 \{ return mTangentToData; \}\par
}
}
{\xe \v usedScatterProperties\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:usedScatterProperties}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::ScatterProperties QCPSelectionDecorator::usedScatterProperties () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLM}
{\bkmkend AAAAAAADLM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3251 \{ return mUsedScatterProperties; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v mBracketBrush\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mBracketBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QBrush QCPSelectionDecoratorBracket::mBracketBrush{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMT}
{\bkmkend AAAAAAADMT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mBracketHeight\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mBracketHeight}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPSelectionDecoratorBracket::mBracketHeight{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMU}
{\bkmkend AAAAAAADMU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mBracketPen\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mBracketPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPSelectionDecoratorBracket::mBracketPen{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMV}
{\bkmkend AAAAAAADMV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mBracketStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mBracketStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b BracketStyle} QCPSelectionDecoratorBracket::mBracketStyle{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMW}
{\bkmkend AAAAAAADMW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mBracketWidth\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mBracketWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPSelectionDecoratorBracket::mBracketWidth{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMX}
{\bkmkend AAAAAAADMX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mBrush\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QBrush QCPSelectionDecorator::mBrush{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLO}
{\bkmkend AAAAAAADLO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mPen\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPSelectionDecorator::mPen{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLP}
{\bkmkend AAAAAAADLP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mPlottable\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mPlottable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAbstractPlottable}* QCPSelectionDecorator::mPlottable{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLQ}
{\bkmkend AAAAAAADLQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mScatterStyle\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPScatterStyle} QCPSelectionDecorator::mScatterStyle{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLR}
{\bkmkend AAAAAAADLR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTangentAverage\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mTangentAverage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPSelectionDecoratorBracket::mTangentAverage{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMY}
{\bkmkend AAAAAAADMY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTangentToData\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mTangentToData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPSelectionDecoratorBracket::mTangentToData{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADMZ}
{\bkmkend AAAAAAADMZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mUsedScatterProperties\:QCPSelectionDecoratorBracket}
{\xe \v QCPSelectionDecoratorBracket\:mUsedScatterProperties}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::ScatterProperties QCPSelectionDecorator::mUsedScatterProperties{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAADLS}
{\bkmkend AAAAAAADLS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documentação para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.cpp}\par
}}