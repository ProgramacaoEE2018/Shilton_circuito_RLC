{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referência da Classe QCPAxisTickerTime\par \pard\plain 
{\tc\tcl2 \v QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime}
{\bkmkstart AAAAAAABKH}
{\bkmkend AAAAAAABKH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specialized axis ticker for time spans in units of milliseconds to days. }}\par
{
{\f2 #include <qcustomplot.h>}}\par
Diagrama de hierarquia para QCPAxisTickerTime:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classQCPAxisTickerTime__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b TimeUnit} \{ {\b tuMilliseconds}, 
{\b tuSeconds}, 
{\b tuMinutes}, 
{\b tuHours}, 
{\b tuDays}
 \}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b TickStepStrategy} \{ {\b tssReadability}, 
{\b tssMeetTickCount}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxisTickerTime} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b timeFormat} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b fieldWidth} ({\b TimeUnit} unit) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTimeFormat} (const QString &format)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setFieldWidth} ({\b TimeUnit} unit, int width)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TickStepStrategy} {\b tickStepStrategy} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tickCount} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b tickOrigin} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTickStepStrategy} ({\b TickStepStrategy} strategy)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTickCount} (int count)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTickOrigin} (double origin)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b generate} (const {\b QCPRange} &range, const QLocale &locale, QChar formatChar, int precision, QVector< double > &ticks, QVector< double > *subTicks, QVector< QString > *tickLabels)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual double {\b getTickStep} (const {\b QCPRange} &range) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b getSubTickCount} (double tickStep) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QString {\b getTickLabel} (double tick, const QLocale &locale, QChar formatChar, int precision) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b replaceUnit} (QString &text, {\b TimeUnit} unit, int value) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QVector< double > {\b createTickVector} (double tickStep, const {\b QCPRange} &range)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QVector< double > {\b createSubTickVector} (int subTickCount, const QVector< double > &ticks)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QVector< QString > {\b createLabelVector} (const QVector< double > &ticks, const QLocale &locale, QChar formatChar, int precision)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b trimTicks} (const {\b QCPRange} &range, QVector< double > &ticks, bool keepOneOutlier) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b pickClosest} (double target, const QVector< double > &candidates) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getMantissa} (double input, double *magnitude=0) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b cleanMantissa} (double input) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b mTimeFormat}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QHash< {\b TimeUnit}, int > {\b mFieldWidth}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TimeUnit} {\b mSmallestUnit}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TimeUnit} {\b mBiggestUnit}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QHash< {\b TimeUnit}, QString > {\b mFormatPattern}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TickStepStrategy} {\b mTickStepStrategy}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mTickCount}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mTickOrigin}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descrição detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specialized axis ticker for time spans in units of milliseconds to days. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
This {\b QCPAxisTicker} subclass generates ticks that corresponds to time intervals.\par
The format of the time display in the tick labels is controlled with {\b setTimeFormat} and {\b setFieldWidth}. The time coordinate is in the unit of seconds with respect to the time coordinate zero. Unlike with {\b QCPAxisTickerDateTime}, the ticks don't correspond to a specific calendar date and time.\par
The time can be displayed in milliseconds, seconds, minutes, hours and days. Depending on the largest available unit in the format specified with {\b setTimeFormat}, any time spans above will be carried in that largest unit. So for example if the format string is "%m:%s" and a tick at coordinate value 7815 (being 2 hours, 10 minutes and 15 seconds) is created, the resulting tick label will show "130:15" (130 minutes, 15 seconds). If the format string is "%h:%m:%s", the hour unit will be used and the label will thus be "02:10:15". Negative times with respect to the axis zero will carry a leading minus sign.\par
The ticker can be created and assigned to an axis like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid } Here is an example of a time axis providing time information in days, hours and minutes. Due to the axis range spanning a few days and the wanted tick count ({\b setTickCount}), the ticker decided to use tick steps of 12 hours:\par
The format string for this example is {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid } \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observação:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid If you rather wish to display calendar dates and times, have a look at {\b QCPAxisTickerDateTime} instead. \par
}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerações\par
\pard\plain 
{\xe \v TickStepStrategy\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:TickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPAxisTicker::TickStepStrategy}{\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFS}
{\bkmkend AAAAAAABFS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the strategies that the axis ticker may follow when choosing the size of the tick step.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setTickStepStrategy} \par
}}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v tssReadability\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tssReadability}
{\qr tssReadability{\bkmkstart AAAAAAABFT}
{\bkmkend AAAAAAABFT}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A nicely readable tick step is prioritized over matching the requested number of ticks (see {\b setTickCount}) \par
}\cell }{\row }
{\xe \v tssMeetTickCount\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tssMeetTickCount}
{\qr tssMeetTickCount{\bkmkstart AAAAAAABFU}
{\bkmkend AAAAAAABFU}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less readable tick steps are allowed which in turn facilitates getting closer to the requested tick count. \par
}\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1543   \{\par
 1544     tssReadability    \par
 1545     ,tssMeetTickCount \par
 1546   \};\par
}
}
{\xe \v TimeUnit\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:TimeUnit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPAxisTickerTime::TimeUnit}}}
\par
{\bkmkstart AAAAAAABKI}
{\bkmkend AAAAAAABKI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the logical units in which fractions of time spans can be expressed.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setFieldWidth}, {\b setTimeFormat} \par
}}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v tuMilliseconds\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tuMilliseconds}
{\qr tuMilliseconds{\bkmkstart AAAAAAABKJ}
{\bkmkend AAAAAAABKJ}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Milliseconds, one thousandth of a second (%z in {\b setTimeFormat}) \par
}\cell }{\row }
{\xe \v tuSeconds\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tuSeconds}
{\qr tuSeconds{\bkmkstart AAAAAAABKK}
{\bkmkend AAAAAAABKK}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Seconds (%s in {\b setTimeFormat}) \par
}\cell }{\row }
{\xe \v tuMinutes\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tuMinutes}
{\qr tuMinutes{\bkmkstart AAAAAAABKL}
{\bkmkend AAAAAAABKL}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Minutes (%m in {\b setTimeFormat}) \par
}\cell }{\row }
{\xe \v tuHours\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tuHours}
{\qr tuHours{\bkmkstart AAAAAAABKM}
{\bkmkend AAAAAAABKM}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Hours (%h in {\b setTimeFormat}) \par
}\cell }{\row }
{\xe \v tuDays\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tuDays}
{\qr tuDays{\bkmkstart AAAAAAABKN}
{\bkmkend AAAAAAABKN}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Days (%d in {\b setTimeFormat}) \par
}\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1644                 \{ tuMilliseconds \par
 1645                   ,tuSeconds     \par
 1646                   ,tuMinutes     \par
 1647                   ,tuHours       \par
 1648                   ,tuDays        \par
 1649                 \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v QCPAxisTickerTime\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:QCPAxisTickerTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPAxisTickerTime::QCPAxisTickerTime ()}}
\par
{\bkmkstart AAAAAAABKO}
{\bkmkend AAAAAAABKO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructs the ticker and sets reasonable default values. Axis tickers are commonly created managed by a QSharedPointer, which then can be passed to {\b QCPAxis::setTicker}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6189                                      :\par
 6190   mTimeFormat(QLatin1String("%h:%m:%s")),\par
 6191   mSmallestUnit(tuSeconds),\par
 6192   mBiggestUnit(tuHours)\par
 6193 \{\par
 6194   setTickCount(4);\par
 6195   mFieldWidth[tuMilliseconds] = 3;\par
 6196   mFieldWidth[tuSeconds] = 2;\par
 6197   mFieldWidth[tuMinutes] = 2;\par
 6198   mFieldWidth[tuHours] = 2;\par
 6199   mFieldWidth[tuDays] = 1;\par
 6200   \par
 6201   mFormatPattern[tuMilliseconds] = QLatin1String("%z");\par
 6202   mFormatPattern[tuSeconds] = QLatin1String("%s");\par
 6203   mFormatPattern[tuMinutes] = QLatin1String("%m");\par
 6204   mFormatPattern[tuHours] = QLatin1String("%h");\par
 6205   mFormatPattern[tuDays] = QLatin1String("%d");\par
 6206 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções membros\par
\pard\plain 
{\xe \v cleanMantissa\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:cleanMantissa}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::cleanMantissa (double  {\i input}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFX}
{\bkmkend AAAAAAABFX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5823 \{\par
 5824   double magnitude;\par
 5825   const double mantissa = getMantissa(input, &magnitude);\par
 5826   switch (mTickStepStrategy)\par
 5827   \{\par
 5828     case tssReadability:\par
 5829     \{\par
 5830       return pickClosest(mantissa, QVector<double>() << 1.0 << 2.0 << 2.5 << 5.0 << 10.0)*magnitude;\par
 5831     \}\par
 5832     case tssMeetTickCount:\par
 5833     \{\par
 5834       // this gives effectively a mantissa of 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 8.0, 10.0\par
 5835       if (mantissa <= 5.0)\par
 5836         return (int)(mantissa*2)/2.0*magnitude; // round digit after decimal point to 0.5\par
 5837       else\par
 5838         return (int)(mantissa/2.0)*2.0*magnitude; // round to first digit in multiples of 2\par
 5839     \}\par
 5840   \}\par
 5841   return input;\par
 5842 \}\par
}
}
{\xe \v createLabelVector\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:createLabelVector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector< QString > QCPAxisTicker::createLabelVector (const QVector< double > &  {\i ticks}, const QLocale &  {\i locale}, QChar  {\i formatChar}, int  {\i precision}){\f2 [protected]}, {\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFY}
{\bkmkend AAAAAAABFY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5732 \{\par
 5733   QVector<QString> result;\par
 5734   result.reserve(ticks.size());\par
 5735   for (int i=0; i<ticks.size(); ++i)\par
 5736     result.append(getTickLabel(ticks.at(i), locale, formatChar, precision));\par
 5737   return result;\par
 5738 \}\par
}
}
{\xe \v createSubTickVector\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:createSubTickVector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector< double > QCPAxisTicker::createSubTickVector (int  {\i subTickCount}, const QVector< double > &  {\i ticks}){\f2 [protected]}, {\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFZ}
{\bkmkend AAAAAAABFZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5678 \{\par
 5679   QVector<double> result;\par
 5680   if (subTickCount <= 0 || ticks.size() < 2)\par
 5681     return result;\par
 5682   \par
 5683   result.reserve((ticks.size()-1)*subTickCount);\par
 5684   for (int i=1; i<ticks.size(); ++i)\par
 5685   \{\par
 5686     double subTickStep = (ticks.at(i)-ticks.at(i-1))/(double)(subTickCount+1);\par
 5687     for (int k=1; k<=subTickCount; ++k)\par
 5688       result.append(ticks.at(i-1) + k*subTickStep);\par
 5689   \}\par
 5690   return result;\par
 5691 \}\par
}
}
{\xe \v createTickVector\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:createTickVector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector< double > QCPAxisTicker::createTickVector (double  {\i tickStep}, const {\b QCPRange} &  {\i range}){\f2 [protected]}, {\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGA}
{\bkmkend AAAAAAABGA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado por {\b QCPAxisTickerLog} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGB \\*MERGEFORMAT}{\fldrslt pagenum}}}), {\b QCPAxisTickerText} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGC \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b QCPAxisTickerDateTime} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGD \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5709 \{\par
 5710   QVector<double> result;\par
 5711   // Generate tick positions according to tickStep:\par
 5712   qint64 firstStep = floor((range.lower-mTickOrigin)/tickStep); // do not use qFloor here, or we'll lose 64 bit precision\par
 5713   qint64 lastStep = ceil((range.upper-mTickOrigin)/tickStep); // do not use qCeil here, or we'll lose 64 bit precision\par
 5714   int tickcount = lastStep-firstStep+1;\par
 5715   if (tickcount < 0) tickcount = 0;\par
 5716   result.resize(tickcount);\par
 5717   for (int i=0; i<tickcount; ++i)\par
 5718     result[i] = mTickOrigin + (firstStep+i)*tickStep;\par
 5719   return result;\par
 5720 \}\par
}
}
{\xe \v fieldWidth\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:fieldWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisTickerTime::fieldWidth ({\b TimeUnit}  {\i unit}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKP}
{\bkmkend AAAAAAABKP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1656 \{ return mFieldWidth.value(unit); \}\par
}
}
{\xe \v generate\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:generate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::generate (const {\b QCPRange} &  {\i range}, const QLocale &  {\i locale}, QChar  {\i formatChar}, int  {\i precision}, QVector< double > &  {\i ticks}, QVector< double > *  {\i subTicks}, QVector< QString > *  {\i tickLabels}){\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGE}
{\bkmkend AAAAAAABGE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the method called by {\b QCPAxis} in order to actually generate tick coordinates ({\i ticks} ), tick label strings ({\i tickLabels} ) and sub tick coordinates ({\i subTicks} ).\par
The ticks are generated for the specified {\i range} . The generated labels typically follow the specified {\i locale} , {\i formatChar}  and number {\i precision} , however this might be different (or even irrelevant) for certain {\b QCPAxisTicker} subclasses.\par
The output parameter {\i ticks}  is filled with the generated tick positions in axis coordinates. The output parameters {\i subTicks}  and {\i tickLabels}  are optional (set them to 0 if not needed) and are respectively filled with sub tick coordinates, and tick label strings belonging to {\i ticks}  by index. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5553 \{\par
 5554   // generate (major) ticks:\par
 5555   double tickStep = getTickStep(range);\par
 5556   ticks = createTickVector(tickStep, range);\par
 5557   trimTicks(range, ticks, true); // trim ticks to visible range plus one outer tick on each side (incase a subclass createTickVector creates more)\par
 5558   \par
 5559   // generate sub ticks between major ticks:\par
 5560   if (subTicks)\par
 5561   \{\par
 5562     if (ticks.size() > 0)\par
 5563     \{\par
 5564       *subTicks = createSubTickVector(getSubTickCount(tickStep), ticks);\par
 5565       trimTicks(range, *subTicks, false);\par
 5566     \} else\par
 5567       *subTicks = QVector<double>();\par
 5568   \}\par
 5569   \par
 5570   // finally trim also outliers (no further clipping happens in axis drawing):\par
 5571   trimTicks(range, ticks, false);\par
 5572   // generate labels for visible ticks if requested:\par
 5573   if (tickLabels)\par
 5574     *tickLabels = createLabelVector(ticks, locale, formatChar, precision);\par
 5575 \}\par
}
}
{\xe \v getMantissa\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:getMantissa}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::getMantissa (double  {\i input}, double *  {\i magnitude} = {\f2 0}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGF}
{\bkmkend AAAAAAABGF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5810 \{\par
 5811   const double mag = qPow(10.0, qFloor(qLn(input)/qLn(10.0)));\par
 5812   if (magnitude) *magnitude = mag;\par
 5813   return input/mag;\par
 5814 \}\par
}
}
{\xe \v getSubTickCount\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:getSubTickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisTickerTime::getSubTickCount (double  {\i tickStep}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGK}
{\bkmkend AAAAAAABGK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b QCPAxisTicker} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGG \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6323 \{\par
 6324   int result = QCPAxisTicker::getSubTickCount(tickStep);\par
 6325   switch (qRound(tickStep)) // hand chosen subticks for specific minute/hour/day range (as specified in getTickStep)\par
 6326   \{\par
 6327     case 5*60: result = 4; break;\par
 6328     case 10*60: result = 1; break;\par
 6329     case 15*60: result = 2; break;\par
 6330     case 30*60: result = 1; break;\par
 6331     case 60*60: result = 3; break;\par
 6332     case 3600*2: result = 3; break;\par
 6333     case 3600*3: result = 2; break;\par
 6334     case 3600*6: result = 1; break;\par
 6335     case 3600*12: result = 3; break;\par
 6336     case 3600*24: result = 3; break;\par
 6337   \}\par
 6338   return result;\par
 6339 \}\par
}
}
{\xe \v getTickLabel\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:getTickLabel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPAxisTickerTime::getTickLabel (double  {\i tick}, const QLocale &  {\i locale}, QChar  {\i formatChar}, int  {\i precision}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGP}
{\bkmkend AAAAAAABGP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b QCPAxisTicker} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6349 \{\par
 6350   Q_UNUSED(precision)\par
 6351   Q_UNUSED(formatChar)\par
 6352   Q_UNUSED(locale)\par
 6353   bool negative = tick < 0;\par
 6354   if (negative) tick *= -1;\par
 6355   double values[tuDays+1]; // contains the msec/sec/min/... value with its respective modulo (e.g. minute 0..59)\par
 6356   double restValues[tuDays+1]; // contains the msec/sec/min/... value as if it's the largest available unit and thus consumes the remaining time\par
 6357   \par
 6358   restValues[tuMilliseconds] = tick*1000;\par
 6359   values[tuMilliseconds] = modf(restValues[tuMilliseconds]/1000, &restValues[tuSeconds])*1000;\par
 6360   values[tuSeconds] = modf(restValues[tuSeconds]/60, &restValues[tuMinutes])*60;\par
 6361   values[tuMinutes] = modf(restValues[tuMinutes]/60, &restValues[tuHours])*60;\par
 6362   values[tuHours] = modf(restValues[tuHours]/24, &restValues[tuDays])*24;\par
 6363   // no need to set values[tuDays] because days are always a rest value (there is no higher unit so it consumes all remaining time)\par
 6364   \par
 6365   QString result = mTimeFormat;\par
 6366   for (int i = mSmallestUnit; i <= mBiggestUnit; ++i)\par
 6367   \{\par
 6368     TimeUnit iUnit = static_cast<TimeUnit>(i);\par
 6369     replaceUnit(result, iUnit, qRound(iUnit == mBiggestUnit ? restValues[iUnit] : values[iUnit]));\par
 6370   \}\par
 6371   if (negative)\par
 6372     result.prepend(QLatin1Char('-'));\par
 6373   return result;\par
 6374 \}\par
}
}
{\xe \v getTickStep\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:getTickStep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTickerTime::getTickStep (const {\b QCPRange} &  {\i range}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGW}
{\bkmkend AAAAAAABGW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b QCPAxisTicker} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6272 \{\par
 6273   double result = range.size()/(double)(mTickCount+1e-10); // mTickCount ticks on average, the small addition is to prevent jitter on exact integers\par
 6274   \par
 6275   if (result < 1) // ideal tick step is below 1 second -> use normal clean mantissa algorithm in units of seconds\par
 6276   \{\par
 6277     if (mSmallestUnit == tuMilliseconds)\par
 6278       result = qMax(cleanMantissa(result), 0.001); // smallest tick step is 1 millisecond\par
 6279     else // have no milliseconds available in format, so stick with 1 second tickstep\par
 6280       result = 1.0;\par
 6281   \} else if (result < 3600*24) // below a day\par
 6282   \{\par
 6283     // the filling of availableSteps seems a bit contorted but it fills in a sorted fashion and thus saves a post-fill sorting run\par
 6284     QVector<double> availableSteps;\par
 6285     // seconds range:\par
 6286     if (mSmallestUnit <= tuSeconds)\par
 6287       availableSteps << 1;\par
 6288     if (mSmallestUnit == tuMilliseconds)\par
 6289       availableSteps << 2.5; // only allow half second steps if milliseconds are there to display it\par
 6290     else if (mSmallestUnit == tuSeconds)\par
 6291       availableSteps << 2;\par
 6292     if (mSmallestUnit <= tuSeconds)\par
 6293       availableSteps << 5 << 10 << 15 << 30;\par
 6294     // minutes range:\par
 6295     if (mSmallestUnit <= tuMinutes)\par
 6296       availableSteps << 1*60;\par
 6297     if (mSmallestUnit <= tuSeconds)\par
 6298       availableSteps << 2.5*60; // only allow half minute steps if seconds are there to display it\par
 6299     else if (mSmallestUnit == tuMinutes)\par
 6300       availableSteps << 2*60;\par
 6301     if (mSmallestUnit <= tuMinutes)\par
 6302       availableSteps << 5*60 << 10*60 << 15*60 << 30*60;\par
 6303     // hours range:\par
 6304     if (mSmallestUnit <= tuHours)\par
 6305       availableSteps << 1*3600 << 2*3600 << 3*3600 << 6*3600 << 12*3600 << 24*3600;\par
 6306     // pick available step that is most appropriate to approximate ideal step:\par
 6307     result = pickClosest(result, availableSteps);\par
 6308   \} else // more than a day, go back to normal clean mantissa algorithm but in units of days\par
 6309   \{\par
 6310     const double secondsPerDay = 3600*24;\par
 6311     result = cleanMantissa(result/secondsPerDay)*secondsPerDay;\par
 6312   \}\par
 6313   return result;\par
 6314 \}\par
}
}
{\xe \v pickClosest\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:pickClosest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::pickClosest (double  {\i target}, const QVector< double > &  {\i candidates}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGY}
{\bkmkend AAAAAAABGY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5790 \{\par
 5791   if (candidates.size() == 1)\par
 5792     return candidates.first();\par
 5793   QVector<double>::const_iterator it = std::lower_bound(candidates.constBegin(), candidates.constEnd(), target);\par
 5794   if (it == candidates.constEnd())\par
 5795     return *(it-1);\par
 5796   else if (it == candidates.constBegin())\par
 5797     return *it;\par
 5798   else\par
 5799     return target-*(it-1) < *it-target ? *(it-1) : *it;\par
 5800 \}\par
}
}
{\xe \v replaceUnit\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:replaceUnit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTickerTime::replaceUnit (QString &  {\i text}, {\b QCPAxisTickerTime::TimeUnit}  {\i unit}, int  {\i value}) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABKQ}
{\bkmkend AAAAAAABKQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6382 \{\par
 6383   QString valueStr = QString::number(value);\par
 6384   while (valueStr.size() < mFieldWidth.value(unit))\par
 6385     valueStr.prepend(QLatin1Char('0'));\par
 6386   \par
 6387   text.replace(mFormatPattern.value(unit), valueStr);\par
 6388 \}\par
}
}
{\xe \v setFieldWidth\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:setFieldWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTickerTime::setFieldWidth ({\b QCPAxisTickerTime::TimeUnit}  {\i unit}, int  {\i width})}}
\par
{\bkmkstart AAAAAAABKR}
{\bkmkend AAAAAAABKR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the field widh of the specified {\i unit}  to be {\i width}  digits, when displayed in the tick label. If the number for the specific unit is shorter than {\i width} , it will be padded with an according number of zeros to the left in order to reach the field width.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setTimeFormat} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6258 \{\par
 6259   mFieldWidth[unit] = qMax(width, 1);\par
 6260 \}\par
}
}
{\xe \v setTickCount\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:setTickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::setTickCount (int  {\i count}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGZ}
{\bkmkend AAAAAAABGZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets how many ticks this ticker shall aim to generate across the axis range. Note that {\i count}  is not guaranteed to be matched exactly, as generating readable tick intervals may conflict with the requested number of ticks.\par
Whether the readability has priority over meeting the requested {\i count}  can be specified with {\b setTickStepStrategy}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5519 \{\par
 5520   if (count > 0)\par
 5521     mTickCount = count;\par
 5522   else\par
 5523     qDebug() << Q_FUNC_INFO << "tick count must be greater than zero:" << count;\par
 5524 \}\par
}
}
{\xe \v setTickOrigin\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:setTickOrigin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::setTickOrigin (double  {\i origin}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHA}
{\bkmkend AAAAAAABHA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the mathematical coordinate (or "offset") of the zeroth tick. This tick coordinate is just a concept and doesn't need to be inside the currently visible axis range.\par
By default {\i origin}  is zero, which for example yields ticks \{-5, 0, 5, 10, 15,...\} when the tick step is five. If {\i origin}  is now set to 1 instead, the correspondingly generated ticks would be \{-4, 1, 6, 11, 16,...\}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5535 \{\par
 5536   mTickOrigin = origin;\par
 5537 \}\par
}
}
{\xe \v setTickStepStrategy\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:setTickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::setTickStepStrategy ({\b QCPAxisTicker::TickStepStrategy}  {\i strategy}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHB}
{\bkmkend AAAAAAABHB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets which strategy the axis ticker follows when choosing the size of the tick step. For the available strategies, see {\b TickStepStrategy}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5506 \{\par
 5507   mTickStepStrategy = strategy;\par
 5508 \}\par
}
}
{\xe \v setTimeFormat\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:setTimeFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTickerTime::setTimeFormat (const QString &  {\i format})}}
\par
{\bkmkstart AAAAAAABKS}
{\bkmkend AAAAAAABKS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the format that will be used to display time in the tick labels.\par
The available patterns are:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
%z for milliseconds\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
%s for seconds\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
%m for minutes\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
%h for hours\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
%d for days\par}
The field width (zero padding) can be controlled for each unit with {\b setFieldWidth}.\par
The largest unit that appears in {\i format}  will carry all the remaining time of a certain tick coordinate, even if it overflows the natural limit of the unit. For example, if %m is the largest unit it might become larger than 59 in order to consume larger time values. If on the other hand %h is available, the minutes will wrap around to zero after 59 and the time will carry to the hour digit. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6227 \{\par
 6228   mTimeFormat = format;\par
 6229   \par
 6230   // determine smallest and biggest unit in format, to optimize unit replacement and allow biggest\par
 6231   // unit to consume remaining time of a tick value and grow beyond its modulo (e.g. min > 59)\par
 6232   mSmallestUnit = tuMilliseconds;\par
 6233   mBiggestUnit = tuMilliseconds;\par
 6234   bool hasSmallest = false;\par
 6235   for (int i = tuMilliseconds; i <= tuDays; ++i)\par
 6236   \{\par
 6237     TimeUnit unit = static_cast<TimeUnit>(i);\par
 6238     if (mTimeFormat.contains(mFormatPattern.value(unit)))\par
 6239     \{\par
 6240       if (!hasSmallest)\par
 6241       \{\par
 6242         mSmallestUnit = unit;\par
 6243         hasSmallest = true;\par
 6244       \}\par
 6245       mBiggestUnit = unit;\par
 6246     \}\par
 6247   \}\par
 6248 \}\par
}
}
{\xe \v tickCount\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisTicker::tickCount () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHC}
{\bkmkend AAAAAAABHC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1554 \{ return mTickCount; \}\par
}
}
{\xe \v tickOrigin\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tickOrigin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::tickOrigin () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHD}
{\bkmkend AAAAAAABHD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1555 \{ return mTickOrigin; \}\par
}
}
{\xe \v tickStepStrategy\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:tickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TickStepStrategy} QCPAxisTicker::tickStepStrategy () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHE}
{\bkmkend AAAAAAABHE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1553 \{ return mTickStepStrategy; \}\par
}
}
{\xe \v timeFormat\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:timeFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPAxisTickerTime::timeFormat () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKT}
{\bkmkend AAAAAAABKT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1655 \{ return mTimeFormat; \}\par
}
}
{\xe \v trimTicks\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:trimTicks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::trimTicks (const {\b QCPRange} &  {\i range}, QVector< double > &  {\i ticks}, bool  {\i keepOneOutlier}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHF}
{\bkmkend AAAAAAABHF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5748 \{\par
 5749   bool lowFound = false;\par
 5750   bool highFound = false;\par
 5751   int lowIndex = 0;\par
 5752   int highIndex = -1;\par
 5753   \par
 5754   for (int i=0; i < ticks.size(); ++i)\par
 5755   \{\par
 5756     if (ticks.at(i) >= range.lower)\par
 5757     \{\par
 5758       lowFound = true;\par
 5759       lowIndex = i;\par
 5760       break;\par
 5761     \}\par
 5762   \}\par
 5763   for (int i=ticks.size()-1; i >= 0; --i)\par
 5764   \{\par
 5765     if (ticks.at(i) <= range.upper)\par
 5766     \{\par
 5767       highFound = true;\par
 5768       highIndex = i;\par
 5769       break;\par
 5770     \}\par
 5771   \}\par
 5772   \par
 5773   if (highFound && lowFound)\par
 5774   \{\par
 5775     int trimFront = qMax(0, lowIndex-(keepOneOutlier ? 1 : 0));\par
 5776     int trimBack = qMax(0, ticks.size()-(keepOneOutlier ? 2 : 1)-highIndex);\par
 5777     if (trimFront > 0 || trimBack > 0)\par
 5778       ticks = ticks.mid(trimFront, ticks.size()-trimFront-trimBack);\par
 5779   \} else // all ticks are either all below or all above the range\par
 5780     ticks.clear();\par
 5781 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v mBiggestUnit\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mBiggestUnit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TimeUnit} QCPAxisTickerTime::mBiggestUnit{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABKU}
{\bkmkend AAAAAAABKU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mFieldWidth\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mFieldWidth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QHash<{\b TimeUnit}, int> QCPAxisTickerTime::mFieldWidth{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABKV}
{\bkmkend AAAAAAABKV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mFormatPattern\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mFormatPattern}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QHash<{\b TimeUnit}, QString> QCPAxisTickerTime::mFormatPattern{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABKW}
{\bkmkend AAAAAAABKW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mSmallestUnit\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mSmallestUnit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TimeUnit} QCPAxisTickerTime::mSmallestUnit{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABKX}
{\bkmkend AAAAAAABKX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTickCount\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mTickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisTicker::mTickCount{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHG}
{\bkmkend AAAAAAABHG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTickOrigin\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mTickOrigin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::mTickOrigin{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHH}
{\bkmkend AAAAAAABHH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTickStepStrategy\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mTickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TickStepStrategy} QCPAxisTicker::mTickStepStrategy{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHI}
{\bkmkend AAAAAAABHI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTimeFormat\:QCPAxisTickerTime}
{\xe \v QCPAxisTickerTime\:mTimeFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPAxisTickerTime::mTimeFormat{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABKY}
{\bkmkend AAAAAAABKY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documentação para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.cpp}\par
}}