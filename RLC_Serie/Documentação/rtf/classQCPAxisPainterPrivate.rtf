{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referência da Classe QCPAxisPainterPrivate\par \pard\plain 
{\tc\tcl2 \v QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate}
{\bkmkstart AAAAAAAAZT}
{\bkmkend AAAAAAAAZT}
\par
{
{\f2 #include <qcustomplot.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CachedLabel}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TickLabelData}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxisPainterPrivate} ({\b QCustomPlot} *parentPlot)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~QCPAxisPainterPrivate} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b draw} ({\b QCPPainter} *painter)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b size} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clearCache} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b axisSelectionBox} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b tickLabelsSelectionBox} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b labelSelectionBox} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxis::AxisType} {\b type}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b basePen}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPLineEnding} {\b lowerEnding}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPLineEnding} {\b upperEnding}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b labelPadding}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QFont {\b labelFont}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QColor {\b labelColor}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b label}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tickLabelPadding}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b tickLabelRotation}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxis::LabelSide} {\b tickLabelSide}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b substituteExponent}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b numberMultiplyCross}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tickLengthIn}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tickLengthOut}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b subTickLengthIn}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b subTickLengthOut}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b tickPen}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b subTickPen}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QFont {\b tickLabelFont}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QColor {\b tickLabelColor}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b axisRect}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b viewportRect}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b offset}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b abbreviateDecimalPowers}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b reversedEndings}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QVector< double > {\b subTickPositions}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QVector< double > {\b tickPositions}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QVector< QString > {\b tickLabels}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QByteArray {\b generateLabelParameterHash} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b placeTickLabel} ({\b QCPPainter} *painter, double position, int distanceToAxis, const QString &text, QSize *tickLabelsSize)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b drawTickLabel} ({\b QCPPainter} *painter, double x, double y, const {\b TickLabelData} &labelData) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b TickLabelData} {\b getTickLabelData} (const QFont &font, const QString &text) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QPointF {\b getTickLabelDrawOffset} (const {\b TickLabelData} &labelData) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b getMaxTickLabelSize} (const QFont &font, const QString &text, QSize *tickLabelsSize) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCustomPlot} * {\b mParentPlot}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QByteArray {\b mLabelParameterHash}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QCache< QString, {\b CachedLabel} > {\b mLabelCache}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b mAxisSelectionBox}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b mTickLabelsSelectionBox}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QRect {\b mLabelSelectionBox}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descrição detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid }
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v QCPAxisPainterPrivate\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:QCPAxisPainterPrivate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPAxisPainterPrivate::QCPAxisPainterPrivate ({\b QCustomPlot} *  {\i parentPlot}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAZU}
{\bkmkend AAAAAAAAZU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructs a {\b QCPAxisPainterPrivate} instance. Make sure to not create a new instance on every redraw, to utilize the caching mechanisms. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9176                                                                     :\par
 9177   type(QCPAxis::atLeft),\par
 9178   basePen(QPen(Qt::black, 0, Qt::SolidLine, Qt::SquareCap)),\par
 9179   lowerEnding(QCPLineEnding::esNone),\par
 9180   upperEnding(QCPLineEnding::esNone),\par
 9181   labelPadding(0),\par
 9182   tickLabelPadding(0),\par
 9183   tickLabelRotation(0),\par
 9184   tickLabelSide(QCPAxis::lsOutside),\par
 9185   substituteExponent(true),\par
 9186   numberMultiplyCross(false),\par
 9187   tickLengthIn(5),\par
 9188   tickLengthOut(0),\par
 9189   subTickLengthIn(2),\par
 9190   subTickLengthOut(0),\par
 9191   tickPen(QPen(Qt::black, 0, Qt::SolidLine, Qt::SquareCap)),\par
 9192   subTickPen(QPen(Qt::black, 0, Qt::SolidLine, Qt::SquareCap)),\par
 9193   offset(0),\par
 9194   abbreviateDecimalPowers(false),\par
 9195   reversedEndings(false),\par
 9196   mParentPlot(parentPlot),\par
 9197   mLabelCache(16) // cache at most 16 (tick) labels\par
 9198 \{\par
 9199 \}\par
}
}
{\xe \v ~QCPAxisPainterPrivate\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:~QCPAxisPainterPrivate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPAxisPainterPrivate::~QCPAxisPainterPrivate (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAZV}
{\bkmkend AAAAAAAAZV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9202 \{\par
 9203 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções membros\par
\pard\plain 
{\xe \v axisSelectionBox\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:axisSelectionBox}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::axisSelectionBox () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAZW}
{\bkmkend AAAAAAAAZW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2226 \{ return mAxisSelectionBox; \}\par
}
}
{\xe \v clearCache\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:clearCache}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisPainterPrivate::clearCache ()}}
\par
{\bkmkstart AAAAAAAAZX}
{\bkmkend AAAAAAAAZX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9445 \{\par
 9446   mLabelCache.clear();\par
 9447 \}\par
}
}
{\xe \v draw\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:draw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisPainterPrivate::draw ({\b QCPPainter} *  {\i painter}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAZY}
{\bkmkend AAAAAAAAZY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9213 \{\par
 9214   QByteArray newHash = generateLabelParameterHash();\par
 9215   if (newHash != mLabelParameterHash)\par
 9216   \{\par
 9217     mLabelCache.clear();\par
 9218     mLabelParameterHash = newHash;\par
 9219   \}\par
 9220   \par
 9221   QPoint origin;\par
 9222   switch (type)\par
 9223   \{\par
 9224     case QCPAxis::atLeft:   origin = axisRect.bottomLeft() +QPoint(-offset, 0); break;\par
 9225     case QCPAxis::atRight:  origin = axisRect.bottomRight()+QPoint(+offset, 0); break;\par
 9226     case QCPAxis::atTop:    origin = axisRect.topLeft()    +QPoint(0, -offset); break;\par
 9227     case QCPAxis::atBottom: origin = axisRect.bottomLeft() +QPoint(0, +offset); break;\par
 9228   \}\par
 9229 \par
 9230   double xCor = 0, yCor = 0; // paint system correction, for pixel exact matches (affects baselines and ticks of top/right axes)\par
 9231   switch (type)\par
 9232   \{\par
 9233     case QCPAxis::atTop: yCor = -1; break;\par
 9234     case QCPAxis::atRight: xCor = 1; break;\par
 9235     default: break;\par
 9236   \}\par
 9237   int margin = 0;\par
 9238   // draw baseline:\par
 9239   QLineF baseLine;\par
 9240   painter->setPen(basePen);\par
 9241   if (QCPAxis::orientation(type) == Qt::Horizontal)\par
 9242     baseLine.setPoints(origin+QPointF(xCor, yCor), origin+QPointF(axisRect.width()+xCor, yCor));\par
 9243   else\par
 9244     baseLine.setPoints(origin+QPointF(xCor, yCor), origin+QPointF(xCor, -axisRect.height()+yCor));\par
 9245   if (reversedEndings)\par
 9246     baseLine = QLineF(baseLine.p2(), baseLine.p1()); // won't make a difference for line itself, but for line endings later\par
 9247   painter->drawLine(baseLine);\par
 9248   \par
 9249   // draw ticks:\par
 9250   if (!tickPositions.isEmpty())\par
 9251   \{\par
 9252     painter->setPen(tickPen);\par
 9253     int tickDir = (type == QCPAxis::atBottom || type == QCPAxis::atRight) ? -1 : 1; // direction of ticks ("inward" is right for left axis and left for right axis)\par
 9254     if (QCPAxis::orientation(type) == Qt::Horizontal)\par
 9255     \{\par
 9256       for (int i=0; i<tickPositions.size(); ++i)\par
 9257         painter->drawLine(QLineF(tickPositions.at(i)+xCor, origin.y()-tickLengthOut*tickDir+yCor, tickPositions.at(i)+xCor, origin.y()+tickLengthIn*tickDir+yCor));\par
 9258     \} else\par
 9259     \{\par
 9260       for (int i=0; i<tickPositions.size(); ++i)\par
 9261         painter->drawLine(QLineF(origin.x()-tickLengthOut*tickDir+xCor, tickPositions.at(i)+yCor, origin.x()+tickLengthIn*tickDir+xCor, tickPositions.at(i)+yCor));\par
 9262     \}\par
 9263   \}\par
 9264   \par
 9265   // draw subticks:\par
 9266   if (!subTickPositions.isEmpty())\par
 9267   \{\par
 9268     painter->setPen(subTickPen);\par
 9269     // direction of ticks ("inward" is right for left axis and left for right axis)\par
 9270     int tickDir = (type == QCPAxis::atBottom || type == QCPAxis::atRight) ? -1 : 1;\par
 9271     if (QCPAxis::orientation(type) == Qt::Horizontal)\par
 9272     \{\par
 9273       for (int i=0; i<subTickPositions.size(); ++i)\par
 9274         painter->drawLine(QLineF(subTickPositions.at(i)+xCor, origin.y()-subTickLengthOut*tickDir+yCor, subTickPositions.at(i)+xCor, origin.y()+subTickLengthIn*tickDir+yCor));\par
 9275     \} else\par
 9276     \{\par
 9277       for (int i=0; i<subTickPositions.size(); ++i)\par
 9278         painter->drawLine(QLineF(origin.x()-subTickLengthOut*tickDir+xCor, subTickPositions.at(i)+yCor, origin.x()+subTickLengthIn*tickDir+xCor, subTickPositions.at(i)+yCor));\par
 9279     \}\par
 9280   \}\par
 9281   margin += qMax(0, qMax(tickLengthOut, subTickLengthOut));\par
 9282   \par
 9283   // draw axis base endings:\par
 9284   bool antialiasingBackup = painter->antialiasing();\par
 9285   painter->setAntialiasing(true); // always want endings to be antialiased, even if base and ticks themselves aren't\par
 9286   painter->setBrush(QBrush(basePen.color()));\par
 9287   QCPVector2D baseLineVector(baseLine.dx(), baseLine.dy());\par
 9288   if (lowerEnding.style() != QCPLineEnding::esNone)\par
 9289     lowerEnding.draw(painter, QCPVector2D(baseLine.p1())-baseLineVector.normalized()*lowerEnding.realLength()*(lowerEnding.inverted()?-1:1), -baseLineVector);\par
 9290   if (upperEnding.style() != QCPLineEnding::esNone)\par
 9291     upperEnding.draw(painter, QCPVector2D(baseLine.p2())+baseLineVector.normalized()*upperEnding.realLength()*(upperEnding.inverted()?-1:1), baseLineVector);\par
 9292   painter->setAntialiasing(antialiasingBackup);\par
 9293   \par
 9294   // tick labels:\par
 9295   QRect oldClipRect;\par
 9296   if (tickLabelSide == QCPAxis::lsInside) // if using inside labels, clip them to the axis rect\par
 9297   \{\par
 9298     oldClipRect = painter->clipRegion().boundingRect();\par
 9299     painter->setClipRect(axisRect);\par
 9300   \}\par
 9301   QSize tickLabelsSize(0, 0); // size of largest tick label, for offset calculation of axis label\par
 9302   if (!tickLabels.isEmpty())\par
 9303   \{\par
 9304     if (tickLabelSide == QCPAxis::lsOutside)\par
 9305       margin += tickLabelPadding;\par
 9306     painter->setFont(tickLabelFont);\par
 9307     painter->setPen(QPen(tickLabelColor));\par
 9308     const int maxLabelIndex = qMin(tickPositions.size(), tickLabels.size());\par
 9309     int distanceToAxis = margin;\par
 9310     if (tickLabelSide == QCPAxis::lsInside)\par
 9311       distanceToAxis = -(qMax(tickLengthIn, subTickLengthIn)+tickLabelPadding);\par
 9312     for (int i=0; i<maxLabelIndex; ++i)\par
 9313       placeTickLabel(painter, tickPositions.at(i), distanceToAxis, tickLabels.at(i), &tickLabelsSize);\par
 9314     if (tickLabelSide == QCPAxis::lsOutside)\par
 9315       margin += (QCPAxis::orientation(type) == Qt::Horizontal) ? tickLabelsSize.height() : tickLabelsSize.width();\par
 9316   \}\par
 9317   if (tickLabelSide == QCPAxis::lsInside)\par
 9318     painter->setClipRect(oldClipRect);\par
 9319   \par
 9320   // axis label:\par
 9321   QRect labelBounds;\par
 9322   if (!label.isEmpty())\par
 9323   \{\par
 9324     margin += labelPadding;\par
 9325     painter->setFont(labelFont);\par
 9326     painter->setPen(QPen(labelColor));\par
 9327     labelBounds = painter->fontMetrics().boundingRect(0, 0, 0, 0, Qt::TextDontClip, label);\par
 9328     if (type == QCPAxis::atLeft)\par
 9329     \{\par
 9330       QTransform oldTransform = painter->transform();\par
 9331       painter->translate((origin.x()-margin-labelBounds.height()), origin.y());\par
 9332       painter->rotate(-90);\par
 9333       painter->drawText(0, 0, axisRect.height(), labelBounds.height(), Qt::TextDontClip | Qt::AlignCenter, label);\par
 9334       painter->setTransform(oldTransform);\par
 9335     \}\par
 9336     else if (type == QCPAxis::atRight)\par
 9337     \{\par
 9338       QTransform oldTransform = painter->transform();\par
 9339       painter->translate((origin.x()+margin+labelBounds.height()), origin.y()-axisRect.height());\par
 9340       painter->rotate(90);\par
 9341       painter->drawText(0, 0, axisRect.height(), labelBounds.height(), Qt::TextDontClip | Qt::AlignCenter, label);\par
 9342       painter->setTransform(oldTransform);\par
 9343     \}\par
 9344     else if (type == QCPAxis::atTop)\par
 9345       painter->drawText(origin.x(), origin.y()-margin-labelBounds.height(), axisRect.width(), labelBounds.height(), Qt::TextDontClip | Qt::AlignCenter, label);\par
 9346     else if (type == QCPAxis::atBottom)\par
 9347       painter->drawText(origin.x(), origin.y()+margin, axisRect.width(), labelBounds.height(), Qt::TextDontClip | Qt::AlignCenter, label);\par
 9348   \}\par
 9349   \par
 9350   // set selection boxes:\par
 9351   int selectionTolerance = 0;\par
 9352   if (mParentPlot)\par
 9353     selectionTolerance = mParentPlot->selectionTolerance();\par
 9354   else\par
 9355     qDebug() << Q_FUNC_INFO << "mParentPlot is null";\par
 9356   int selAxisOutSize = qMax(qMax(tickLengthOut, subTickLengthOut), selectionTolerance);\par
 9357   int selAxisInSize = selectionTolerance;\par
 9358   int selTickLabelSize;\par
 9359   int selTickLabelOffset;\par
 9360   if (tickLabelSide == QCPAxis::lsOutside)\par
 9361   \{\par
 9362     selTickLabelSize = (QCPAxis::orientation(type) == Qt::Horizontal ? tickLabelsSize.height() : tickLabelsSize.width());\par
 9363     selTickLabelOffset = qMax(tickLengthOut, subTickLengthOut)+tickLabelPadding;\par
 9364   \} else\par
 9365   \{\par
 9366     selTickLabelSize = -(QCPAxis::orientation(type) == Qt::Horizontal ? tickLabelsSize.height() : tickLabelsSize.width());\par
 9367     selTickLabelOffset = -(qMax(tickLengthIn, subTickLengthIn)+tickLabelPadding);\par
 9368   \}\par
 9369   int selLabelSize = labelBounds.height();\par
 9370   int selLabelOffset = qMax(tickLengthOut, subTickLengthOut)+(!tickLabels.isEmpty() && tickLabelSide == QCPAxis::lsOutside ? tickLabelPadding+selTickLabelSize : 0)+labelPadding;\par
 9371   if (type == QCPAxis::atLeft)\par
 9372   \{\par
 9373     mAxisSelectionBox.setCoords(origin.x()-selAxisOutSize, axisRect.top(), origin.x()+selAxisInSize, axisRect.bottom());\par
 9374     mTickLabelsSelectionBox.setCoords(origin.x()-selTickLabelOffset-selTickLabelSize, axisRect.top(), origin.x()-selTickLabelOffset, axisRect.bottom());\par
 9375     mLabelSelectionBox.setCoords(origin.x()-selLabelOffset-selLabelSize, axisRect.top(), origin.x()-selLabelOffset, axisRect.bottom());\par
 9376   \} else if (type == QCPAxis::atRight)\par
 9377   \{\par
 9378     mAxisSelectionBox.setCoords(origin.x()-selAxisInSize, axisRect.top(), origin.x()+selAxisOutSize, axisRect.bottom());\par
 9379     mTickLabelsSelectionBox.setCoords(origin.x()+selTickLabelOffset+selTickLabelSize, axisRect.top(), origin.x()+selTickLabelOffset, axisRect.bottom());\par
 9380     mLabelSelectionBox.setCoords(origin.x()+selLabelOffset+selLabelSize, axisRect.top(), origin.x()+selLabelOffset, axisRect.bottom());\par
 9381   \} else if (type == QCPAxis::atTop)\par
 9382   \{\par
 9383     mAxisSelectionBox.setCoords(axisRect.left(), origin.y()-selAxisOutSize, axisRect.right(), origin.y()+selAxisInSize);\par
 9384     mTickLabelsSelectionBox.setCoords(axisRect.left(), origin.y()-selTickLabelOffset-selTickLabelSize, axisRect.right(), origin.y()-selTickLabelOffset);\par
 9385     mLabelSelectionBox.setCoords(axisRect.left(), origin.y()-selLabelOffset-selLabelSize, axisRect.right(), origin.y()-selLabelOffset);\par
 9386   \} else if (type == QCPAxis::atBottom)\par
 9387   \{\par
 9388     mAxisSelectionBox.setCoords(axisRect.left(), origin.y()-selAxisInSize, axisRect.right(), origin.y()+selAxisOutSize);\par
 9389     mTickLabelsSelectionBox.setCoords(axisRect.left(), origin.y()+selTickLabelOffset+selTickLabelSize, axisRect.right(), origin.y()+selTickLabelOffset);\par
 9390     mLabelSelectionBox.setCoords(axisRect.left(), origin.y()+selLabelOffset+selLabelSize, axisRect.right(), origin.y()+selLabelOffset);\par
 9391   \}\par
 9392   mAxisSelectionBox = mAxisSelectionBox.normalized();\par
 9393   mTickLabelsSelectionBox = mTickLabelsSelectionBox.normalized();\par
 9394   mLabelSelectionBox = mLabelSelectionBox.normalized();\par
 9395   // draw hitboxes for debug purposes:\par
 9396   //painter->setBrush(Qt::NoBrush);\par
 9397   //painter->drawRects(QVector<QRect>() << mAxisSelectionBox << mTickLabelsSelectionBox << mLabelSelectionBox);\par
 9398 \}\par
}
}
{\xe \v drawTickLabel\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:drawTickLabel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisPainterPrivate::drawTickLabel ({\b QCPPainter} *  {\i painter}, double  {\i x}, double  {\i y}, const {\b TickLabelData} &  {\i labelData}) const{\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAZZ}
{\bkmkend AAAAAAAAZZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9578 \{\par
 9579   // backup painter settings that we're about to change:\par
 9580   QTransform oldTransform = painter->transform();\par
 9581   QFont oldFont = painter->font();\par
 9582   \par
 9583   // transform painter to position/rotation:\par
 9584   painter->translate(x, y);\par
 9585   if (!qFuzzyIsNull(tickLabelRotation))\par
 9586     painter->rotate(tickLabelRotation);\par
 9587   \par
 9588   // draw text:\par
 9589   if (!labelData.expPart.isEmpty()) // indicator that beautiful powers must be used\par
 9590   \{\par
 9591     painter->setFont(labelData.baseFont);\par
 9592     painter->drawText(0, 0, 0, 0, Qt::TextDontClip, labelData.basePart);\par
 9593     if (!labelData.suffixPart.isEmpty())\par
 9594       painter->drawText(labelData.baseBounds.width()+1+labelData.expBounds.width(), 0, 0, 0, Qt::TextDontClip, labelData.suffixPart);\par
 9595     painter->setFont(labelData.expFont);\par
 9596     painter->drawText(labelData.baseBounds.width()+1, 0, labelData.expBounds.width(), labelData.expBounds.height(), Qt::TextDontClip,  labelData.expPart);\par
 9597   \} else\par
 9598   \{\par
 9599     painter->setFont(labelData.baseFont);\par
 9600     painter->drawText(0, 0, labelData.totalBounds.width(), labelData.totalBounds.height(), Qt::TextDontClip | Qt::AlignHCenter, labelData.basePart);\par
 9601   \}\par
 9602   \par
 9603   // reset painter settings to what it was before:\par
 9604   painter->setTransform(oldTransform);\par
 9605   painter->setFont(oldFont);\par
 9606 \}\par
}
}
{\xe \v generateLabelParameterHash\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:generateLabelParameterHash}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QByteArray QCPAxisPainterPrivate::generateLabelParameterHash () const{\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAA}
{\bkmkend AAAAAAABAA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9457 \{\par
 9458   QByteArray result;\par
 9459   result.append(QByteArray::number(mParentPlot->bufferDevicePixelRatio()));\par
 9460   result.append(QByteArray::number(tickLabelRotation));\par
 9461   result.append(QByteArray::number((int)tickLabelSide));\par
 9462   result.append(QByteArray::number((int)substituteExponent));\par
 9463   result.append(QByteArray::number((int)numberMultiplyCross));\par
 9464   result.append(tickLabelColor.name().toLatin1()+QByteArray::number(tickLabelColor.alpha(), 16));\par
 9465   result.append(tickLabelFont.toString().toLatin1());\par
 9466   return result;\par
 9467 \}\par
}
}
{\xe \v getMaxTickLabelSize\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:getMaxTickLabelSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisPainterPrivate::getMaxTickLabelSize (const QFont &  {\i font}, const QString &  {\i text}, QSize *  {\i tickLabelsSize}) const{\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAB}
{\bkmkend AAAAAAABAB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9799 \{\par
 9800   // note: this function must return the same tick label sizes as the placeTickLabel function.\par
 9801   QSize finalSize;\par
 9802   if (mParentPlot->plottingHints().testFlag(QCP::phCacheLabels) && mLabelCache.contains(text)) // label caching enabled and have cached label\par
 9803   \{\par
 9804     const CachedLabel *cachedLabel = mLabelCache.object(text);\par
 9805     finalSize = cachedLabel->pixmap.size()/mParentPlot->bufferDevicePixelRatio();\par
 9806   \} else // label caching disabled or no label with this text cached:\par
 9807   \{\par
 9808     TickLabelData labelData = getTickLabelData(font, text);\par
 9809     finalSize = labelData.rotatedTotalBounds.size();\par
 9810   \}\par
 9811   \par
 9812   // expand passed tickLabelsSize if current tick label is larger:\par
 9813   if (finalSize.width() > tickLabelsSize->width())\par
 9814     tickLabelsSize->setWidth(finalSize.width());\par
 9815   if (finalSize.height() > tickLabelsSize->height())\par
 9816     tickLabelsSize->setHeight(finalSize.height());\par
 9817 \}\par
}
}
{\xe \v getTickLabelData\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:getTickLabelData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAxisPainterPrivate::TickLabelData} QCPAxisPainterPrivate::getTickLabelData (const QFont &  {\i font}, const QString &  {\i text}) const{\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAC}
{\bkmkend AAAAAAABAC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9617 \{\par
 9618   TickLabelData result;\par
 9619   \par
 9620   // determine whether beautiful decimal powers should be used\par
 9621   bool useBeautifulPowers = false;\par
 9622   int ePos = -1; // first index of exponent part, text before that will be basePart, text until eLast will be expPart\par
 9623   int eLast = -1; // last index of exponent part, rest of text after this will be suffixPart\par
 9624   if (substituteExponent)\par
 9625   \{\par
 9626     ePos = text.indexOf(QLatin1Char('e'));\par
 9627     if (ePos > 0 && text.at(ePos-1).isDigit())\par
 9628     \{\par
 9629       eLast = ePos;\par
 9630       while (eLast+1 < text.size() && (text.at(eLast+1) == QLatin1Char('+') || text.at(eLast+1) == QLatin1Char('-') || text.at(eLast+1).isDigit()))\par
 9631         ++eLast;\par
 9632       if (eLast > ePos) // only if also to right of 'e' is a digit/+/- interpret it as beautifiable power\par
 9633         useBeautifulPowers = true;\par
 9634     \}\par
 9635   \}\par
 9636   \par
 9637   // calculate text bounding rects and do string preparation for beautiful decimal powers:\par
 9638   result.baseFont = font;\par
 9639   if (result.baseFont.pointSizeF() > 0) // might return -1 if specified with setPixelSize, in that case we can't do correction in next line\par
 9640     result.baseFont.setPointSizeF(result.baseFont.pointSizeF()+0.05); // QFontMetrics.boundingRect has a bug for exact point sizes that make the results oscillate due to internal rounding\par
 9641   if (useBeautifulPowers)\par
 9642   \{\par
 9643     // split text into parts of number/symbol that will be drawn normally and part that will be drawn as exponent:\par
 9644     result.basePart = text.left(ePos);\par
 9645     result.suffixPart = text.mid(eLast+1); // also drawn normally but after exponent\par
 9646     // in log scaling, we want to turn "1*10^n" into "10^n", else add multiplication sign and decimal base:\par
 9647     if (abbreviateDecimalPowers && result.basePart == QLatin1String("1"))\par
 9648       result.basePart = QLatin1String("10");\par
 9649     else\par
 9650       result.basePart += (numberMultiplyCross ? QString(QChar(215)) : QString(QChar(183))) + QLatin1String("10");\par
 9651     result.expPart = text.mid(ePos+1, eLast-ePos);\par
 9652     // clip "+" and leading zeros off expPart:\par
 9653     while (result.expPart.length() > 2 && result.expPart.at(1) == QLatin1Char('0')) // length > 2 so we leave one zero when numberFormatChar is 'e'\par
 9654       result.expPart.remove(1, 1);\par
 9655     if (!result.expPart.isEmpty() && result.expPart.at(0) == QLatin1Char('+'))\par
 9656       result.expPart.remove(0, 1);\par
 9657     // prepare smaller font for exponent:\par
 9658     result.expFont = font;\par
 9659     if (result.expFont.pointSize() > 0)\par
 9660       result.expFont.setPointSize(result.expFont.pointSize()*0.75);\par
 9661     else\par
 9662       result.expFont.setPixelSize(result.expFont.pixelSize()*0.75);\par
 9663     // calculate bounding rects of base part(s), exponent part and total one:\par
 9664     result.baseBounds = QFontMetrics(result.baseFont).boundingRect(0, 0, 0, 0, Qt::TextDontClip, result.basePart);\par
 9665     result.expBounds = QFontMetrics(result.expFont).boundingRect(0, 0, 0, 0, Qt::TextDontClip, result.expPart);\par
 9666     if (!result.suffixPart.isEmpty())\par
 9667       result.suffixBounds = QFontMetrics(result.baseFont).boundingRect(0, 0, 0, 0, Qt::TextDontClip, result.suffixPart);\par
 9668     result.totalBounds = result.baseBounds.adjusted(0, 0, result.expBounds.width()+result.suffixBounds.width()+2, 0); // +2 consists of the 1 pixel spacing between base and exponent (see drawTickLabel) and an extra pixel to include AA\par
 9669   \} else // useBeautifulPowers == false\par
 9670   \{\par
 9671     result.basePart = text;\par
 9672     result.totalBounds = QFontMetrics(result.baseFont).boundingRect(0, 0, 0, 0, Qt::TextDontClip | Qt::AlignHCenter, result.basePart);\par
 9673   \}\par
 9674   result.totalBounds.moveTopLeft(QPoint(0, 0)); // want bounding box aligned top left at origin, independent of how it was created, to make further processing simpler\par
 9675   \par
 9676   // calculate possibly different bounding rect after rotation:\par
 9677   result.rotatedTotalBounds = result.totalBounds;\par
 9678   if (!qFuzzyIsNull(tickLabelRotation))\par
 9679   \{\par
 9680     QTransform transform;\par
 9681     transform.rotate(tickLabelRotation);\par
 9682     result.rotatedTotalBounds = transform.mapRect(result.rotatedTotalBounds);\par
 9683   \}\par
 9684   \par
 9685   return result;\par
 9686 \}\par
}
}
{\xe \v getTickLabelDrawOffset\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:getTickLabelDrawOffset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPointF QCPAxisPainterPrivate::getTickLabelDrawOffset (const {\b TickLabelData} &  {\i labelData}) const{\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAD}
{\bkmkend AAAAAAABAD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9699 \{\par
 9700   /*\par
 9701     calculate label offset from base point at tick (non-trivial, for best visual appearance): short\par
 9702     explanation for bottom axis: The anchor, i.e. the point in the label that is placed\par
 9703     horizontally under the corresponding tick is always on the label side that is closer to the\par
 9704     axis (e.g. the left side of the text when we're rotating clockwise). On that side, the height\par
 9705     is halved and the resulting point is defined the anchor. This way, a 90 degree rotated text\par
 9706     will be centered under the tick (i.e. displaced horizontally by half its height). At the same\par
 9707     time, a 45 degree rotated text will "point toward" its tick, as is typical for rotated tick\par
 9708     labels.\par
 9709   */\par
 9710   bool doRotation = !qFuzzyIsNull(tickLabelRotation);\par
 9711   bool flip = qFuzzyCompare(qAbs(tickLabelRotation), 90.0); // perfect +/-90 degree flip. Indicates vertical label centering on vertical axes.\par
 9712   double radians = tickLabelRotation/180.0*M_PI;\par
 9713   int x=0, y=0;\par
 9714   if ((type == QCPAxis::atLeft && tickLabelSide == QCPAxis::lsOutside) || (type == QCPAxis::atRight && tickLabelSide == QCPAxis::lsInside)) // Anchor at right side of tick label\par
 9715   \{\par
 9716     if (doRotation)\par
 9717     \{\par
 9718       if (tickLabelRotation > 0)\par
 9719       \{\par
 9720         x = -qCos(radians)*labelData.totalBounds.width();\par
 9721         y = flip ? -labelData.totalBounds.width()/2.0 : -qSin(radians)*labelData.totalBounds.width()-qCos(radians)*labelData.totalBounds.height()/2.0;\par
 9722       \} else\par
 9723       \{\par
 9724         x = -qCos(-radians)*labelData.totalBounds.width()-qSin(-radians)*labelData.totalBounds.height();\par
 9725         y = flip ? +labelData.totalBounds.width()/2.0 : +qSin(-radians)*labelData.totalBounds.width()-qCos(-radians)*labelData.totalBounds.height()/2.0;\par
 9726       \}\par
 9727     \} else\par
 9728     \{\par
 9729       x = -labelData.totalBounds.width();\par
 9730       y = -labelData.totalBounds.height()/2.0;\par
 9731     \}\par
 9732   \} else if ((type == QCPAxis::atRight && tickLabelSide == QCPAxis::lsOutside) || (type == QCPAxis::atLeft && tickLabelSide == QCPAxis::lsInside)) // Anchor at left side of tick label\par
 9733   \{\par
 9734     if (doRotation)\par
 9735     \{\par
 9736       if (tickLabelRotation > 0)\par
 9737       \{\par
 9738         x = +qSin(radians)*labelData.totalBounds.height();\par
 9739         y = flip ? -labelData.totalBounds.width()/2.0 : -qCos(radians)*labelData.totalBounds.height()/2.0;\par
 9740       \} else\par
 9741       \{\par
 9742         x = 0;\par
 9743         y = flip ? +labelData.totalBounds.width()/2.0 : -qCos(-radians)*labelData.totalBounds.height()/2.0;\par
 9744       \}\par
 9745     \} else\par
 9746     \{\par
 9747       x = 0;\par
 9748       y = -labelData.totalBounds.height()/2.0;\par
 9749     \}\par
 9750   \} else if ((type == QCPAxis::atTop && tickLabelSide == QCPAxis::lsOutside) || (type == QCPAxis::atBottom && tickLabelSide == QCPAxis::lsInside)) // Anchor at bottom side of tick label\par
 9751   \{\par
 9752     if (doRotation)\par
 9753     \{\par
 9754       if (tickLabelRotation > 0)\par
 9755       \{\par
 9756         x = -qCos(radians)*labelData.totalBounds.width()+qSin(radians)*labelData.totalBounds.height()/2.0;\par
 9757         y = -qSin(radians)*labelData.totalBounds.width()-qCos(radians)*labelData.totalBounds.height();\par
 9758       \} else\par
 9759       \{\par
 9760         x = -qSin(-radians)*labelData.totalBounds.height()/2.0;\par
 9761         y = -qCos(-radians)*labelData.totalBounds.height();\par
 9762       \}\par
 9763     \} else\par
 9764     \{\par
 9765       x = -labelData.totalBounds.width()/2.0;\par
 9766       y = -labelData.totalBounds.height();\par
 9767     \}\par
 9768   \} else if ((type == QCPAxis::atBottom && tickLabelSide == QCPAxis::lsOutside) || (type == QCPAxis::atTop && tickLabelSide == QCPAxis::lsInside)) // Anchor at top side of tick label\par
 9769   \{\par
 9770     if (doRotation)\par
 9771     \{\par
 9772       if (tickLabelRotation > 0)\par
 9773       \{\par
 9774         x = +qSin(radians)*labelData.totalBounds.height()/2.0;\par
 9775         y = 0;\par
 9776       \} else\par
 9777       \{\par
 9778         x = -qCos(-radians)*labelData.totalBounds.width()-qSin(-radians)*labelData.totalBounds.height()/2.0;\par
 9779         y = +qSin(-radians)*labelData.totalBounds.width();\par
 9780       \}\par
 9781     \} else\par
 9782     \{\par
 9783       x = -labelData.totalBounds.width()/2.0;\par
 9784       y = 0;\par
 9785     \}\par
 9786   \}\par
 9787   \par
 9788   return QPointF(x, y);\par
 9789 \}\par
}
}
{\xe \v labelSelectionBox\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:labelSelectionBox}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::labelSelectionBox () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2228 \{ return mLabelSelectionBox; \}\par
}
}
{\xe \v placeTickLabel\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:placeTickLabel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisPainterPrivate::placeTickLabel ({\b QCPPainter} *  {\i painter}, double  {\i position}, int  {\i distanceToAxis}, const QString &  {\i text}, QSize *  {\i tickLabelsSize}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9489 \{\par
 9490   // warning: if you change anything here, also adapt getMaxTickLabelSize() accordingly!\par
 9491   if (text.isEmpty()) return;\par
 9492   QSize finalSize;\par
 9493   QPointF labelAnchor;\par
 9494   switch (type)\par
 9495   \{\par
 9496     case QCPAxis::atLeft:   labelAnchor = QPointF(axisRect.left()-distanceToAxis-offset, position); break;\par
 9497     case QCPAxis::atRight:  labelAnchor = QPointF(axisRect.right()+distanceToAxis+offset, position); break;\par
 9498     case QCPAxis::atTop:    labelAnchor = QPointF(position, axisRect.top()-distanceToAxis-offset); break;\par
 9499     case QCPAxis::atBottom: labelAnchor = QPointF(position, axisRect.bottom()+distanceToAxis+offset); break;\par
 9500   \}\par
 9501   if (mParentPlot->plottingHints().testFlag(QCP::phCacheLabels) && !painter->modes().testFlag(QCPPainter::pmNoCaching)) // label caching enabled\par
 9502   \{\par
 9503     CachedLabel *cachedLabel = mLabelCache.take(text); // attempt to get label from cache\par
 9504     if (!cachedLabel)  // no cached label existed, create it\par
 9505     \{\par
 9506       cachedLabel = new CachedLabel;\par
 9507       TickLabelData labelData = getTickLabelData(painter->font(), text);\par
 9508       cachedLabel->offset = getTickLabelDrawOffset(labelData)+labelData.rotatedTotalBounds.topLeft();\par
 9509       if (!qFuzzyCompare(1.0, mParentPlot->bufferDevicePixelRatio()))\par
 9510       \{\par
 9511         cachedLabel->pixmap = QPixmap(labelData.rotatedTotalBounds.size()*mParentPlot->bufferDevicePixelRatio());\par
 9512 #ifdef QCP_DEVICEPIXELRATIO_SUPPORTED\par
 9513 #  ifdef QCP_DEVICEPIXELRATIO_FLOAT\par
 9514         cachedLabel->pixmap.setDevicePixelRatio(mParentPlot->devicePixelRatioF());\par
 9515 #  else\par
 9516         cachedLabel->pixmap.setDevicePixelRatio(mParentPlot->devicePixelRatio());\par
 9517 #  endif\par
 9518 #endif\par
 9519       \} else\par
 9520         cachedLabel->pixmap = QPixmap(labelData.rotatedTotalBounds.size());\par
 9521       cachedLabel->pixmap.fill(Qt::transparent);\par
 9522       QCPPainter cachePainter(&cachedLabel->pixmap);\par
 9523       cachePainter.setPen(painter->pen());\par
 9524       drawTickLabel(&cachePainter, -labelData.rotatedTotalBounds.topLeft().x(), -labelData.rotatedTotalBounds.topLeft().y(), labelData);\par
 9525     \}\par
 9526     // if label would be partly clipped by widget border on sides, don't draw it (only for outside tick labels):\par
 9527     bool labelClippedByBorder = false;\par
 9528     if (tickLabelSide == QCPAxis::lsOutside)\par
 9529     \{\par
 9530       if (QCPAxis::orientation(type) == Qt::Horizontal)\par
 9531         labelClippedByBorder = labelAnchor.x()+cachedLabel->offset.x()+cachedLabel->pixmap.width()/mParentPlot->bufferDevicePixelRatio() > viewportRect.right() || labelAnchor.x()+cachedLabel->offset.x() < viewportRect.left();\par
 9532       else\par
 9533         labelClippedByBorder = labelAnchor.y()+cachedLabel->offset.y()+cachedLabel->pixmap.height()/mParentPlot->bufferDevicePixelRatio() > viewportRect.bottom() || labelAnchor.y()+cachedLabel->offset.y() < viewportRect.top();\par
 9534     \}\par
 9535     if (!labelClippedByBorder)\par
 9536     \{\par
 9537       painter->drawPixmap(labelAnchor+cachedLabel->offset, cachedLabel->pixmap);\par
 9538       finalSize = cachedLabel->pixmap.size()/mParentPlot->bufferDevicePixelRatio();\par
 9539     \}\par
 9540     mLabelCache.insert(text, cachedLabel); // return label to cache or insert for the first time if newly created\par
 9541   \} else // label caching disabled, draw text directly on surface:\par
 9542   \{\par
 9543     TickLabelData labelData = getTickLabelData(painter->font(), text);\par
 9544     QPointF finalPosition = labelAnchor + getTickLabelDrawOffset(labelData);\par
 9545     // if label would be partly clipped by widget border on sides, don't draw it (only for outside tick labels):\par
 9546      bool labelClippedByBorder = false;\par
 9547     if (tickLabelSide == QCPAxis::lsOutside)\par
 9548     \{\par
 9549       if (QCPAxis::orientation(type) == Qt::Horizontal)\par
 9550         labelClippedByBorder = finalPosition.x()+(labelData.rotatedTotalBounds.width()+labelData.rotatedTotalBounds.left()) > viewportRect.right() || finalPosition.x()+labelData.rotatedTotalBounds.left() < viewportRect.left();\par
 9551       else\par
 9552         labelClippedByBorder = finalPosition.y()+(labelData.rotatedTotalBounds.height()+labelData.rotatedTotalBounds.top()) > viewportRect.bottom() || finalPosition.y()+labelData.rotatedTotalBounds.top() < viewportRect.top();\par
 9553     \}\par
 9554     if (!labelClippedByBorder)\par
 9555     \{\par
 9556       drawTickLabel(painter, finalPosition.x(), finalPosition.y(), labelData);\par
 9557       finalSize = labelData.rotatedTotalBounds.size();\par
 9558     \}\par
 9559   \}\par
 9560   \par
 9561   // expand passed tickLabelsSize if current tick label is larger:\par
 9562   if (finalSize.width() > tickLabelsSize->width())\par
 9563     tickLabelsSize->setWidth(finalSize.width());\par
 9564   if (finalSize.height() > tickLabelsSize->height())\par
 9565     tickLabelsSize->setHeight(finalSize.height());\par
 9566 \}\par
}
}
{\xe \v size\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisPainterPrivate::size () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9406 \{\par
 9407   int result = 0;\par
 9408   \par
 9409   // get length of tick marks pointing outwards:\par
 9410   if (!tickPositions.isEmpty())\par
 9411     result += qMax(0, qMax(tickLengthOut, subTickLengthOut));\par
 9412   \par
 9413   // calculate size of tick labels:\par
 9414   if (tickLabelSide == QCPAxis::lsOutside)\par
 9415   \{\par
 9416     QSize tickLabelsSize(0, 0);\par
 9417     if (!tickLabels.isEmpty())\par
 9418     \{\par
 9419       for (int i=0; i<tickLabels.size(); ++i)\par
 9420         getMaxTickLabelSize(tickLabelFont, tickLabels.at(i), &tickLabelsSize);\par
 9421       result += QCPAxis::orientation(type) == Qt::Horizontal ? tickLabelsSize.height() : tickLabelsSize.width();\par
 9422     result += tickLabelPadding;\par
 9423     \}\par
 9424   \}\par
 9425   \par
 9426   // calculate size of axis label (only height needed, because left/right labels are rotated by 90 degrees):\par
 9427   if (!label.isEmpty())\par
 9428   \{\par
 9429     QFontMetrics fontMetrics(labelFont);\par
 9430     QRect bounds;\par
 9431     bounds = fontMetrics.boundingRect(0, 0, 0, 0, Qt::TextDontClip | Qt::AlignHCenter | Qt::AlignVCenter, label);\par
 9432     result += bounds.height() + labelPadding;\par
 9433   \}\par
 9434   \par
 9435   return result;\par
 9436 \}\par
}
}
{\xe \v tickLabelsSelectionBox\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLabelsSelectionBox}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::tickLabelsSelectionBox () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2227 \{ return mTickLabelsSelectionBox; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v abbreviateDecimalPowers\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:abbreviateDecimalPowers}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPAxisPainterPrivate::abbreviateDecimalPowers}}
\par
{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v axisRect\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:axisRect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::axisRect}}
\par
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v basePen\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:basePen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPAxisPainterPrivate::basePen}}
\par
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v label\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:label}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPAxisPainterPrivate::label}}
\par
{\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v labelColor\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:labelColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QColor QCPAxisPainterPrivate::labelColor}}
\par
{\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v labelFont\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:labelFont}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QFont QCPAxisPainterPrivate::labelFont}}
\par
{\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v labelPadding\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:labelPadding}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisPainterPrivate::labelPadding}}
\par
{\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v lowerEnding\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:lowerEnding}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPLineEnding} QCPAxisPainterPrivate::lowerEnding}}
\par
{\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mAxisSelectionBox\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:mAxisSelectionBox}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::mAxisSelectionBox{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mLabelCache\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:mLabelCache}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCache<QString, {\b CachedLabel}> QCPAxisPainterPrivate::mLabelCache{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mLabelParameterHash\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:mLabelParameterHash}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QByteArray QCPAxisPainterPrivate::mLabelParameterHash{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mLabelSelectionBox\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:mLabelSelectionBox}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::mLabelSelectionBox{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mParentPlot\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:mParentPlot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCustomPlot}* QCPAxisPainterPrivate::mParentPlot{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTickLabelsSelectionBox\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:mTickLabelsSelectionBox}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::mTickLabelsSelectionBox{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numberMultiplyCross\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:numberMultiplyCross}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPAxisPainterPrivate::numberMultiplyCross}}
\par
{\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v offset\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:offset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisPainterPrivate::offset}}
\par
{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reversedEndings\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:reversedEndings}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPAxisPainterPrivate::reversedEndings}}
\par
{\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v substituteExponent\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:substituteExponent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPAxisPainterPrivate::substituteExponent}}
\par
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subTickLengthIn\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:subTickLengthIn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisPainterPrivate::subTickLengthIn}}
\par
{\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subTickLengthOut\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:subTickLengthOut}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisPainterPrivate::subTickLengthOut}}
\par
{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subTickPen\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:subTickPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPAxisPainterPrivate::subTickPen}}
\par
{\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subTickPositions\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:subTickPositions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector<double> QCPAxisPainterPrivate::subTickPositions}}
\par
{\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLabelColor\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLabelColor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QColor QCPAxisPainterPrivate::tickLabelColor}}
\par
{\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLabelFont\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLabelFont}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QFont QCPAxisPainterPrivate::tickLabelFont}}
\par
{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLabelPadding\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLabelPadding}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisPainterPrivate::tickLabelPadding}}
\par
{\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLabelRotation\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLabelRotation}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisPainterPrivate::tickLabelRotation}}
\par
{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLabels\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLabels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector<QString> QCPAxisPainterPrivate::tickLabels}}
\par
{\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLabelSide\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLabelSide}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAxis::LabelSide} QCPAxisPainterPrivate::tickLabelSide}}
\par
{\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLengthIn\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLengthIn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisPainterPrivate::tickLengthIn}}
\par
{\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickLengthOut\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickLengthOut}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisPainterPrivate::tickLengthOut}}
\par
{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickPen\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPAxisPainterPrivate::tickPen}}
\par
{\bkmkstart AAAAAAABBM}
{\bkmkend AAAAAAABBM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tickPositions\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:tickPositions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector<double> QCPAxisPainterPrivate::tickPositions}}
\par
{\bkmkstart AAAAAAABBN}
{\bkmkend AAAAAAABBN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAxis::AxisType} QCPAxisPainterPrivate::type}}
\par
{\bkmkstart AAAAAAABBO}
{\bkmkend AAAAAAABBO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v upperEnding\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:upperEnding}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPLineEnding} QCPAxisPainterPrivate::upperEnding}}
\par
{\bkmkstart AAAAAAABBP}
{\bkmkend AAAAAAABBP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v viewportRect\:QCPAxisPainterPrivate}
{\xe \v QCPAxisPainterPrivate\:viewportRect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QRect QCPAxisPainterPrivate::viewportRect}}
\par
{\bkmkstart AAAAAAABBQ}
{\bkmkend AAAAAAABBQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documentação para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.cpp}\par
}}