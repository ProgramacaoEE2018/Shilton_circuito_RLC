{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referência da Classe QCPScatterStyle\par \pard\plain 
{\tc\tcl2 \v QCPScatterStyle}
{\xe \v QCPScatterStyle}
{\bkmkstart AAAAAAADIK}
{\bkmkend AAAAAAADIK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents the visual appearance of scatter points. }}\par
{
{\f2 #include <qcustomplot.h>}}\par
Diagrama de colaboração para QCPScatterStyle:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classQCPScatterStyle__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b ScatterProperty} \{ {\b spNone} = 0x00, 
{\b spPen} = 0x01, 
{\b spBrush} = 0x02, 
{\b spSize} = 0x04, 
{\b spShape} = 0x08, 
{\b spAll} = 0xFF
 \}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b ScatterShape} \{ {\b ssNone}, 
{\b ssDot}, 
{\b ssCross}, 
{\b ssPlus}, 
{\b ssCircle}, 
{\b ssDisc}, 
{\b ssSquare}, 
{\b ssDiamond}, 
{\b ssStar}, 
{\b ssTriangle}, 
{\b ssTriangleInverted}, 
{\b ssCrossSquare}, 
{\b ssPlusSquare}, 
{\b ssCrossCircle}, 
{\b ssPlusCircle}, 
{\b ssPeace}, 
{\b ssPixmap}, 
{\b ssCustom}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} ({\b ScatterShape} {\b shape}, double {\b size}=6)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} ({\b ScatterShape} {\b shape}, const QColor &color, double {\b size})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} ({\b ScatterShape} {\b shape}, const QColor &color, const QColor &fill, double {\b size})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} ({\b ScatterShape} {\b shape}, const QPen &{\b pen}, const QBrush &{\b brush}, double {\b size})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} (const QPixmap &{\b pixmap})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPScatterStyle} (const QPainterPath &{\b customPath}, const QPen &{\b pen}, const QBrush &{\b brush}=Qt::NoBrush, double {\b size}=6)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b size} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ScatterShape} {\b shape} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b pen} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QBrush {\b brush} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPixmap {\b pixmap} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPainterPath {\b customPath} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setFromOther} (const {\b QCPScatterStyle} &other, ScatterProperties properties)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setSize} (double {\b size})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setShape} ({\b ScatterShape} {\b shape})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPen} (const QPen &{\b pen})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBrush} (const QBrush &{\b brush})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPixmap} (const QPixmap &{\b pixmap})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCustomPath} (const QPainterPath &{\b customPath})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isNone} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isPenDefined} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b undefinePen} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b applyTo} ({\b QCPPainter} *painter, const QPen &defaultPen) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b drawShape} ({\b QCPPainter} *painter, const QPointF &pos) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b drawShape} ({\b QCPPainter} *painter, double x, double y) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mSize}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ScatterShape} {\b mShape}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPen {\b mPen}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QBrush {\b mBrush}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPixmap {\b mPixmap}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPainterPath {\b mCustomPath}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b mPenDefined}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descrição detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents the visual appearance of scatter points. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class holds information about shape, color and size of scatter points. In plottables like {\b QCPGraph} it is used to store how scatter points shall be drawn. For example, {\b QCPGraph::setScatterStyle} takes a {\b QCPScatterStyle} instance.\par
A scatter style consists of a shape ({\b setShape}), a line color ({\b setPen}) and possibly a fill ({\b setBrush}), if the shape provides a fillable area. Further, the size of the shape can be controlled with {\b setSize}.\par
{\bkmkstart AAAAAAADIL}
{\bkmkend AAAAAAADIL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Specifying a scatter style
\par}
{\tc\tcl2 \v Specifying a scatter style}
You can set all these configurations either by calling the respective functions on an instance: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid } Or you can use one of the various constructors that take different parameter combinations, making it easy to specify a scatter style in a single call, like so: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid } \par}
{\bkmkstart AAAAAAADIM}
{\bkmkend AAAAAAADIM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Leaving the color/pen up to the plottable
\par}
{\tc\tcl2 \v Leaving the color/pen up to the plottable}
There are two constructors which leave the pen undefined: {\b QCPScatterStyle()} and {\b QCPScatterStyle(ScatterShape shape, double size)}. If those constructors are used, a call to {\b isPenDefined} will return false. It leads to scatter points that inherit the pen from the plottable that uses the scatter style. Thus, if such a scatter style is passed to {\b QCPGraph}, the line color of the graph ({\b QCPGraph::setPen}) will be used by the scatter points. This makes it very convenient to set up typical scatter settings:\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid } Notice that it wasn't even necessary to explicitly call a {\b QCPScatterStyle} constructor. This works because {\b QCPScatterStyle} provides a constructor that can transform a {\b ScatterShape} directly into a {\b QCPScatterStyle} instance (that's the {\b QCPScatterStyle(ScatterShape shape, double size)} constructor with a default for {\i size} ). In those cases, C++ allows directly supplying a {\b ScatterShape}, where actually a {\b QCPScatterStyle} is expected.\par}
{\bkmkstart AAAAAAADIN}
{\bkmkend AAAAAAADIN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Custom shapes and pixmaps
\par}
{\tc\tcl2 \v Custom shapes and pixmaps}
{\b QCPScatterStyle} supports drawing custom shapes and arbitrary pixmaps as scatter points.\par
For custom shapes, you can provide a QPainterPath with the desired shape to the {\b setCustomPath} function or call the constructor that takes a painter path. The scatter shape will automatically be set to {\b ssCustom}.\par
For pixmaps, you call {\b setPixmap} with the desired QPixmap. Alternatively you can use the constructor that takes a QPixmap. The scatter shape will automatically be set to {\b ssPixmap}. Note that {\b setSize} does not influence the appearance of the pixmap. \par}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerações\par
\pard\plain 
{\xe \v ScatterProperty\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ScatterProperty}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPScatterStyle::ScatterProperty}}}
\par
{\bkmkstart AAAAAAADIO}
{\bkmkend AAAAAAADIO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents the various properties of a scatter style instance. For example, this enum is used to specify which properties of {\b QCPSelectionDecorator::setScatterStyle} will be used when highlighting selected data points.\par
Specific scatter properties can be transferred between {\b QCPScatterStyle} instances via {\b setFromOther}. \par
}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v spNone\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:spNone}
{\qr spNone{\bkmkstart AAAAAAADIP}
{\bkmkend AAAAAAADIP}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 0x00}  None \par
}\cell }{\row }
{\xe \v spPen\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:spPen}
{\qr spPen{\bkmkstart AAAAAAADIQ}
{\bkmkend AAAAAAADIQ}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 0x01}  The pen property, see {\b setPen} \par
}\cell }{\row }
{\xe \v spBrush\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:spBrush}
{\qr spBrush{\bkmkstart AAAAAAADIR}
{\bkmkend AAAAAAADIR}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 0x02}  The brush property, see {\b setBrush} \par
}\cell }{\row }
{\xe \v spSize\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:spSize}
{\qr spSize{\bkmkstart AAAAAAADIS}
{\bkmkend AAAAAAADIS}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 0x04}  The size property, see {\b setSize} \par
}\cell }{\row }
{\xe \v spShape\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:spShape}
{\qr spShape{\bkmkstart AAAAAAADIT}
{\bkmkend AAAAAAADIT}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 0x08}  The shape property, see {\b setShape} \par
}\cell }{\row }
{\xe \v spAll\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:spAll}
{\qr spAll{\bkmkstart AAAAAAADIU}
{\bkmkend AAAAAAADIU}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 0xFF}  All properties \par
}\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2300                        \{ spNone  = 0x00  \par
 2301                          ,spPen   = 0x01  \par
 2302                          ,spBrush = 0x02  \par
 2303                          ,spSize  = 0x04  \par
 2304                          ,spShape = 0x08  \par
 2305                          ,spAll   = 0xFF  \par
 2306                        \};\par
}
}
{\xe \v ScatterShape\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ScatterShape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPScatterStyle::ScatterShape}}}
\par
{\bkmkstart AAAAAAADIV}
{\bkmkend AAAAAAADIV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the shape used for scatter points.\par
On plottables/items that draw scatters, the sizes of these visualizations (with exception of {\b ssDot} and {\b ssPixmap}) can be controlled with the {\b setSize} function. Scatters are drawn with the pen and brush specified with {\b setPen} and {\b setBrush}. \par
}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v ssNone\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssNone}
{\qr ssNone{\bkmkstart AAAAAAADIW}
{\bkmkend AAAAAAADIW}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
no scatter symbols are drawn (e.g. in {\b QCPGraph}, data only represented with lines) \par
}\cell }{\row }
{\xe \v ssDot\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssDot}
{\qr ssDot{\bkmkstart AAAAAAADIX}
{\bkmkend AAAAAAADIX}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssDot.png\} a single pixel (use {\b ssDisc} or {\b ssCircle} if you want a round shape with a certain radius) \par
}\cell }{\row }
{\xe \v ssCross\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssCross}
{\qr ssCross{\bkmkstart AAAAAAADIY}
{\bkmkend AAAAAAADIY}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssCross.png\} a cross \par
}\cell }{\row }
{\xe \v ssPlus\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssPlus}
{\qr ssPlus{\bkmkstart AAAAAAADIZ}
{\bkmkend AAAAAAADIZ}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssPlus.png\} a plus \par
}\cell }{\row }
{\xe \v ssCircle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssCircle}
{\qr ssCircle{\bkmkstart AAAAAAADJA}
{\bkmkend AAAAAAADJA}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssCircle.png\} a circle \par
}\cell }{\row }
{\xe \v ssDisc\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssDisc}
{\qr ssDisc{\bkmkstart AAAAAAADJB}
{\bkmkend AAAAAAADJB}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssDisc.png\} a circle which is filled with the pen's color (not the brush as with ssCircle) \par
}\cell }{\row }
{\xe \v ssSquare\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssSquare}
{\qr ssSquare{\bkmkstart AAAAAAADJC}
{\bkmkend AAAAAAADJC}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssSquare.png\} a square \par
}\cell }{\row }
{\xe \v ssDiamond\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssDiamond}
{\qr ssDiamond{\bkmkstart AAAAAAADJD}
{\bkmkend AAAAAAADJD}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssDiamond.png\} a diamond \par
}\cell }{\row }
{\xe \v ssStar\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssStar}
{\qr ssStar{\bkmkstart AAAAAAADJE}
{\bkmkend AAAAAAADJE}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssStar.png\} a star with eight arms, i.e. a combination of cross and plus \par
}\cell }{\row }
{\xe \v ssTriangle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssTriangle}
{\qr ssTriangle{\bkmkstart AAAAAAADJF}
{\bkmkend AAAAAAADJF}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssTriangle.png\} an equilateral triangle, standing on baseline \par
}\cell }{\row }
{\xe \v ssTriangleInverted\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssTriangleInverted}
{\qr ssTriangleInverted{\bkmkstart AAAAAAADJG}
{\bkmkend AAAAAAADJG}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssTriangleInverted.png\} an equilateral triangle, standing on corner \par
}\cell }{\row }
{\xe \v ssCrossSquare\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssCrossSquare}
{\qr ssCrossSquare{\bkmkstart AAAAAAADJH}
{\bkmkend AAAAAAADJH}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssCrossSquare.png\} a square with a cross inside \par
}\cell }{\row }
{\xe \v ssPlusSquare\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssPlusSquare}
{\qr ssPlusSquare{\bkmkstart AAAAAAADJI}
{\bkmkend AAAAAAADJI}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssPlusSquare.png\} a square with a plus inside \par
}\cell }{\row }
{\xe \v ssCrossCircle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssCrossCircle}
{\qr ssCrossCircle{\bkmkstart AAAAAAADJJ}
{\bkmkend AAAAAAADJJ}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssCrossCircle.png\} a circle with a cross inside \par
}\cell }{\row }
{\xe \v ssPlusCircle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssPlusCircle}
{\qr ssPlusCircle{\bkmkstart AAAAAAADJK}
{\bkmkend AAAAAAADJK}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssPlusCircle.png\} a circle with a plus inside \par
}\cell }{\row }
{\xe \v ssPeace\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssPeace}
{\qr ssPeace{\bkmkstart AAAAAAADJL}
{\bkmkend AAAAAAADJL}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\{ssPeace.png\} a circle, with one vertical and two downward diagonal lines \par
}\cell }{\row }
{\xe \v ssPixmap\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssPixmap}
{\qr ssPixmap{\bkmkstart AAAAAAADJM}
{\bkmkend AAAAAAADJM}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
a custom pixmap specified by {\b setPixmap}, centered on the data point coordinates \par
}\cell }{\row }
{\xe \v ssCustom\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:ssCustom}
{\qr ssCustom{\bkmkstart AAAAAAADJN}
{\bkmkend AAAAAAADJN}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
custom painter operations are performed per scatter (As QPainterPath, see {\b setCustomPath}) \par
}\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2318                     \{ ssNone       \par
 2319                       ,ssDot       \par
 2320                       ,ssCross     \par
 2321                       ,ssPlus      \par
 2322                       ,ssCircle    \par
 2323                       ,ssDisc      \par
 2324                       ,ssSquare    \par
 2325                       ,ssDiamond   \par
 2326                       ,ssStar      \par
 2327                       ,ssTriangle  \par
 2328                       ,ssTriangleInverted \par
 2329                       ,ssCrossSquare      \par
 2330                       ,ssPlusSquare       \par
 2331                       ,ssCrossCircle      \par
 2332                       ,ssPlusCircle       \par
 2333                       ,ssPeace     \par
 2334                       ,ssPixmap    \par
 2335                       ,ssCustom    \par
 2336                     \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v QCPScatterStyle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::QCPScatterStyle ()}}
\par
{\bkmkstart AAAAAAADJO}
{\bkmkend AAAAAAADJO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPScatterStyle} instance with size set to 6. No shape, pen or brush is defined.\par
Since the pen is undefined ({\b isPenDefined} returns false), the scatter color will be inherited from the plottable that uses this scatter style. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9909                                  :\par
 9910   mSize(6),\par
 9911   mShape(ssNone),\par
 9912   mPen(Qt::NoPen),\par
 9913   mBrush(Qt::NoBrush),\par
 9914   mPenDefined(false)\par
 9915 \{\par
 9916 \}\par
}
}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::QCPScatterStyle ({\b ScatterShape}  {\i shape}, double  {\i size} = {\f2 6})}}
\par
{\bkmkstart AAAAAAADJP}
{\bkmkend AAAAAAADJP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPScatterStyle} instance with shape set to {\i shape}  and size to {\i size} . No pen or brush is defined.\par
Since the pen is undefined ({\b isPenDefined} returns false), the scatter color will be inherited from the plottable that uses this scatter style. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9925                                                                 :\par
 9926   mSize(size),\par
 9927   mShape(shape),\par
 9928   mPen(Qt::NoPen),\par
 9929   mBrush(Qt::NoBrush),\par
 9930   mPenDefined(false)\par
 9931 \{\par
 9932 \}\par
}
}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::QCPScatterStyle ({\b ScatterShape}  {\i shape}, const QColor &  {\i color}, double  {\i size})}}
\par
{\bkmkstart AAAAAAADJQ}
{\bkmkend AAAAAAADJQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPScatterStyle} instance with shape set to {\i shape} , the pen color set to {\i color} , and size to {\i size} . No brush is defined, i.e. the scatter point will not be filled. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9938                                                                                      :\par
 9939   mSize(size),\par
 9940   mShape(shape),\par
 9941   mPen(QPen(color)),\par
 9942   mBrush(Qt::NoBrush),\par
 9943   mPenDefined(true)\par
 9944 \{\par
 9945 \}\par
}
}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::QCPScatterStyle ({\b ScatterShape}  {\i shape}, const QColor &  {\i color}, const QColor &  {\i fill}, double  {\i size})}}
\par
{\bkmkstart AAAAAAADJR}
{\bkmkend AAAAAAADJR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPScatterStyle} instance with shape set to {\i shape} , the pen color set to {\i color} , the brush color to {\i fill}  (with a solid pattern), and size to {\i size} . \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9951                                                                                                          :\par
 9952   mSize(size),\par
 9953   mShape(shape),\par
 9954   mPen(QPen(color)),\par
 9955   mBrush(QBrush(fill)),\par
 9956   mPenDefined(true)\par
 9957 \{\par
 9958 \}\par
}
}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::QCPScatterStyle ({\b ScatterShape}  {\i shape}, const QPen &  {\i pen}, const QBrush &  {\i brush}, double  {\i size})}}
\par
{\bkmkstart AAAAAAADJS}
{\bkmkend AAAAAAADJS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPScatterStyle} instance with shape set to {\i shape} , the pen set to {\i pen} , the brush to {\i brush} , and size to {\i size} .\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Aviso:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid In some cases it might be tempting to directly use a pen style like {\f2 Qt::NoPen}  as {\i pen}  and a color like {\f2 Qt::blue}  as {\i brush} . Notice however, that the corresponding call\par
{\f2 {\b QCPScatterStyle(QCPScatterShape::ssCircle, Qt::NoPen, Qt::blue, 5)}} \par
doesn't necessarily lead C++ to use this constructor in some cases, but might mistake {\f2 Qt::NoPen}  for a QColor and use the {\b QCPScatterStyle(ScatterShape shape, const QColor &color, const QColor &fill, double size)} constructor instead (which will lead to an unexpected look of the scatter points). To prevent this, be more explicit with the parameter types. For example, use {\f2 QBrush(Qt::blue)}  instead of just {\f2 Qt::blue} , to clearly point out to the compiler that this constructor is wanted. \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9975                                                                                                       :\par
 9976   mSize(size),\par
 9977   mShape(shape),\par
 9978   mPen(pen),\par
 9979   mBrush(brush),\par
 9980   mPenDefined(pen.style() != Qt::NoPen)\par
 9981 \{\par
 9982 \}\par
}
}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::QCPScatterStyle (const QPixmap &  {\i pixmap})}}
\par
{\bkmkstart AAAAAAADJT}
{\bkmkend AAAAAAADJT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPScatterStyle} instance which will show the specified {\i pixmap} . The scatter shape is set to {\b ssPixmap}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  9988                                                       :\par
 9989   mSize(5),\par
 9990   mShape(ssPixmap),\par
 9991   mPen(Qt::NoPen),\par
 9992   mBrush(Qt::NoBrush),\par
 9993   mPixmap(pixmap),\par
 9994   mPenDefined(false)\par
 9995 \{\par
 9996 \}\par
}
}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:QCPScatterStyle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPScatterStyle::QCPScatterStyle (const QPainterPath &  {\i customPath}, const QPen &  {\i pen}, const QBrush &  {\i brush} = {\f2 Qt::NoBrush}, double  {\i size} = {\f2 6})}}
\par
{\bkmkstart AAAAAAADJU}
{\bkmkend AAAAAAADJU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPScatterStyle} instance with a custom shape that is defined via {\i customPath} . The scatter shape is set to {\b ssCustom}.\par
The custom shape line will be drawn with {\i pen}  and filled with {\i brush} . The size has a slightly different meaning than for built-in scatter points: The custom path will be drawn scaled by a factor of {\i size/6.0} . Since the default {\i size}  is 6, the custom path will appear in its original size by default. To for example double the size of the path, set {\i size}  to 12. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10007                                                                                                                   :\par
10008   mSize(size),\par
10009   mShape(ssCustom),\par
10010   mPen(pen),\par
10011   mBrush(brush),\par
10012   mCustomPath(customPath),\par
10013   mPenDefined(pen.style() != Qt::NoPen)\par
10014 \{\par
10015 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções membros\par
\pard\plain 
{\xe \v applyTo\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:applyTo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::applyTo ({\b QCPPainter} *  {\i painter}, const QPen &  {\i defaultPen}) const}}
\par
{\bkmkstart AAAAAAADJV}
{\bkmkend AAAAAAADJV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Applies the pen and the brush of this scatter style to {\i painter} . If this scatter style has an undefined pen ({\b isPenDefined}), sets the pen of {\i painter}  to {\i defaultPen}  instead.\par
This function is used by plottables (or any class that wants to draw scatters) just before a number of scatters with this style shall be drawn with the {\i painter} .\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b drawShape} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10136 \{\par
10137   painter->setPen(mPenDefined ? mPen : defaultPen);\par
10138   painter->setBrush(mBrush);\par
10139 \}\par
}
}
{\xe \v brush\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:brush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QBrush QCPScatterStyle::brush () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADJW}
{\bkmkend AAAAAAADJW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2351 \{ return mBrush; \}\par
}
}
{\xe \v customPath\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:customPath}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPainterPath QCPScatterStyle::customPath () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADJX}
{\bkmkend AAAAAAADJX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2353 \{ return mCustomPath; \}\par
}
}
{\xe \v drawShape\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:drawShape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::drawShape ({\b QCPPainter} *  {\i painter}, const QPointF &  {\i pos}) const}}
\par
{\bkmkstart AAAAAAADJY}
{\bkmkend AAAAAAADJY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Draws the scatter shape with {\i painter}  at position {\i pos} .\par
This function does not modify the pen or the brush on the painter, as {\b applyTo} is meant to be called before scatter points are drawn with {\b drawShape}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b applyTo} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10150 \{\par
10151   drawShape(painter, pos.x(), pos.y());\par
10152 \}\par
}
}
{\xe \v drawShape\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:drawShape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::drawShape ({\b QCPPainter} *  {\i painter}, double  {\i x}, double  {\i y}) const}}
\par
{\bkmkstart AAAAAAADJZ}
{\bkmkend AAAAAAADJZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados. Draws the scatter shape with {\i painter}  at position {\i x}  and {\i y} . \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10158 \{\par
10159   double w = mSize/2.0;\par
10160   switch (mShape)\par
10161   \{\par
10162     case ssNone: break;\par
10163     case ssDot:\par
10164     \{\par
10165       painter->drawLine(QPointF(x, y), QPointF(x+0.0001, y));\par
10166       break;\par
10167     \}\par
10168     case ssCross:\par
10169     \{\par
10170       painter->drawLine(QLineF(x-w, y-w, x+w, y+w));\par
10171       painter->drawLine(QLineF(x-w, y+w, x+w, y-w));\par
10172       break;\par
10173     \}\par
10174     case ssPlus:\par
10175     \{\par
10176       painter->drawLine(QLineF(x-w,   y, x+w,   y));\par
10177       painter->drawLine(QLineF(  x, y+w,   x, y-w));\par
10178       break;\par
10179     \}\par
10180     case ssCircle:\par
10181     \{\par
10182       painter->drawEllipse(QPointF(x , y), w, w);\par
10183       break;\par
10184     \}\par
10185     case ssDisc:\par
10186     \{\par
10187       QBrush b = painter->brush();\par
10188       painter->setBrush(painter->pen().color());\par
10189       painter->drawEllipse(QPointF(x , y), w, w);\par
10190       painter->setBrush(b);\par
10191       break;\par
10192     \}\par
10193     case ssSquare:\par
10194     \{\par
10195       painter->drawRect(QRectF(x-w, y-w, mSize, mSize));\par
10196       break;\par
10197     \}\par
10198     case ssDiamond:\par
10199     \{\par
10200       QPointF lineArray[4] = \{QPointF(x-w,   y),\par
10201                               QPointF(  x, y-w),\par
10202                               QPointF(x+w,   y),\par
10203                               QPointF(  x, y+w)\};\par
10204       painter->drawPolygon(lineArray, 4);\par
10205       break;\par
10206     \}\par
10207     case ssStar:\par
10208     \{\par
10209       painter->drawLine(QLineF(x-w,   y, x+w,   y));\par
10210       painter->drawLine(QLineF(  x, y+w,   x, y-w));\par
10211       painter->drawLine(QLineF(x-w*0.707, y-w*0.707, x+w*0.707, y+w*0.707));\par
10212       painter->drawLine(QLineF(x-w*0.707, y+w*0.707, x+w*0.707, y-w*0.707));\par
10213       break;\par
10214     \}\par
10215     case ssTriangle:\par
10216     \{\par
10217       QPointF lineArray[3] = \{QPointF(x-w, y+0.755*w),\par
10218                               QPointF(x+w, y+0.755*w),\par
10219                               QPointF(  x, y-0.977*w)\};\par
10220       painter->drawPolygon(lineArray, 3);\par
10221       break;\par
10222     \}\par
10223     case ssTriangleInverted:\par
10224     \{\par
10225       QPointF lineArray[3] = \{QPointF(x-w, y-0.755*w),\par
10226                               QPointF(x+w, y-0.755*w),\par
10227                               QPointF(  x, y+0.977*w)\};\par
10228       painter->drawPolygon(lineArray, 3);\par
10229       break;\par
10230     \}\par
10231     case ssCrossSquare:\par
10232     \{\par
10233       painter->drawRect(QRectF(x-w, y-w, mSize, mSize));\par
10234       painter->drawLine(QLineF(x-w, y-w, x+w*0.95, y+w*0.95));\par
10235       painter->drawLine(QLineF(x-w, y+w*0.95, x+w*0.95, y-w));\par
10236       break;\par
10237     \}\par
10238     case ssPlusSquare:\par
10239     \{\par
10240       painter->drawRect(QRectF(x-w, y-w, mSize, mSize));\par
10241       painter->drawLine(QLineF(x-w,   y, x+w*0.95,   y));\par
10242       painter->drawLine(QLineF(  x, y+w,        x, y-w));\par
10243       break;\par
10244     \}\par
10245     case ssCrossCircle:\par
10246     \{\par
10247       painter->drawEllipse(QPointF(x, y), w, w);\par
10248       painter->drawLine(QLineF(x-w*0.707, y-w*0.707, x+w*0.670, y+w*0.670));\par
10249       painter->drawLine(QLineF(x-w*0.707, y+w*0.670, x+w*0.670, y-w*0.707));\par
10250       break;\par
10251     \}\par
10252     case ssPlusCircle:\par
10253     \{\par
10254       painter->drawEllipse(QPointF(x, y), w, w);\par
10255       painter->drawLine(QLineF(x-w,   y, x+w,   y));\par
10256       painter->drawLine(QLineF(  x, y+w,   x, y-w));\par
10257       break;\par
10258     \}\par
10259     case ssPeace:\par
10260     \{\par
10261       painter->drawEllipse(QPointF(x, y), w, w);\par
10262       painter->drawLine(QLineF(x, y-w,         x,       y+w));\par
10263       painter->drawLine(QLineF(x,   y, x-w*0.707, y+w*0.707));\par
10264       painter->drawLine(QLineF(x,   y, x+w*0.707, y+w*0.707));\par
10265       break;\par
10266     \}\par
10267     case ssPixmap:\par
10268     \{\par
10269       const double widthHalf = mPixmap.width()*0.5;\par
10270       const double heightHalf = mPixmap.height()*0.5;\par
10271 #if QT_VERSION < QT_VERSION_CHECK(4, 8, 0)\par
10272       const QRectF clipRect = painter->clipRegion().boundingRect().adjusted(-widthHalf, -heightHalf, widthHalf, heightHalf);\par
10273 #else\par
10274       const QRectF clipRect = painter->clipBoundingRect().adjusted(-widthHalf, -heightHalf, widthHalf, heightHalf);\par
10275 #endif\par
10276       if (clipRect.contains(x, y))\par
10277         painter->drawPixmap(x-widthHalf, y-heightHalf, mPixmap);\par
10278       break;\par
10279     \}\par
10280     case ssCustom:\par
10281     \{\par
10282       QTransform oldTransform = painter->transform();\par
10283       painter->translate(x, y);\par
10284       painter->scale(mSize/6.0, mSize/6.0);\par
10285       painter->drawPath(mCustomPath);\par
10286       painter->setTransform(oldTransform);\par
10287       break;\par
10288     \}\par
10289   \}\par
10290 \}\par
}
}
{\xe \v isNone\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:isNone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPScatterStyle::isNone () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADKA}
{\bkmkend AAAAAAADKA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns whether the scatter shape is {\b ssNone}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setShape} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2365 \{ return mShape == ssNone; \}\par
}
}
{\xe \v isPenDefined\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:isPenDefined}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPScatterStyle::isPenDefined () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADKB}
{\bkmkend AAAAAAADKB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns whether a pen has been defined for this scatter style.\par
The pen is undefined if a constructor is called that does not carry {\i pen}  as parameter. Those are {\b QCPScatterStyle()} and {\b QCPScatterStyle(ScatterShape shape, double size)}. If the pen is undefined, the pen of the respective plottable will be used for drawing scatters.\par
If a pen was defined for this scatter style instance, and you now wish to undefine the pen, call {\b undefinePen}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setPen} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2366 \{ return mPenDefined; \}\par
}
}
{\xe \v pen\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:pen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPScatterStyle::pen () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADKC}
{\bkmkend AAAAAAADKC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2350 \{ return mPen; \}\par
}
}
{\xe \v pixmap\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:pixmap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPixmap QCPScatterStyle::pixmap () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADKD}
{\bkmkend AAAAAAADKD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2352 \{ return mPixmap; \}\par
}
}
{\xe \v setBrush\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:setBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::setBrush (const QBrush &  {\i brush})}}
\par
{\bkmkstart AAAAAAADKE}
{\bkmkend AAAAAAADKE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the brush that will be used to fill scatter points to {\i brush} . Note that not all scatter shapes have fillable areas. For example, {\b ssPlus} does not while {\b ssCircle} does.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setPen} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10087 \{\par
10088   mBrush = brush;\par
10089 \}\par
}
}
{\xe \v setCustomPath\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:setCustomPath}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::setCustomPath (const QPainterPath &  {\i customPath})}}
\par
{\bkmkstart AAAAAAADKF}
{\bkmkend AAAAAAADKF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the custom shape that will be drawn as scatter point to {\i customPath} .\par
The scatter shape is automatically set to {\b ssCustom}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10110 \{\par
10111   setShape(ssCustom);\par
10112   mCustomPath = customPath;\par
10113 \}\par
}
}
{\xe \v setFromOther\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:setFromOther}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::setFromOther (const {\b QCPScatterStyle} &  {\i other}, ScatterProperties  {\i properties})}}
\par
{\bkmkstart AAAAAAADKG}
{\bkmkend AAAAAAADKG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Copies the specified {\i properties}  from the {\i other}  scatter style to this scatter style. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10021 \{\par
10022   if (properties.testFlag(spPen))\par
10023   \{\par
10024     setPen(other.pen());\par
10025     if (!other.isPenDefined())\par
10026       undefinePen();\par
10027   \}\par
10028   if (properties.testFlag(spBrush))\par
10029     setBrush(other.brush());\par
10030   if (properties.testFlag(spSize))\par
10031     setSize(other.size());\par
10032   if (properties.testFlag(spShape))\par
10033   \{\par
10034     setShape(other.shape());\par
10035     if (other.shape() == ssPixmap)\par
10036       setPixmap(other.pixmap());\par
10037     else if (other.shape() == ssCustom)\par
10038       setCustomPath(other.customPath());\par
10039   \}\par
10040 \}\par
}
}
{\xe \v setPen\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:setPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::setPen (const QPen &  {\i pen})}}
\par
{\bkmkstart AAAAAAADKH}
{\bkmkend AAAAAAADKH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the pen that will be used to draw scatter points to {\i pen} .\par
If the pen was previously undefined (see {\b isPenDefined}), the pen is considered defined after a call to this function, even if {\i pen}  is {\f2 Qt::NoPen} . If you have defined a pen previously by calling this function and now wish to undefine the pen, call {\b undefinePen}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setBrush} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10075 \{\par
10076   mPenDefined = true;\par
10077   mPen = pen;\par
10078 \}\par
}
}
{\xe \v setPixmap\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:setPixmap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::setPixmap (const QPixmap &  {\i pixmap})}}
\par
{\bkmkstart AAAAAAADKI}
{\bkmkend AAAAAAADKI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the pixmap that will be drawn as scatter point to {\i pixmap} .\par
Note that {\b setSize} does not influence the appearance of the pixmap.\par
The scatter shape is automatically set to {\b ssPixmap}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10099 \{\par
10100   setShape(ssPixmap);\par
10101   mPixmap = pixmap;\par
10102 \}\par
}
}
{\xe \v setShape\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:setShape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::setShape ({\b QCPScatterStyle::ScatterShape}  {\i shape})}}
\par
{\bkmkstart AAAAAAADKJ}
{\bkmkend AAAAAAADKJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the shape to {\i shape} .\par
Note that the calls {\b setPixmap} and {\b setCustomPath} automatically set the shape to {\b ssPixmap} and {\b ssCustom}, respectively.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setSize} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10061 \{\par
10062   mShape = shape;\par
10063 \}\par
}
}
{\xe \v setSize\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:setSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::setSize (double  {\i size})}}
\par
{\bkmkstart AAAAAAADKK}
{\bkmkend AAAAAAADKK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the size (pixel diameter) of the drawn scatter points to {\i size} .\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setShape} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10048 \{\par
10049   mSize = size;\par
10050 \}\par
}
}
{\xe \v shape\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:shape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ScatterShape} QCPScatterStyle::shape () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADKL}
{\bkmkend AAAAAAADKL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2349 \{ return mShape; \}\par
}
}
{\xe \v size\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPScatterStyle::size () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAADKM}
{\bkmkend AAAAAAADKM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2348 \{ return mSize; \}\par
}
}
{\xe \v undefinePen\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:undefinePen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPScatterStyle::undefinePen ()}}
\par
{\bkmkstart AAAAAAADKN}
{\bkmkend AAAAAAADKN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets this scatter style to have an undefined pen (see {\b isPenDefined} for what an undefined pen implies).\par
A call to {\b setPen} will define a pen. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10122 \{\par
10123   mPenDefined = false;\par
10124 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v mBrush\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:mBrush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QBrush QCPScatterStyle::mBrush{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADKO}
{\bkmkend AAAAAAADKO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mCustomPath\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:mCustomPath}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPainterPath QCPScatterStyle::mCustomPath{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADKP}
{\bkmkend AAAAAAADKP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mPen\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:mPen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPen QCPScatterStyle::mPen{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADKQ}
{\bkmkend AAAAAAADKQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mPenDefined\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:mPenDefined}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPScatterStyle::mPenDefined{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADKR}
{\bkmkend AAAAAAADKR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mPixmap\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:mPixmap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPixmap QCPScatterStyle::mPixmap{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADKS}
{\bkmkend AAAAAAADKS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mShape\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:mShape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ScatterShape} QCPScatterStyle::mShape{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADKT}
{\bkmkend AAAAAAADKT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mSize\:QCPScatterStyle}
{\xe \v QCPScatterStyle\:mSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPScatterStyle::mSize{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAADKU}
{\bkmkend AAAAAAADKU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documentação para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.cpp}\par
}}