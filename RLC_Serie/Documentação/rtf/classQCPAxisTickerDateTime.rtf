{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referência da Classe QCPAxisTickerDateTime\par \pard\plain 
{\tc\tcl2 \v QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime}
{\bkmkstart AAAAAAABHJ}
{\bkmkend AAAAAAABHJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specialized axis ticker for calendar dates and times as axis ticks. }}\par
{
{\f2 #include <qcustomplot.h>}}\par
Diagrama de hierarquia para QCPAxisTickerDateTime:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classQCPAxisTickerDateTime__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b TickStepStrategy} \{ {\b tssReadability}, 
{\b tssMeetTickCount}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxisTickerDateTime} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b dateTimeFormat} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Qt::TimeSpec {\b dateTimeSpec} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setDateTimeFormat} (const QString &format)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setDateTimeSpec} (Qt::TimeSpec spec)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTickOrigin} (double origin)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTickOrigin} (const QDateTime &origin)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TickStepStrategy} {\b tickStepStrategy} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tickCount} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b tickOrigin} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTickStepStrategy} ({\b TickStepStrategy} strategy)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTickCount} (int count)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b generate} (const {\b QCPRange} &range, const QLocale &locale, QChar formatChar, int precision, QVector< double > &ticks, QVector< double > *subTicks, QVector< QString > *tickLabels)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Públicos Estáticos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static QDateTime {\b keyToDateTime} (double key)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b dateTimeToKey} (const QDateTime dateTime)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b dateTimeToKey} (const QDate date)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b DateStrategy} \{ {\b dsNone}, 
{\b dsUniformTimeInDay}, 
{\b dsUniformDayInMonth}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual double {\b getTickStep} (const {\b QCPRange} &range) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b getSubTickCount} (double tickStep) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QString {\b getTickLabel} (double tick, const QLocale &locale, QChar formatChar, int precision) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QVector< double > {\b createTickVector} (double tickStep, const {\b QCPRange} &range) {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QVector< double > {\b createSubTickVector} (int subTickCount, const QVector< double > &ticks)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QVector< QString > {\b createLabelVector} (const QVector< double > &ticks, const QLocale &locale, QChar formatChar, int precision)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b trimTicks} (const {\b QCPRange} &range, QVector< double > &ticks, bool keepOneOutlier) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b pickClosest} (double target, const QVector< double > &candidates) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getMantissa} (double input, double *magnitude=0) const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b cleanMantissa} (double input) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b mDateTimeFormat}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Qt::TimeSpec {\b mDateTimeSpec}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b QCPAxisTickerDateTime::DateStrategy} {\b mDateStrategy}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TickStepStrategy} {\b mTickStepStrategy}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mTickCount}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mTickOrigin}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descrição detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Specialized axis ticker for calendar dates and times as axis ticks. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
This {\b QCPAxisTicker} subclass generates ticks that correspond to real calendar dates and times. The plot axis coordinate is interpreted as Unix Time, so seconds since Epoch (January 1, 1970, 00:00 UTC). This is also used for example by QDateTime in the {\f2 toTime_t()/setTime_t()}  methods with a precision of one second. Since Qt 4.7, millisecond accuracy can be obtained from QDateTime by using {\f2 QDateTime::fromMSecsSinceEpoch()/1000.0} . The static methods {\b dateTimeToKey} and {\b keyToDateTime} conveniently perform this conversion achieving a precision of one millisecond on all Qt versions.\par
The format of the date/time display in the tick labels is controlled with {\b setDateTimeFormat}. If a different time spec (time zone) shall be used, see {\b setDateTimeSpec}.\par
This ticker produces unequal tick spacing in order to provide intuitive date and time-of-day ticks. For example, if the axis range spans a few years such that there is one tick per year, ticks will be positioned on 1. January of every year. This is intuitive but, due to leap years, will result in slightly unequal tick intervals (visually unnoticeable). The same can be seen in the image above: even though the number of days varies month by month, this ticker generates ticks on the same day of each month.\par
If you would like to change the date/time that is used as a (mathematical) starting date for the ticks, use the {\b setTickOrigin(const QDateTime &origin)} method overload, which takes a QDateTime. If you pass 15. July, 9:45 to this method, the yearly ticks will end up on 15. July at 9:45 of every year.\par
The ticker can be created and assigned to an axis like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid } \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observação:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid If you rather wish to display relative times in terms of days, hours, minutes, seconds and milliseconds, and are not interested in the intricacies of real calendar dates with months and (leap) years, have a look at {\b QCPAxisTickerTime} instead. \par
}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerações\par
\pard\plain 
{\xe \v DateStrategy\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:DateStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPAxisTickerDateTime::DateStrategy}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABHK}
{\bkmkend AAAAAAABHK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v dsNone\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:dsNone}
{\qr dsNone{\bkmkstart AAAAAAABHL}
{\bkmkend AAAAAAABHL}
\cell }{\cell }{\row }
{\xe \v dsUniformTimeInDay\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:dsUniformTimeInDay}
{\qr dsUniformTimeInDay{\bkmkstart AAAAAAABHM}
{\bkmkend AAAAAAABHM}
\cell }{\cell }{\row }
{\xe \v dsUniformDayInMonth\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:dsUniformDayInMonth}
{\qr dsUniformDayInMonth{\bkmkstart AAAAAAABHN}
{\bkmkend AAAAAAABHN}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1620 \{dsNone, dsUniformTimeInDay, dsUniformDayInMonth\} mDateStrategy;\par
}
}
{\xe \v TickStepStrategy\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:TickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPAxisTicker::TickStepStrategy}{\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFS}
{\bkmkend AAAAAAABFS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the strategies that the axis ticker may follow when choosing the size of the tick step.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setTickStepStrategy} \par
}}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v tssReadability\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:tssReadability}
{\qr tssReadability{\bkmkstart AAAAAAABFT}
{\bkmkend AAAAAAABFT}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A nicely readable tick step is prioritized over matching the requested number of ticks (see {\b setTickCount}) \par
}\cell }{\row }
{\xe \v tssMeetTickCount\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:tssMeetTickCount}
{\qr tssMeetTickCount{\bkmkstart AAAAAAABFU}
{\bkmkend AAAAAAABFU}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Less readable tick steps are allowed which in turn facilitates getting closer to the requested tick count. \par
}\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1543   \{\par
 1544     tssReadability    \par
 1545     ,tssMeetTickCount \par
 1546   \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v QCPAxisTickerDateTime\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:QCPAxisTickerDateTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPAxisTickerDateTime::QCPAxisTickerDateTime ()}}
\par
{\bkmkstart AAAAAAABHO}
{\bkmkend AAAAAAABHO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructs the ticker and sets reasonable default values. Axis tickers are commonly created managed by a QSharedPointer, which then can be passed to {\b QCPAxis::setTicker}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5892                                              :\par
 5893   mDateTimeFormat(QLatin1String("hh:mm:ss\\ndd.MM.yy")),\par
 5894   mDateTimeSpec(Qt::LocalTime),\par
 5895   mDateStrategy(dsNone)\par
 5896 \{\par
 5897   setTickCount(4);\par
 5898 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções membros\par
\pard\plain 
{\xe \v cleanMantissa\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:cleanMantissa}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::cleanMantissa (double  {\i input}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFX}
{\bkmkend AAAAAAABFX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5823 \{\par
 5824   double magnitude;\par
 5825   const double mantissa = getMantissa(input, &magnitude);\par
 5826   switch (mTickStepStrategy)\par
 5827   \{\par
 5828     case tssReadability:\par
 5829     \{\par
 5830       return pickClosest(mantissa, QVector<double>() << 1.0 << 2.0 << 2.5 << 5.0 << 10.0)*magnitude;\par
 5831     \}\par
 5832     case tssMeetTickCount:\par
 5833     \{\par
 5834       // this gives effectively a mantissa of 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 8.0, 10.0\par
 5835       if (mantissa <= 5.0)\par
 5836         return (int)(mantissa*2)/2.0*magnitude; // round digit after decimal point to 0.5\par
 5837       else\par
 5838         return (int)(mantissa/2.0)*2.0*magnitude; // round to first digit in multiples of 2\par
 5839     \}\par
 5840   \}\par
 5841   return input;\par
 5842 \}\par
}
}
{\xe \v createLabelVector\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:createLabelVector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector< QString > QCPAxisTicker::createLabelVector (const QVector< double > &  {\i ticks}, const QLocale &  {\i locale}, QChar  {\i formatChar}, int  {\i precision}){\f2 [protected]}, {\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFY}
{\bkmkend AAAAAAABFY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5732 \{\par
 5733   QVector<QString> result;\par
 5734   result.reserve(ticks.size());\par
 5735   for (int i=0; i<ticks.size(); ++i)\par
 5736     result.append(getTickLabel(ticks.at(i), locale, formatChar, precision));\par
 5737   return result;\par
 5738 \}\par
}
}
{\xe \v createSubTickVector\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:createSubTickVector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector< double > QCPAxisTicker::createSubTickVector (int  {\i subTickCount}, const QVector< double > &  {\i ticks}){\f2 [protected]}, {\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABFZ}
{\bkmkend AAAAAAABFZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5678 \{\par
 5679   QVector<double> result;\par
 5680   if (subTickCount <= 0 || ticks.size() < 2)\par
 5681     return result;\par
 5682   \par
 5683   result.reserve((ticks.size()-1)*subTickCount);\par
 5684   for (int i=1; i<ticks.size(); ++i)\par
 5685   \{\par
 5686     double subTickStep = (ticks.at(i)-ticks.at(i-1))/(double)(subTickCount+1);\par
 5687     for (int k=1; k<=subTickCount; ++k)\par
 5688       result.append(ticks.at(i-1) + k*subTickStep);\par
 5689   \}\par
 5690   return result;\par
 5691 \}\par
}
}
{\xe \v createTickVector\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:createTickVector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QVector< double > QCPAxisTickerDateTime::createTickVector (double  {\i tickStep}, const {\b QCPRange} &  {\i range}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGD}
{\bkmkend AAAAAAABGD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b QCPAxisTicker} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6051 \{\par
 6052   QVector<double> result = QCPAxisTicker::createTickVector(tickStep, range);\par
 6053   if (!result.isEmpty())\par
 6054   \{\par
 6055     if (mDateStrategy == dsUniformTimeInDay)\par
 6056     \{\par
 6057       QDateTime uniformDateTime = keyToDateTime(mTickOrigin); // the time of this datetime will be set for all other ticks, if possible\par
 6058       QDateTime tickDateTime;\par
 6059       for (int i=0; i<result.size(); ++i)\par
 6060       \{\par
 6061         tickDateTime = keyToDateTime(result.at(i));\par
 6062         tickDateTime.setTime(uniformDateTime.time());\par
 6063         result[i] = dateTimeToKey(tickDateTime);\par
 6064       \}\par
 6065     \} else if (mDateStrategy == dsUniformDayInMonth)\par
 6066     \{\par
 6067       QDateTime uniformDateTime = keyToDateTime(mTickOrigin); // this day (in month) and time will be set for all other ticks, if possible\par
 6068       QDateTime tickDateTime;\par
 6069       for (int i=0; i<result.size(); ++i)\par
 6070       \{\par
 6071         tickDateTime = keyToDateTime(result.at(i));\par
 6072         tickDateTime.setTime(uniformDateTime.time());\par
 6073         int thisUniformDay = uniformDateTime.date().day() <= tickDateTime.date().daysInMonth() ? uniformDateTime.date().day() : tickDateTime.date().daysInMonth(); // don't exceed month (e.g. try to set day 31 in February)\par
 6074         if (thisUniformDay-tickDateTime.date().day() < -15) // with leap years involved, date month may jump backwards or forwards, and needs to be corrected before setting day\par
 6075           tickDateTime = tickDateTime.addMonths(1);\par
 6076         else if (thisUniformDay-tickDateTime.date().day() > 15) // with leap years involved, date month may jump backwards or forwards, and needs to be corrected before setting day\par
 6077           tickDateTime = tickDateTime.addMonths(-1);\par
 6078         tickDateTime.setDate(QDate(tickDateTime.date().year(), tickDateTime.date().month(), thisUniformDay));\par
 6079         result[i] = dateTimeToKey(tickDateTime);\par
 6080       \}\par
 6081     \}\par
 6082   \}\par
 6083   return result;\par
 6084 \}\par
}
}
{\xe \v dateTimeFormat\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:dateTimeFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPAxisTickerDateTime::dateTimeFormat () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHP}
{\bkmkend AAAAAAABHP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1600 \{ return mDateTimeFormat; \}\par
}
}
{\xe \v dateTimeSpec\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:dateTimeSpec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Qt::TimeSpec QCPAxisTickerDateTime::dateTimeSpec () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHQ}
{\bkmkend AAAAAAABHQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1601 \{ return mDateTimeSpec; \}\par
}
}
{\xe \v dateTimeToKey\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:dateTimeToKey}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTickerDateTime::dateTimeToKey (const QDateTime  {\i dateTime}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABHR}
{\bkmkend AAAAAAABHR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.\par
A convenience method which turns a QDateTime object into a double value that corresponds to seconds since Epoch (1. Jan 1970, 00:00 UTC). This is the format used as axis coordinates by {\b QCPAxisTickerDateTime}.\par
The accuracy achieved by this method is one millisecond, irrespective of the used Qt version (it works around the lack of a QDateTime::toMSecsSinceEpoch in Qt 4.6)\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b keyToDateTime} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6116 \{\par
 6117 # if QT_VERSION < QT_VERSION_CHECK(4, 7, 0)\par
 6118   return dateTime.toTime_t()+dateTime.time().msec()/1000.0;\par
 6119 # else\par
 6120   return dateTime.toMSecsSinceEpoch()/1000.0;\par
 6121 # endif\par
 6122 \}\par
}
}
{\xe \v dateTimeToKey\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:dateTimeToKey}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTickerDateTime::dateTimeToKey (const QDate  {\i date}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABHS}
{\bkmkend AAAAAAABHS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.\par
A convenience method which turns a QDate object into a double value that corresponds to seconds since Epoch (1. Jan 1970, 00:00 UTC). This is the format used as axis coordinates by {\b QCPAxisTickerDateTime}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b keyToDateTime} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6133 \{\par
 6134 # if QT_VERSION < QT_VERSION_CHECK(4, 7, 0)\par
 6135   return QDateTime(date).toTime_t();\par
 6136 # else\par
 6137   return QDateTime(date).toMSecsSinceEpoch()/1000.0;\par
 6138 # endif\par
 6139 \}\par
}
}
{\xe \v generate\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:generate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::generate (const {\b QCPRange} &  {\i range}, const QLocale &  {\i locale}, QChar  {\i formatChar}, int  {\i precision}, QVector< double > &  {\i ticks}, QVector< double > *  {\i subTicks}, QVector< QString > *  {\i tickLabels}){\f2 [virtual]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGE}
{\bkmkend AAAAAAABGE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This is the method called by {\b QCPAxis} in order to actually generate tick coordinates ({\i ticks} ), tick label strings ({\i tickLabels} ) and sub tick coordinates ({\i subTicks} ).\par
The ticks are generated for the specified {\i range} . The generated labels typically follow the specified {\i locale} , {\i formatChar}  and number {\i precision} , however this might be different (or even irrelevant) for certain {\b QCPAxisTicker} subclasses.\par
The output parameter {\i ticks}  is filled with the generated tick positions in axis coordinates. The output parameters {\i subTicks}  and {\i tickLabels}  are optional (set them to 0 if not needed) and are respectively filled with sub tick coordinates, and tick label strings belonging to {\i ticks}  by index. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5553 \{\par
 5554   // generate (major) ticks:\par
 5555   double tickStep = getTickStep(range);\par
 5556   ticks = createTickVector(tickStep, range);\par
 5557   trimTicks(range, ticks, true); // trim ticks to visible range plus one outer tick on each side (incase a subclass createTickVector creates more)\par
 5558   \par
 5559   // generate sub ticks between major ticks:\par
 5560   if (subTicks)\par
 5561   \{\par
 5562     if (ticks.size() > 0)\par
 5563     \{\par
 5564       *subTicks = createSubTickVector(getSubTickCount(tickStep), ticks);\par
 5565       trimTicks(range, *subTicks, false);\par
 5566     \} else\par
 5567       *subTicks = QVector<double>();\par
 5568   \}\par
 5569   \par
 5570   // finally trim also outliers (no further clipping happens in axis drawing):\par
 5571   trimTicks(range, ticks, false);\par
 5572   // generate labels for visible ticks if requested:\par
 5573   if (tickLabels)\par
 5574     *tickLabels = createLabelVector(ticks, locale, formatChar, precision);\par
 5575 \}\par
}
}
{\xe \v getMantissa\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:getMantissa}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::getMantissa (double  {\i input}, double *  {\i magnitude} = {\f2 0}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGF}
{\bkmkend AAAAAAABGF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5810 \{\par
 5811   const double mag = qPow(10.0, qFloor(qLn(input)/qLn(10.0)));\par
 5812   if (magnitude) *magnitude = mag;\par
 5813   return input/mag;\par
 5814 \}\par
}
}
{\xe \v getSubTickCount\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:getSubTickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisTickerDateTime::getSubTickCount (double  {\i tickStep}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGL}
{\bkmkend AAAAAAABGL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b QCPAxisTicker} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGG \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6002 \{\par
 6003   int result = QCPAxisTicker::getSubTickCount(tickStep);\par
 6004   switch (qRound(tickStep)) // hand chosen subticks for specific minute/hour/day/week/month range (as specified in getTickStep)\par
 6005   \{\par
 6006     case 5*60: result = 4; break;\par
 6007     case 10*60: result = 1; break;\par
 6008     case 15*60: result = 2; break;\par
 6009     case 30*60: result = 1; break;\par
 6010     case 60*60: result = 3; break;\par
 6011     case 3600*2: result = 3; break;\par
 6012     case 3600*3: result = 2; break;\par
 6013     case 3600*6: result = 1; break;\par
 6014     case 3600*12: result = 3; break;\par
 6015     case 3600*24: result = 3; break;\par
 6016     case 86400*2: result = 1; break;\par
 6017     case 86400*5: result = 4; break;\par
 6018     case 86400*7: result = 6; break;\par
 6019     case 86400*14: result = 1; break;\par
 6020     case (int)(86400*30.4375+0.5): result = 3; break;\par
 6021     case (int)(86400*30.4375*2+0.5): result = 1; break;\par
 6022     case (int)(86400*30.4375*3+0.5): result = 2; break;\par
 6023     case (int)(86400*30.4375*6+0.5): result = 5; break;\par
 6024     case (int)(86400*30.4375*12+0.5): result = 3; break;\par
 6025   \}\par
 6026   return result;\par
 6027 \}\par
}
}
{\xe \v getTickLabel\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:getTickLabel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPAxisTickerDateTime::getTickLabel (double  {\i tick}, const QLocale &  {\i locale}, QChar  {\i formatChar}, int  {\i precision}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGQ}
{\bkmkend AAAAAAABGQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b QCPAxisTicker} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6037 \{\par
 6038   Q_UNUSED(precision)\par
 6039   Q_UNUSED(formatChar)\par
 6040   return locale.toString(keyToDateTime(tick).toTimeSpec(mDateTimeSpec), mDateTimeFormat);\par
 6041 \}\par
}
}
{\xe \v getTickStep\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:getTickStep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTickerDateTime::getTickStep (const {\b QCPRange} &  {\i range}){\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGX}
{\bkmkend AAAAAAABGX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementa {\b QCPAxisTicker} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5968 \{\par
 5969   double result = range.size()/(double)(mTickCount+1e-10); // mTickCount ticks on average, the small addition is to prevent jitter on exact integers\par
 5970   \par
 5971   mDateStrategy = dsNone;\par
 5972   if (result < 1) // ideal tick step is below 1 second -> use normal clean mantissa algorithm in units of seconds\par
 5973   \{\par
 5974     result = cleanMantissa(result);\par
 5975   \} else if (result < 86400*30.4375*12) // below a year\par
 5976   \{\par
 5977     result = pickClosest(result, QVector<double>()\par
 5978                              << 1 << 2.5 << 5 << 10 << 15 << 30 << 60 << 2.5*60 << 5*60 << 10*60 << 15*60 << 30*60 << 60*60 // second, minute, hour range\par
 5979                              << 3600*2 << 3600*3 << 3600*6 << 3600*12 << 3600*24 // hour to day range\par
 5980                              << 86400*2 << 86400*5 << 86400*7 << 86400*14 << 86400*30.4375 << 86400*30.4375*2 << 86400*30.4375*3 << 86400*30.4375*6 << 86400*30.4375*12); // day, week, month range (avg. days per month includes leap years)\par
 5981     if (result > 86400*30.4375-1) // month tick intervals or larger\par
 5982       mDateStrategy = dsUniformDayInMonth;\par
 5983     else if (result > 3600*24-1) // day tick intervals or larger\par
 5984       mDateStrategy = dsUniformTimeInDay;\par
 5985   \} else // more than a year, go back to normal clean mantissa algorithm but in units of years\par
 5986   \{\par
 5987     const double secondsPerYear = 86400*30.4375*12; // average including leap years\par
 5988     result = cleanMantissa(result/secondsPerYear)*secondsPerYear;\par
 5989     mDateStrategy = dsUniformDayInMonth;\par
 5990   \}\par
 5991   return result;\par
 5992 \}\par
}
}
{\xe \v keyToDateTime\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:keyToDateTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QDateTime QCPAxisTickerDateTime::keyToDateTime (double  {\i key}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABHT}
{\bkmkend AAAAAAABHT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A convenience method which turns {\i key}  (in seconds since Epoch 1. Jan 1970, 00:00 UTC) into a QDateTime object. This can be used to turn axis coordinates to actual QDateTimes.\par
The accuracy achieved by this method is one millisecond, irrespective of the used Qt version (it works around the lack of a QDateTime::fromMSecsSinceEpoch in Qt 4.6)\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b dateTimeToKey} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  6096 \{\par
 6097 # if QT_VERSION < QT_VERSION_CHECK(4, 7, 0)\par
 6098   return QDateTime::fromTime_t(key).addMSecs((key-(qint64)key)*1000);\par
 6099 # else\par
 6100   return QDateTime::fromMSecsSinceEpoch(key*1000.0);\par
 6101 # endif\par
 6102 \}\par
}
}
{\xe \v pickClosest\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:pickClosest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::pickClosest (double  {\i target}, const QVector< double > &  {\i candidates}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGY}
{\bkmkend AAAAAAABGY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5790 \{\par
 5791   if (candidates.size() == 1)\par
 5792     return candidates.first();\par
 5793   QVector<double>::const_iterator it = std::lower_bound(candidates.constBegin(), candidates.constEnd(), target);\par
 5794   if (it == candidates.constEnd())\par
 5795     return *(it-1);\par
 5796   else if (it == candidates.constBegin())\par
 5797     return *it;\par
 5798   else\par
 5799     return target-*(it-1) < *it-target ? *(it-1) : *it;\par
 5800 \}\par
}
}
{\xe \v setDateTimeFormat\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:setDateTimeFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTickerDateTime::setDateTimeFormat (const QString &  {\i format})}}
\par
{\bkmkstart AAAAAAABHU}
{\bkmkend AAAAAAABHU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the format in which dates and times are displayed as tick labels. For details about the {\i format}  string, see the documentation of QDateTime::toString().\par
Newlines can be inserted with "\\n".\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setDateTimeSpec} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5909 \{\par
 5910   mDateTimeFormat = format;\par
 5911 \}\par
}
}
{\xe \v setDateTimeSpec\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:setDateTimeSpec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTickerDateTime::setDateTimeSpec (Qt::TimeSpec  {\i spec})}}
\par
{\bkmkstart AAAAAAABHV}
{\bkmkend AAAAAAABHV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the time spec that is used for creating the tick labels from corresponding dates/times.\par
The default value of QDateTime objects (and also {\b QCPAxisTickerDateTime}) is {\f2 Qt::LocalTime} . However, if the date time values passed to {\b QCustomPlot} (e.g. in the form of axis ranges or keys of a plottable) are given in the UTC spec, set {\i spec}  to {\f2 Qt::UTC}  to get the correct axis labels.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setDateTimeFormat} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5924 \{\par
 5925   mDateTimeSpec = spec;\par
 5926 \}\par
}
}
{\xe \v setTickCount\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:setTickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::setTickCount (int  {\i count}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABGZ}
{\bkmkend AAAAAAABGZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets how many ticks this ticker shall aim to generate across the axis range. Note that {\i count}  is not guaranteed to be matched exactly, as generating readable tick intervals may conflict with the requested number of ticks.\par
Whether the readability has priority over meeting the requested {\i count}  can be specified with {\b setTickStepStrategy}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5519 \{\par
 5520   if (count > 0)\par
 5521     mTickCount = count;\par
 5522   else\par
 5523     qDebug() << Q_FUNC_INFO << "tick count must be greater than zero:" << count;\par
 5524 \}\par
}
}
{\xe \v setTickOrigin\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:setTickOrigin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTickerDateTime::setTickOrigin (double  {\i origin})}}
\par
{\bkmkstart AAAAAAABHW}
{\bkmkend AAAAAAABHW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the tick origin (see {\b QCPAxisTicker::setTickOrigin}) in seconds since Epoch (1. Jan 1970, 00:00 UTC). For the date time ticker it might be more intuitive to use the overload which directly takes a QDateTime, see {\b setTickOrigin(const QDateTime &origin)}.\par
This is useful to define the month/day/time recurring at greater tick interval steps. For example, If you pass 15. July, 9:45 to this method and the tick interval happens to be one tick per year, the ticks will end up on 15. July at 9:45 of every year. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5938 \{\par
 5939   QCPAxisTicker::setTickOrigin(origin);\par
 5940 \}\par
}
}
{\xe \v setTickOrigin\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:setTickOrigin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTickerDateTime::setTickOrigin (const QDateTime &  {\i origin})}}
\par
{\bkmkstart AAAAAAABHX}
{\bkmkend AAAAAAABHX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the tick origin (see {\b QCPAxisTicker::setTickOrigin}) as a QDateTime {\i origin} .\par
This is useful to define the month/day/time recurring at greater tick interval steps. For example, If you pass 15. July, 9:45 to this method and the tick interval happens to be one tick per year, the ticks will end up on 15. July at 9:45 of every year. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5950 \{\par
 5951   setTickOrigin(dateTimeToKey(origin));\par
 5952 \}\par
}
}
{\xe \v setTickStepStrategy\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:setTickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::setTickStepStrategy ({\b QCPAxisTicker::TickStepStrategy}  {\i strategy}){\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHB}
{\bkmkend AAAAAAABHB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets which strategy the axis ticker follows when choosing the size of the tick step. For the available strategies, see {\b TickStepStrategy}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5506 \{\par
 5507   mTickStepStrategy = strategy;\par
 5508 \}\par
}
}
{\xe \v tickCount\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:tickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisTicker::tickCount () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHC}
{\bkmkend AAAAAAABHC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1554 \{ return mTickCount; \}\par
}
}
{\xe \v tickOrigin\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:tickOrigin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::tickOrigin () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHD}
{\bkmkend AAAAAAABHD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1555 \{ return mTickOrigin; \}\par
}
}
{\xe \v tickStepStrategy\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:tickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TickStepStrategy} QCPAxisTicker::tickStepStrategy () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHE}
{\bkmkend AAAAAAABHE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1553 \{ return mTickStepStrategy; \}\par
}
}
{\xe \v trimTicks\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:trimTicks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPAxisTicker::trimTicks (const {\b QCPRange} &  {\i range}, QVector< double > &  {\i ticks}, bool  {\i keepOneOutlier}) const{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHF}
{\bkmkend AAAAAAABHF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  5748 \{\par
 5749   bool lowFound = false;\par
 5750   bool highFound = false;\par
 5751   int lowIndex = 0;\par
 5752   int highIndex = -1;\par
 5753   \par
 5754   for (int i=0; i < ticks.size(); ++i)\par
 5755   \{\par
 5756     if (ticks.at(i) >= range.lower)\par
 5757     \{\par
 5758       lowFound = true;\par
 5759       lowIndex = i;\par
 5760       break;\par
 5761     \}\par
 5762   \}\par
 5763   for (int i=ticks.size()-1; i >= 0; --i)\par
 5764   \{\par
 5765     if (ticks.at(i) <= range.upper)\par
 5766     \{\par
 5767       highFound = true;\par
 5768       highIndex = i;\par
 5769       break;\par
 5770     \}\par
 5771   \}\par
 5772   \par
 5773   if (highFound && lowFound)\par
 5774   \{\par
 5775     int trimFront = qMax(0, lowIndex-(keepOneOutlier ? 1 : 0));\par
 5776     int trimBack = qMax(0, ticks.size()-(keepOneOutlier ? 2 : 1)-highIndex);\par
 5777     if (trimFront > 0 || trimBack > 0)\par
 5778       ticks = ticks.mid(trimFront, ticks.size()-trimFront-trimBack);\par
 5779   \} else // all ticks are either all below or all above the range\par
 5780     ticks.clear();\par
 5781 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v mDateStrategy\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:mDateStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPAxisTickerDateTime::DateStrategy}  QCPAxisTickerDateTime::mDateStrategy{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABHY}
{\bkmkend AAAAAAABHY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mDateTimeFormat\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:mDateTimeFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPAxisTickerDateTime::mDateTimeFormat{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABHZ}
{\bkmkend AAAAAAABHZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mDateTimeSpec\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:mDateTimeSpec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Qt::TimeSpec QCPAxisTickerDateTime::mDateTimeSpec{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABIA}
{\bkmkend AAAAAAABIA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTickCount\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:mTickCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPAxisTicker::mTickCount{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHG}
{\bkmkend AAAAAAABHG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTickOrigin\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:mTickOrigin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPAxisTicker::mTickOrigin{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHH}
{\bkmkend AAAAAAABHH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mTickStepStrategy\:QCPAxisTickerDateTime}
{\xe \v QCPAxisTickerDateTime\:mTickStepStrategy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TickStepStrategy} QCPAxisTicker::mTickStepStrategy{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAABHI}
{\bkmkend AAAAAAABHI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documentação para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.cpp}\par
}}