digraph "QCPLayerable"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{QCPLayerable\n|# mVisible\l# mParentPlot\l# mParentLayerable\l# mLayer\l# mAntialiased\l|+ QCPLayerable()\l+ ~QCPLayerable()\l+ visible()\l+ parentPlot()\l+ parentLayerable()\l+ layer()\l+ antialiased()\l+ setVisible()\l+ setLayer()\l+ setLayer()\l+ setAntialiased()\l+ selectTest()\l+ realVisibility()\l# parentPlotInitialized()\l# selectionCategory()\l# clipRect()\l# applyDefaultAntialiasingHint()\l# draw()\l# selectEvent()\l# deselectEvent()\l# mousePressEvent()\l# mouseMoveEvent()\l# mouseReleaseEvent()\l# mouseDoubleClickEvent()\l# wheelEvent()\l# initializeParentPlot()\l# setParentLayerable()\l# moveToLayer()\l# applyAntialiasingHint()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{QObject\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{QCPAbstractItem\n|# mClipToAxisRect\l# mClipAxisRect\l# mPositions\l# mAnchors\l# mSelectable\l# mSelected\l|+ QCPAbstractItem()\l+ ~QCPAbstractItem()\l+ clipToAxisRect()\l+ clipAxisRect()\l+ selectable()\l+ selected()\l+ setClipToAxisRect()\l+ setClipAxisRect()\l+ setSelectable()\l+ setSelected()\l+ selectTest()\l+ positions()\l+ anchors()\l+ position()\l+ anchor()\l+ hasAnchor()\l# selectionCategory()\l# clipRect()\l# applyDefaultAntialiasingHint()\l# draw()\l# selectEvent()\l# deselectEvent()\l# anchorPixelPosition()\l# rectDistance()\l# createPosition()\l# createAnchor()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractItem.html",tooltip="The abstract base class for all items in a plot. "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{QCPItemBracket\n|+ left\l+ right\l+ center\l# mPen\l# mSelectedPen\l# mLength\l# mStyle\l|+ QCPItemBracket()\l+ ~QCPItemBracket()\l+ pen()\l+ selectedPen()\l+ length()\l+ style()\l+ setPen()\l+ setSelectedPen()\l+ setLength()\l+ setStyle()\l+ selectTest()\l# draw()\l# anchorPixelPosition()\l# mainPen()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemBracket.html",tooltip="A bracket for referencing/highlighting certain parts in the plot. "];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{QCPItemCurve\n|+ start\l+ startDir\l+ endDir\l+ end\l# mPen\l# mSelectedPen\l# mHead\l# mTail\l|+ QCPItemCurve()\l+ ~QCPItemCurve()\l+ pen()\l+ selectedPen()\l+ head()\l+ tail()\l+ setPen()\l+ setSelectedPen()\l+ setHead()\l+ setTail()\l+ selectTest()\l# draw()\l# mainPen()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemCurve.html",tooltip="A curved line from one point to another. "];
  Node2 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{QCPItemEllipse\n|+ topLeft\l+ bottomRight\l+ topLeftRim\l+ top\l+ topRightRim\l+ right\l+ bottomRightRim\l+ bottom\l+ bottomLeftRim\l+ left\l+ center\l# mPen\l# mSelectedPen\l# mBrush\l# mSelectedBrush\l|+ QCPItemEllipse()\l+ ~QCPItemEllipse()\l+ pen()\l+ selectedPen()\l+ brush()\l+ selectedBrush()\l+ setPen()\l+ setSelectedPen()\l+ setBrush()\l+ setSelectedBrush()\l+ selectTest()\l# draw()\l# anchorPixelPosition()\l# mainPen()\l# mainBrush()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemEllipse.html",tooltip="An ellipse. "];
  Node2 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{QCPItemLine\n|+ start\l+ end\l# mPen\l# mSelectedPen\l# mHead\l# mTail\l|+ QCPItemLine()\l+ ~QCPItemLine()\l+ pen()\l+ selectedPen()\l+ head()\l+ tail()\l+ setPen()\l+ setSelectedPen()\l+ setHead()\l+ setTail()\l+ selectTest()\l# draw()\l# getRectClippedLine()\l# mainPen()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemLine.html",tooltip="A line from one point to another. "];
  Node2 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{QCPItemPixmap\n|+ topLeft\l+ bottomRight\l+ top\l+ topRight\l+ right\l+ bottom\l+ bottomLeft\l+ left\l# mPixmap\l# mScaledPixmap\l# mScaled\l# mScaledPixmapInvalidated\l# mAspectRatioMode\l# mTransformationMode\l# mPen\l# mSelectedPen\l|+ QCPItemPixmap()\l+ ~QCPItemPixmap()\l+ pixmap()\l+ scaled()\l+ aspectRatioMode()\l+ transformationMode()\l+ pen()\l+ selectedPen()\l+ setPixmap()\l+ setScaled()\l+ setPen()\l+ setSelectedPen()\l+ selectTest()\l# draw()\l# anchorPixelPosition()\l# updateScaledPixmap()\l# getFinalRect()\l# mainPen()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemPixmap.html",tooltip="An arbitrary pixmap. "];
  Node2 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{QCPItemRect\n|+ topLeft\l+ bottomRight\l+ top\l+ topRight\l+ right\l+ bottom\l+ bottomLeft\l+ left\l# mPen\l# mSelectedPen\l# mBrush\l# mSelectedBrush\l|+ QCPItemRect()\l+ ~QCPItemRect()\l+ pen()\l+ selectedPen()\l+ brush()\l+ selectedBrush()\l+ setPen()\l+ setSelectedPen()\l+ setBrush()\l+ setSelectedBrush()\l+ selectTest()\l# draw()\l# anchorPixelPosition()\l# mainPen()\l# mainBrush()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemRect.html",tooltip="A rectangle. "];
  Node2 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{QCPItemStraightLine\n|+ point1\l+ point2\l# mPen\l# mSelectedPen\l|+ QCPItemStraightLine()\l+ ~QCPItemStraightLine()\l+ pen()\l+ selectedPen()\l+ setPen()\l+ setSelectedPen()\l+ selectTest()\l# draw()\l# getRectClippedStraightLine()\l# mainPen()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemStraightLine.html",tooltip="A straight line that spans infinitely in both directions. "];
  Node2 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{QCPItemText\n|+ position\l+ topLeft\l+ top\l+ topRight\l+ right\l+ bottomRight\l+ bottom\l+ bottomLeft\l+ left\l# mColor\l# mSelectedColor\l# mPen\l# mSelectedPen\l# mBrush\l# mSelectedBrush\l# mFont\l# mSelectedFont\l# mText\l# mPositionAlignment\l# mTextAlignment\l# mRotation\l# mPadding\l|+ QCPItemText()\l+ ~QCPItemText()\l+ color()\l+ selectedColor()\l+ pen()\l+ selectedPen()\l+ brush()\l+ selectedBrush()\l+ font()\l+ selectedFont()\l+ text()\l+ positionAlignment()\l+ textAlignment()\l+ rotation()\l+ padding()\l+ setColor()\l+ setSelectedColor()\l+ setPen()\l+ setSelectedPen()\l+ setBrush()\l+ setSelectedBrush()\l+ setFont()\l+ setSelectedFont()\l+ setText()\l+ setPositionAlignment()\l+ setTextAlignment()\l+ setRotation()\l+ setPadding()\l+ selectTest()\l# draw()\l# anchorPixelPosition()\l# getTextDrawPoint()\l# mainFont()\l# mainColor()\l# mainPen()\l# mainBrush()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemText.html",tooltip="A text label. "];
  Node2 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{QCPItemTracer\n|+ position\l# mPen\l# mSelectedPen\l# mBrush\l# mSelectedBrush\l# mSize\l# mStyle\l# mGraph\l# mGraphKey\l# mInterpolating\l|+ QCPItemTracer()\l+ ~QCPItemTracer()\l+ pen()\l+ selectedPen()\l+ brush()\l+ selectedBrush()\l+ size()\l+ style()\l+ graph()\l+ graphKey()\l+ interpolating()\l+ setPen()\l+ setSelectedPen()\l+ setBrush()\l+ setSelectedBrush()\l+ setSize()\l+ setStyle()\l+ setGraph()\l+ setGraphKey()\l+ setInterpolating()\l+ selectTest()\l+ updatePosition()\l# draw()\l# mainPen()\l# mainBrush()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPItemTracer.html",tooltip="Item that sticks to QCPGraph data points. "];
  Node0 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{QCPAbstractPlottable\n|# mName\l# mAntialiasedFill\l# mAntialiasedScatters\l# mPen\l# mBrush\l# mKeyAxis\l# mValueAxis\l# mSelectable\l# mSelection\l# mSelectionDecorator\l|+ QCPAbstractPlottable()\l+ ~QCPAbstractPlottable()\l+ name()\l+ antialiasedFill()\l+ antialiasedScatters()\l+ pen()\l+ brush()\l+ keyAxis()\l+ valueAxis()\l+ selectable()\l+ selected()\l+ selection()\l+ selectionDecorator()\l+ setName()\l+ setAntialiasedFill()\l+ setAntialiasedScatters()\l+ setPen()\l+ setBrush()\l+ setKeyAxis()\l+ setValueAxis()\l+ setSelectable()\l+ setSelection()\l+ setSelectionDecorator()\l+ selectTest()\l+ interface1D()\l+ getKeyRange()\l+ getValueRange()\l+ coordsToPixels()\l+ coordsToPixels()\l+ pixelsToCoords()\l+ pixelsToCoords()\l+ rescaleAxes()\l+ rescaleKeyAxis()\l+ rescaleValueAxis()\l+ addToLegend()\l+ addToLegend()\l+ removeFromLegend()\l+ removeFromLegend()\l# clipRect()\l# draw()\l# selectionCategory()\l# applyDefaultAntialiasingHint()\l# selectEvent()\l# deselectEvent()\l# drawLegendIcon()\l# applyFillAntialiasingHint()\l# applyScattersAntialiasingHint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractPlottable.html",tooltip="The abstract base class for all data representing objects in a plot. "];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{QCPAbstractPlottable1D\l\< DataType \>\n|# mDataContainer\l|+ QCPAbstractPlottable1D()\l+ ~QCPAbstractPlottable1D()\l+ dataCount()\l+ dataMainKey()\l+ dataSortKey()\l+ dataMainValue()\l+ dataValueRange()\l+ dataPixelPosition()\l+ sortKeyIsMainKey()\l+ selectTestRect()\l+ findBegin()\l+ findEnd()\l+ selectTest()\l+ interface1D()\l# getDataSegments()\l# drawPolyline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractPlottable1D.html",tooltip="A template base class for plottables with one-dimensional data. "];
  Node13 -> Node14 [dir="back",color="orange",fontsize="10",style="solid",label=" \< QCPFinancialData \>" ,fontname="Helvetica"];
  Node14 [label="{QCPAbstractPlottable1D\l\< QCPFinancialData \>\n|# mDataContainer\l|+ QCPAbstractPlottable1D()\l+ ~QCPAbstractPlottable1D()\l+ dataCount()\l+ dataMainKey()\l+ dataSortKey()\l+ dataMainValue()\l+ dataValueRange()\l+ dataPixelPosition()\l+ sortKeyIsMainKey()\l+ selectTestRect()\l+ findBegin()\l+ findEnd()\l+ selectTest()\l+ interface1D()\l# getDataSegments()\l# drawPolyline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractPlottable1D.html"];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{QCPFinancial\n|# mChartStyle\l# mWidth\l# mWidthType\l# mTwoColored\l# mBrushPositive\l# mBrushNegative\l# mPenPositive\l# mPenNegative\l|+ QCPFinancial()\l+ ~QCPFinancial()\l+ data()\l+ chartStyle()\l+ width()\l+ widthType()\l+ twoColored()\l+ brushPositive()\l+ brushNegative()\l+ penPositive()\l+ penNegative()\l+ setData()\l+ setData()\l+ setChartStyle()\l+ setWidth()\l+ setWidthType()\l+ setTwoColored()\l+ setBrushPositive()\l+ setBrushNegative()\l+ setPenPositive()\l+ setPenNegative()\l+ addData()\l+ addData()\l+ selectTestRect()\l+ selectTest()\l+ getKeyRange()\l+ getValueRange()\l+ timeSeriesToOhlc()\l# draw()\l# drawLegendIcon()\l# drawOhlcPlot()\l# drawCandlestickPlot()\l# getPixelWidth()\l# ohlcSelectTest()\l# candlestickSelectTest()\l# getVisibleDataBounds()\l# selectionHitBox()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPFinancial.html",tooltip="A plottable representing a financial stock chart. "];
  Node13 -> Node16 [dir="back",color="orange",fontsize="10",style="solid",label=" \< QCPStatisticalBoxData \>" ,fontname="Helvetica"];
  Node16 [label="{QCPAbstractPlottable1D\l\< QCPStatisticalBoxData \>\n|# mDataContainer\l|+ QCPAbstractPlottable1D()\l+ ~QCPAbstractPlottable1D()\l+ dataCount()\l+ dataMainKey()\l+ dataSortKey()\l+ dataMainValue()\l+ dataValueRange()\l+ dataPixelPosition()\l+ sortKeyIsMainKey()\l+ selectTestRect()\l+ findBegin()\l+ findEnd()\l+ selectTest()\l+ interface1D()\l# getDataSegments()\l# drawPolyline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractPlottable1D.html"];
  Node16 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{QCPStatisticalBox\n|# mWidth\l# mWhiskerWidth\l# mWhiskerPen\l# mWhiskerBarPen\l# mWhiskerAntialiased\l# mMedianPen\l# mOutlierStyle\l|+ QCPStatisticalBox()\l+ data()\l+ width()\l+ whiskerWidth()\l+ whiskerPen()\l+ whiskerBarPen()\l+ whiskerAntialiased()\l+ medianPen()\l+ outlierStyle()\l+ setData()\l+ setData()\l+ setWidth()\l+ setWhiskerWidth()\l+ setWhiskerPen()\l+ setWhiskerBarPen()\l+ setWhiskerAntialiased()\l+ setMedianPen()\l+ setOutlierStyle()\l+ addData()\l+ addData()\l+ selectTestRect()\l+ selectTest()\l+ getKeyRange()\l+ getValueRange()\l# draw()\l# drawLegendIcon()\l# drawStatisticalBox()\l# getVisibleDataBounds()\l# getQuartileBox()\l# getWhiskerBackboneLines()\l# getWhiskerBarLines()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPStatisticalBox.html",tooltip="A plottable representing a single statistical box in a plot. "];
  Node13 -> Node18 [dir="back",color="orange",fontsize="10",style="solid",label=" \< QCPGraphData \>" ,fontname="Helvetica"];
  Node18 [label="{QCPAbstractPlottable1D\l\< QCPGraphData \>\n|# mDataContainer\l|+ QCPAbstractPlottable1D()\l+ ~QCPAbstractPlottable1D()\l+ dataCount()\l+ dataMainKey()\l+ dataSortKey()\l+ dataMainValue()\l+ dataValueRange()\l+ dataPixelPosition()\l+ sortKeyIsMainKey()\l+ selectTestRect()\l+ findBegin()\l+ findEnd()\l+ selectTest()\l+ interface1D()\l# getDataSegments()\l# drawPolyline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractPlottable1D.html"];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{QCPGraph\n|# mLineStyle\l# mScatterStyle\l# mScatterSkip\l# mChannelFillGraph\l# mAdaptiveSampling\l|+ QCPGraph()\l+ ~QCPGraph()\l+ data()\l+ lineStyle()\l+ scatterStyle()\l+ scatterSkip()\l+ channelFillGraph()\l+ adaptiveSampling()\l+ setData()\l+ setData()\l+ setLineStyle()\l+ setScatterStyle()\l+ setScatterSkip()\l+ setChannelFillGraph()\l+ setAdaptiveSampling()\l+ addData()\l+ addData()\l+ selectTest()\l+ getKeyRange()\l+ getValueRange()\l# draw()\l# drawLegendIcon()\l# drawFill()\l# drawScatterPlot()\l# drawLinePlot()\l# drawImpulsePlot()\l# getOptimizedLineData()\l# getOptimizedScatterData()\l# getVisibleDataBounds()\l# getLines()\l# getScatters()\l# dataToLines()\l# dataToStepLeftLines()\l# dataToStepRightLines()\l# dataToStepCenterLines()\l# dataToImpulseLines()\l# getNonNanSegments()\l# getOverlappingSegments()\l# segmentsIntersect()\l# getFillBasePoint()\l# getFillPolygon()\l# getChannelFillPolygon()\l# findIndexBelowX()\l# findIndexAboveX()\l# findIndexBelowY()\l# findIndexAboveY()\l# pointDistance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPGraph.html",tooltip="A plottable representing a graph in a plot. "];
  Node13 -> Node20 [dir="back",color="orange",fontsize="10",style="solid",label=" \< QCPBarsData \>" ,fontname="Helvetica"];
  Node20 [label="{QCPAbstractPlottable1D\l\< QCPBarsData \>\n|# mDataContainer\l|+ QCPAbstractPlottable1D()\l+ ~QCPAbstractPlottable1D()\l+ dataCount()\l+ dataMainKey()\l+ dataSortKey()\l+ dataMainValue()\l+ dataValueRange()\l+ dataPixelPosition()\l+ sortKeyIsMainKey()\l+ selectTestRect()\l+ findBegin()\l+ findEnd()\l+ selectTest()\l+ interface1D()\l# getDataSegments()\l# drawPolyline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractPlottable1D.html"];
  Node20 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node21 [label="{QCPBars\n|# mWidth\l# mWidthType\l# mBarsGroup\l# mBaseValue\l# mStackingGap\l# mBarBelow\l# mBarAbove\l|+ QCPBars()\l+ ~QCPBars()\l+ width()\l+ widthType()\l+ barsGroup()\l+ baseValue()\l+ stackingGap()\l+ barBelow()\l+ barAbove()\l+ data()\l+ setData()\l+ setData()\l+ setWidth()\l+ setWidthType()\l+ setBarsGroup()\l+ setBaseValue()\l+ setStackingGap()\l+ addData()\l+ addData()\l+ moveBelow()\l+ moveAbove()\l+ selectTestRect()\l+ selectTest()\l+ getKeyRange()\l+ getValueRange()\l+ dataPixelPosition()\l# draw()\l# drawLegendIcon()\l# getVisibleDataBounds()\l# getBarRect()\l# getPixelWidth()\l# getStackedBaseValue()\l# connectBars()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPBars.html",tooltip="A plottable representing a bar chart in a plot. "];
  Node13 -> Node22 [dir="back",color="orange",fontsize="10",style="solid",label=" \< QCPCurveData \>" ,fontname="Helvetica"];
  Node22 [label="{QCPAbstractPlottable1D\l\< QCPCurveData \>\n|# mDataContainer\l|+ QCPAbstractPlottable1D()\l+ ~QCPAbstractPlottable1D()\l+ dataCount()\l+ dataMainKey()\l+ dataSortKey()\l+ dataMainValue()\l+ dataValueRange()\l+ dataPixelPosition()\l+ sortKeyIsMainKey()\l+ selectTestRect()\l+ findBegin()\l+ findEnd()\l+ selectTest()\l+ interface1D()\l# getDataSegments()\l# drawPolyline()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractPlottable1D.html"];
  Node22 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node23 [label="{QCPCurve\n|# mScatterStyle\l# mScatterSkip\l# mLineStyle\l|+ QCPCurve()\l+ ~QCPCurve()\l+ data()\l+ scatterStyle()\l+ scatterSkip()\l+ lineStyle()\l+ setData()\l+ setData()\l+ setData()\l+ setScatterStyle()\l+ setScatterSkip()\l+ setLineStyle()\l+ addData()\l+ addData()\l+ addData()\l+ addData()\l+ selectTest()\l+ getKeyRange()\l+ getValueRange()\l# draw()\l# drawLegendIcon()\l# drawCurveLine()\l# drawScatterPlot()\l# getCurveLines()\l# getScatters()\l# getRegion()\l# getOptimizedPoint()\l# getOptimizedCornerPoints()\l# mayTraverse()\l# getTraverse()\l# getTraverseCornerPoints()\l# pointDistance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPCurve.html",tooltip="A plottable representing a parametric curve in a plot. "];
  Node12 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node24 [label="{QCPColorMap\n|# mDataRange\l# mDataScaleType\l# mMapData\l# mGradient\l# mInterpolate\l# mTightBoundary\l# mColorScale\l# mMapImage\l# mUndersampledMapImage\l# mLegendIcon\l# mMapImageInvalidated\l|+ QCPColorMap()\l+ ~QCPColorMap()\l+ data()\l+ dataRange()\l+ dataScaleType()\l+ interpolate()\l+ tightBoundary()\l+ gradient()\l+ colorScale()\l+ setData()\l+ setDataRange()\l+ setDataScaleType()\l+ setGradient()\l+ setInterpolate()\l+ setTightBoundary()\l+ setColorScale()\l+ rescaleDataRange()\l+ updateLegendIcon()\l+ selectTest()\l+ getKeyRange()\l+ getValueRange()\l# updateMapImage()\l# draw()\l# drawLegendIcon()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPColorMap.html",tooltip="A plottable representing a two-dimensional color map in a plot. "];
  Node12 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node25 [label="{QCPErrorBars\n|# mDataContainer\l# mDataPlottable\l# mErrorType\l# mWhiskerWidth\l# mSymbolGap\l|+ QCPErrorBars()\l+ ~QCPErrorBars()\l+ data()\l+ dataPlottable()\l+ errorType()\l+ whiskerWidth()\l+ symbolGap()\l+ setData()\l+ setData()\l+ setData()\l+ setDataPlottable()\l+ setErrorType()\l+ setWhiskerWidth()\l+ setSymbolGap()\l+ addData()\l+ addData()\l+ addData()\l+ addData()\l+ dataCount()\l+ dataMainKey()\l+ dataSortKey()\l+ dataMainValue()\l+ dataValueRange()\l+ dataPixelPosition()\l+ sortKeyIsMainKey()\l+ selectTestRect()\l+ findBegin()\l+ findEnd()\l+ selectTest()\l+ interface1D()\l# draw()\l# drawLegendIcon()\l# getKeyRange()\l# getValueRange()\l# getErrorBarLines()\l# getVisibleDataBounds()\l# pointDistance()\l# getDataSegments()\l# errorBarVisible()\l# rectIntersectsLine()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPErrorBars.html",tooltip="A plottable that adds a set of error bars to other plottables. "];
  Node0 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node26 [label="{QCPAxis\n|# mAxisType\l# mAxisRect\l# mPadding\l# mOrientation\l# mSelectableParts\l# mSelectedParts\l# mBasePen\l# mSelectedBasePen\l# mLabel\l# mLabelFont\l# mSelectedLabelFont\l# mLabelColor\l# mSelectedLabelColor\l# mTickLabels\l# mTickLabelFont\l# mSelectedTickLabelFont\l# mTickLabelColor\l# mSelectedTickLabelColor\l# mNumberPrecision\l# mNumberFormatChar\l# mNumberBeautifulPowers\l# mTicks\l# mSubTicks\l# mTickPen\l# mSelectedTickPen\l# mSubTickPen\l# mSelectedSubTickPen\l# mRange\l# mRangeReversed\l# mScaleType\l# mGrid\l# mAxisPainter\l# mTicker\l# mTickVector\l# mTickVectorLabels\l# mSubTickVector\l# mCachedMarginValid\l# mCachedMargin\l# mDragging\l# mDragStartRange\l# mAADragBackup\l# mNotAADragBackup\l|+ QCPAxis()\l+ ~QCPAxis()\l+ axisType()\l+ axisRect()\l+ scaleType()\l+ range()\l+ rangeReversed()\l+ ticker()\l+ ticks()\l+ tickLabels()\l+ tickLabelPadding()\l+ tickLabelFont()\l+ tickLabelColor()\l+ tickLabelRotation()\l+ tickLabelSide()\l+ numberFormat()\l+ numberPrecision()\l+ tickVector()\l+ tickVectorLabels()\l+ tickLengthIn()\l+ tickLengthOut()\l+ subTicks()\l+ subTickLengthIn()\l+ subTickLengthOut()\l+ basePen()\l+ tickPen()\l+ subTickPen()\l+ labelFont()\l+ labelColor()\l+ label()\l+ labelPadding()\l+ padding()\l+ offset()\l+ selectedParts()\l+ selectableParts()\l+ selectedTickLabelFont()\l+ selectedLabelFont()\l+ selectedTickLabelColor()\l+ selectedLabelColor()\l+ selectedBasePen()\l+ selectedTickPen()\l+ selectedSubTickPen()\l+ lowerEnding()\l+ upperEnding()\l+ grid()\l+ setScaleType()\l+ setRange()\l+ setRange()\l+ setRange()\l+ setRangeLower()\l+ setRangeUpper()\l+ setRangeReversed()\l+ setTicker()\l+ setTicks()\l+ setTickLabels()\l+ setTickLabelPadding()\l+ setTickLabelFont()\l+ setTickLabelColor()\l+ setTickLabelRotation()\l+ setTickLabelSide()\l+ setNumberFormat()\l+ setNumberPrecision()\l+ setTickLength()\l+ setTickLengthIn()\l+ setTickLengthOut()\l+ setSubTicks()\l+ setSubTickLength()\l+ setSubTickLengthIn()\l+ setSubTickLengthOut()\l+ setBasePen()\l+ setTickPen()\l+ setSubTickPen()\l+ setLabelFont()\l+ setLabelColor()\l+ setLabel()\l+ setLabelPadding()\l+ setPadding()\l+ setOffset()\l+ setSelectedTickLabelFont()\l+ setSelectedLabelFont()\l+ setSelectedTickLabelColor()\l+ setSelectedLabelColor()\l+ setSelectedBasePen()\l+ setSelectedTickPen()\l+ setSelectedSubTickPen()\l+ setSelectableParts()\l+ setSelectedParts()\l+ setLowerEnding()\l+ setUpperEnding()\l+ selectTest()\l+ orientation()\l+ pixelOrientation()\l+ moveRange()\l+ scaleRange()\l+ scaleRange()\l+ setScaleRatio()\l+ rescale()\l+ pixelToCoord()\l+ coordToPixel()\l+ getPartAt()\l+ plottables()\l+ graphs()\l+ items()\l+ marginSideToAxisType()\l+ orientation()\l+ opposite()\l# calculateMargin()\l# applyDefaultAntialiasingHint()\l# draw()\l# selectionCategory()\l# selectEvent()\l# deselectEvent()\l# mousePressEvent()\l# mouseMoveEvent()\l# mouseReleaseEvent()\l# wheelEvent()\l# setupTickVectors()\l# getBasePen()\l# getTickPen()\l# getSubTickPen()\l# getTickLabelFont()\l# getLabelFont()\l# getTickLabelColor()\l# getLabelColor()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAxis.html",tooltip="Manages a single axis inside a QCustomPlot. "];
  Node0 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node27 [label="{QCPGrid\n|# mSubGridVisible\l# mAntialiasedSubGrid\l# mAntialiasedZeroLine\l# mPen\l# mSubGridPen\l# mZeroLinePen\l# mParentAxis\l|+ QCPGrid()\l+ subGridVisible()\l+ antialiasedSubGrid()\l+ antialiasedZeroLine()\l+ pen()\l+ subGridPen()\l+ zeroLinePen()\l+ setSubGridVisible()\l+ setAntialiasedSubGrid()\l+ setAntialiasedZeroLine()\l+ setPen()\l+ setSubGridPen()\l+ setZeroLinePen()\l# applyDefaultAntialiasingHint()\l# draw()\l# drawGridLines()\l# drawSubGridLines()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPGrid.html",tooltip="Responsible for drawing the grid of a QCPAxis. "];
  Node0 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node28 [label="{QCPLayoutElement\n|# mParentLayout\l# mMinimumSize\l# mMaximumSize\l# mSizeConstraintRect\l# mRect\l# mOuterRect\l# mMargins\l# mMinimumMargins\l# mAutoMargins\l# mMarginGroups\l|+ QCPLayoutElement()\l+ ~QCPLayoutElement()\l+ layout()\l+ rect()\l+ outerRect()\l+ margins()\l+ minimumMargins()\l+ autoMargins()\l+ minimumSize()\l+ maximumSize()\l+ sizeConstraintRect()\l+ marginGroup()\l+ marginGroups()\l+ setOuterRect()\l+ setMargins()\l+ setMinimumMargins()\l+ setAutoMargins()\l+ setMinimumSize()\l+ setMinimumSize()\l+ setMaximumSize()\l+ setMaximumSize()\l+ setSizeConstraintRect()\l+ setMarginGroup()\l+ update()\l+ minimumOuterSizeHint()\l+ maximumOuterSizeHint()\l+ elements()\l+ selectTest()\l# calculateAutoMargin()\l# layoutChanged()\l# applyDefaultAntialiasingHint()\l# draw()\l# parentPlotInitialized()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPLayoutElement.html",tooltip="The abstract base class for all objects that form the layout system. "];
  Node28 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node29 [label="{QCPAbstractLegendItem\n|# mParentLegend\l# mFont\l# mTextColor\l# mSelectedFont\l# mSelectedTextColor\l# mSelectable\l# mSelected\l|+ QCPAbstractLegendItem()\l+ parentLegend()\l+ font()\l+ textColor()\l+ selectedFont()\l+ selectedTextColor()\l+ selectable()\l+ selected()\l+ setFont()\l+ setTextColor()\l+ setSelectedFont()\l+ setSelectedTextColor()\l+ setSelectable()\l+ setSelected()\l+ selectTest()\l# selectionCategory()\l# applyDefaultAntialiasingHint()\l# clipRect()\l# draw()\l# selectEvent()\l# deselectEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAbstractLegendItem.html",tooltip="The abstract base class for all entries in a QCPLegend. "];
  Node29 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node30 [label="{QCPPlottableLegendItem\n|# mPlottable\l|+ QCPPlottableLegendItem()\l+ plottable()\l# draw()\l# minimumOuterSizeHint()\l# getIconBorderPen()\l# getTextColor()\l# getFont()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPPlottableLegendItem.html",tooltip="A legend item representing a plottable with an icon and the plottable name. "];
  Node28 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node31 [label="{QCPAxisRect\n|# mBackgroundBrush\l# mBackgroundPixmap\l# mScaledBackgroundPixmap\l# mBackgroundScaled\l# mBackgroundScaledMode\l# mInsetLayout\l# mRangeDrag\l# mRangeZoom\l# mRangeDragHorzAxis\l# mRangeDragVertAxis\l# mRangeZoomHorzAxis\l# mRangeZoomVertAxis\l# mRangeZoomFactorHorz\l# mRangeZoomFactorVert\l# mDragStartHorzRange\l# mDragStartVertRange\l# mAADragBackup\l# mNotAADragBackup\l# mDragging\l# mAxes\l|+ QCPAxisRect()\l+ ~QCPAxisRect()\l+ background()\l+ backgroundBrush()\l+ backgroundScaled()\l+ backgroundScaledMode()\l+ rangeDrag()\l+ rangeZoom()\l+ rangeDragAxis()\l+ rangeZoomAxis()\l+ rangeDragAxes()\l+ rangeZoomAxes()\l+ rangeZoomFactor()\l+ setBackground()\l+ setBackground()\l+ setBackground()\l+ setBackgroundScaled()\l+ setBackgroundScaledMode()\l+ setRangeDrag()\l+ setRangeZoom()\l+ setRangeDragAxes()\l+ setRangeDragAxes()\l+ setRangeDragAxes()\l+ setRangeZoomAxes()\l+ setRangeZoomAxes()\l+ setRangeZoomAxes()\l+ setRangeZoomFactor()\l+ setRangeZoomFactor()\l+ axisCount()\l+ axis()\l+ axes()\l+ axes()\l+ addAxis()\l+ addAxes()\l+ removeAxis()\l+ insetLayout()\l+ zoom()\l+ zoom()\l+ setupFullAxesBox()\l+ plottables()\l+ graphs()\l+ items()\l+ left()\l+ right()\l+ top()\l+ bottom()\l+ width()\l+ height()\l+ size()\l+ topLeft()\l+ topRight()\l+ bottomLeft()\l+ bottomRight()\l+ center()\l+ update()\l+ elements()\l# applyDefaultAntialiasingHint()\l# draw()\l# calculateAutoMargin()\l# layoutChanged()\l# mousePressEvent()\l# mouseMoveEvent()\l# mouseReleaseEvent()\l# wheelEvent()\l# drawBackground()\l# updateAxesOffset()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPAxisRect.html",tooltip="Holds multiple axes and arranges them in a rectangular shape. "];
  Node31 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node32 [label="{QCPColorScaleAxisRectPrivate\n|# mParentColorScale\l# mGradientImage\l# mGradientImageInvalidated\l|+ QCPColorScaleAxisRectPrivate()\l# draw()\l# updateGradientImage()\l# axisSelectionChanged()\l# axisSelectableChanged()\l# calculateAutoMargin()\l# mousePressEvent()\l# mouseMoveEvent()\l# mouseReleaseEvent()\l# wheelEvent()\l# update()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPColorScaleAxisRectPrivate.html"];
  Node28 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node33 [label="{QCPColorScale\n|# mType\l# mDataRange\l# mDataScaleType\l# mGradient\l# mBarWidth\l# mAxisRect\l# mColorAxis\l|+ QCPColorScale()\l+ ~QCPColorScale()\l+ axis()\l+ type()\l+ dataRange()\l+ dataScaleType()\l+ gradient()\l+ label()\l+ barWidth()\l+ rangeDrag()\l+ rangeZoom()\l+ setType()\l+ setDataRange()\l+ setDataScaleType()\l+ setGradient()\l+ setLabel()\l+ setBarWidth()\l+ setRangeDrag()\l+ setRangeZoom()\l+ colorMaps()\l+ rescaleDataRange()\l+ update()\l# applyDefaultAntialiasingHint()\l# mousePressEvent()\l# mouseMoveEvent()\l# mouseReleaseEvent()\l# wheelEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPColorScale.html",tooltip="A color scale for use with color coding data such as QCPColorMap. "];
  Node28 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node34 [label="{QCPLayout\n||+ QCPLayout()\l+ update()\l+ elements()\l+ elementCount()\l+ elementAt()\l+ takeAt()\l+ take()\l+ simplify()\l+ removeAt()\l+ remove()\l+ clear()\l# updateLayout()\l# sizeConstraintsChanged()\l# adoptElement()\l# releaseElement()\l# getSectionSizes()\l# getFinalMinimumOuterSize()\l# getFinalMaximumOuterSize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPLayout.html",tooltip="The abstract base class for layouts. "];
  Node34 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node35 [label="{QCPLayoutGrid\n|# mElements\l# mColumnStretchFactors\l# mRowStretchFactors\l# mColumnSpacing\l# mRowSpacing\l# mWrap\l# mFillOrder\l|+ QCPLayoutGrid()\l+ ~QCPLayoutGrid()\l+ rowCount()\l+ columnCount()\l+ columnStretchFactors()\l+ rowStretchFactors()\l+ columnSpacing()\l+ rowSpacing()\l+ wrap()\l+ fillOrder()\l+ setColumnStretchFactor()\l+ setColumnStretchFactors()\l+ setRowStretchFactor()\l+ setRowStretchFactors()\l+ setColumnSpacing()\l+ setRowSpacing()\l+ setWrap()\l+ setFillOrder()\l+ updateLayout()\l+ elementCount()\l+ elementAt()\l+ takeAt()\l+ take()\l+ elements()\l+ simplify()\l+ minimumOuterSizeHint()\l+ maximumOuterSizeHint()\l+ element()\l+ addElement()\l+ addElement()\l+ hasElement()\l+ expandTo()\l+ insertRow()\l+ insertColumn()\l+ rowColToIndex()\l+ indexToRowCol()\l# getMinimumRowColSizes()\l# getMaximumRowColSizes()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPLayoutGrid.html",tooltip="A layout that arranges child elements in a grid. "];
  Node35 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node36 [label="{QCPLegend\n|# mBorderPen\l# mIconBorderPen\l# mBrush\l# mFont\l# mTextColor\l# mIconSize\l# mIconTextPadding\l# mSelectedParts\l# mSelectableParts\l# mSelectedBorderPen\l# mSelectedIconBorderPen\l# mSelectedBrush\l# mSelectedFont\l# mSelectedTextColor\l|+ QCPLegend()\l+ ~QCPLegend()\l+ borderPen()\l+ brush()\l+ font()\l+ textColor()\l+ iconSize()\l+ iconTextPadding()\l+ iconBorderPen()\l+ selectableParts()\l+ selectedParts()\l+ selectedBorderPen()\l+ selectedIconBorderPen()\l+ selectedBrush()\l+ selectedFont()\l+ selectedTextColor()\l+ setBorderPen()\l+ setBrush()\l+ setFont()\l+ setTextColor()\l+ setIconSize()\l+ setIconSize()\l+ setIconTextPadding()\l+ setIconBorderPen()\l+ setSelectableParts()\l+ setSelectedParts()\l+ setSelectedBorderPen()\l+ setSelectedIconBorderPen()\l+ setSelectedBrush()\l+ setSelectedFont()\l+ setSelectedTextColor()\l+ selectTest()\l+ item()\l+ itemWithPlottable()\l+ itemCount()\l+ hasItem()\l+ hasItemWithPlottable()\l+ addItem()\l+ removeItem()\l+ removeItem()\l+ clearItems()\l+ selectedItems()\l# parentPlotInitialized()\l# selectionCategory()\l# applyDefaultAntialiasingHint()\l# draw()\l# selectEvent()\l# deselectEvent()\l# getBorderPen()\l# getBrush()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPLegend.html",tooltip="Manages a legend inside a QCustomPlot. "];
  Node34 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node37 [label="{QCPLayoutInset\n|# mElements\l# mInsetPlacement\l# mInsetAlignment\l# mInsetRect\l|+ QCPLayoutInset()\l+ ~QCPLayoutInset()\l+ insetPlacement()\l+ insetAlignment()\l+ insetRect()\l+ setInsetPlacement()\l+ setInsetAlignment()\l+ setInsetRect()\l+ updateLayout()\l+ elementCount()\l+ elementAt()\l+ takeAt()\l+ take()\l+ simplify()\l+ selectTest()\l+ addElement()\l+ addElement()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPLayoutInset.html",tooltip="A layout that places child elements aligned to the border or arbitrarily positioned. "];
  Node28 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node38 [label="{QCPTextElement\n|# mText\l# mTextFlags\l# mFont\l# mTextColor\l# mSelectedFont\l# mSelectedTextColor\l# mTextBoundingRect\l# mSelectable\l# mSelected\l|+ QCPTextElement()\l+ QCPTextElement()\l+ QCPTextElement()\l+ QCPTextElement()\l+ QCPTextElement()\l+ text()\l+ textFlags()\l+ font()\l+ textColor()\l+ selectedFont()\l+ selectedTextColor()\l+ selectable()\l+ selected()\l+ setText()\l+ setTextFlags()\l+ setFont()\l+ setTextColor()\l+ setSelectedFont()\l+ setSelectedTextColor()\l+ setSelectable()\l+ setSelected()\l+ selectTest()\l+ mousePressEvent()\l+ mouseReleaseEvent()\l+ mouseDoubleClickEvent()\l# applyDefaultAntialiasingHint()\l# draw()\l# minimumOuterSizeHint()\l# maximumOuterSizeHint()\l# selectEvent()\l# deselectEvent()\l# mainFont()\l# mainTextColor()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPTextElement.html",tooltip="A layout element displaying a text. "];
  Node0 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node39 [label="{QCPSelectionRect\n|# mRect\l# mPen\l# mBrush\l# mActive\l|+ QCPSelectionRect()\l+ ~QCPSelectionRect()\l+ rect()\l+ range()\l+ pen()\l+ brush()\l+ isActive()\l+ setPen()\l+ setBrush()\l+ cancel()\l# startSelection()\l# moveSelection()\l# endSelection()\l# keyPressEvent()\l# applyDefaultAntialiasingHint()\l# draw()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classQCPSelectionRect.html",tooltip="Provides rect/rubber-band data selection and range zoom interaction. "];
}
