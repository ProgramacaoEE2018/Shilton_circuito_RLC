{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referência da Classe QCPItemPosition\par \pard\plain 
{\tc\tcl2 \v QCPItemPosition}
{\xe \v QCPItemPosition}
{\bkmkstart AAAAAAACOZ}
{\bkmkend AAAAAAACOZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Manages the position of an item. }}\par
{
{\f2 #include <qcustomplot.h>}}\par
Diagrama de hierarquia para QCPItemPosition:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classQCPItemPosition__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b PositionType} \{ {\b ptAbsolute}, 
{\b ptViewportRatio}, 
{\b ptAxisRectRatio}, 
{\b ptPlotCoords}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Públicos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPItemPosition} ({\b QCustomPlot} *parentPlot, {\b QCPAbstractItem} *parentItem, const QString &{\b name})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~QCPItemPosition} ()\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PositionType} {\b type} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PositionType} {\b typeX} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PositionType} {\b typeY} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPItemAnchor} * {\b parentAnchor} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPItemAnchor} * {\b parentAnchorX} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPItemAnchor} * {\b parentAnchorY} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b key} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b value} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPointF {\b coords} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxis} * {\b keyAxis} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxis} * {\b valueAxis} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAxisRect} * {\b axisRect} () const\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual QPointF {\b pixelPosition} () const {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setType} ({\b PositionType} {\b type})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTypeX} ({\b PositionType} {\b type})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTypeY} ({\b PositionType} {\b type})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b setParentAnchor} ({\b QCPItemAnchor} *{\b parentAnchor}, bool keepPixelPosition=false)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b setParentAnchorX} ({\b QCPItemAnchor} *{\b parentAnchor}, bool keepPixelPosition=false)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b setParentAnchorY} ({\b QCPItemAnchor} *{\b parentAnchor}, bool keepPixelPosition=false)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCoords} (double {\b key}, double {\b value})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCoords} (const QPointF &{\b coords})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAxes} ({\b QCPAxis} *{\b keyAxis}, {\b QCPAxis} *{\b valueAxis})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAxisRect} ({\b QCPAxisRect} *{\b axisRect})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPixelPosition} (const QPointF &{\b pixelPosition})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b name} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b QCPItemPosition} * {\b toQCPItemPosition} () {\b Q_DECL_OVERRIDE}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addChildX} ({\b QCPItemPosition} *pos)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeChildX} ({\b QCPItemPosition} *pos)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addChildY} ({\b QCPItemPosition} *pos)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeChildY} ({\b QCPItemPosition} *pos)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PositionType} {\b mPositionTypeX}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PositionType} {\b mPositionTypeY}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPointer< {\b QCPAxis} > {\b mKeyAxis}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPointer< {\b QCPAxis} > {\b mValueAxis}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QPointer< {\b QCPAxisRect} > {\b mAxisRect}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mKey}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b mValue}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPItemAnchor} * {\b mParentAnchorX}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPItemAnchor} * {\b mParentAnchorY}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b mName}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCustomPlot} * {\b mParentPlot}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QCPAbstractItem} * {\b mParentItem}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mAnchorId}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QSet< {\b QCPItemPosition} * > {\b mChildrenX}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QSet< {\b QCPItemPosition} * > {\b mChildrenY}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descrição detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Manages the position of an item. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Every item has at least one public {\b QCPItemPosition} member pointer which provides ways to position the item on the {\b QCustomPlot} surface. Some items have multiple positions, for example {\b QCPItemRect} has two: {\i topLeft}  and {\i bottomRight} .\par
{\b QCPItemPosition} has a type ({\b PositionType}) that can be set with {\b setType}. This type defines how coordinates passed to {\b setCoords} are to be interpreted, e.g. as absolute pixel coordinates, as plot coordinates of certain axes, etc. For more advanced plots it is also possible to assign different types per X/Y coordinate of the position (see {\b setTypeX}, {\b setTypeY}). This way an item could be positioned at a fixed pixel distance from the top in the Y direction, while following a plot coordinate in the X direction.\par
A {\b QCPItemPosition} may have a parent {\b QCPItemAnchor}, see {\b setParentAnchor}. This way you can tie multiple items together. If the {\b QCPItemPosition} has a parent, its coordinates ({\b setCoords}) are considered to be absolute pixels in the reference frame of the parent anchor, where (0, 0) means directly ontop of the parent anchor. For example, You could attach the {\i start}  position of a {\b QCPItemLine} to the {\i bottom}  anchor of a {\b QCPItemText} to make the starting point of the line always be centered under the text label, no matter where the text is moved to. For more advanced plots, it is possible to assign different parent anchors per X/Y coordinate of the position, see {\b setParentAnchorX}, {\b setParentAnchorY}. This way an item could follow another item in the X direction but stay at a fixed position in the Y direction. Or even follow item A in X, and item B in Y.\par
Note that every {\b QCPItemPosition} inherits from {\b QCPItemAnchor} and thus can itself be used as parent anchor for other positions.\par
To set the apparent pixel position on the {\b QCustomPlot} surface directly, use {\b setPixelPosition}. This works no matter what type this {\b QCPItemPosition} is or what parent-child situation it is in, as {\b setPixelPosition} transforms the coordinates appropriately, to make the position appear at the specified pixel values. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerações\par
\pard\plain 
{\xe \v PositionType\:QCPItemPosition}
{\xe \v QCPItemPosition\:PositionType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b QCPItemPosition::PositionType}}}
\par
{\bkmkstart AAAAAAACPA}
{\bkmkend AAAAAAACPA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defines the ways an item position can be specified. Thus it defines what the numbers passed to {\b setCoords} actually mean.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setType} \par
}}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v ptAbsolute\:QCPItemPosition}
{\xe \v QCPItemPosition\:ptAbsolute}
{\qr ptAbsolute{\bkmkstart AAAAAAACPB}
{\bkmkend AAAAAAACPB}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Static positioning in pixels, starting from the top left corner of the viewport/widget. \par
}\cell }{\row }
{\xe \v ptViewportRatio\:QCPItemPosition}
{\xe \v QCPItemPosition\:ptViewportRatio}
{\qr ptViewportRatio{\bkmkstart AAAAAAACPC}
{\bkmkend AAAAAAACPC}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Static positioning given by a fraction of the viewport size. For example, if you call setCoords(0, 0), the position will be at the top left corner of the viewport/widget. setCoords(1, 1) will be at the bottom right corner, setCoords(0.5, 0) will be horizontally centered and vertically at the top of the viewport/widget, etc. \par
}\cell }{\row }
{\xe \v ptAxisRectRatio\:QCPItemPosition}
{\xe \v QCPItemPosition\:ptAxisRectRatio}
{\qr ptAxisRectRatio{\bkmkstart AAAAAAACPD}
{\bkmkend AAAAAAACPD}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Static positioning given by a fraction of the axis rect size (see {\b setAxisRect}). For example, if you call setCoords(0, 0), the position will be at the top left corner of the axis rect. setCoords(1, 1) will be at the bottom right corner, setCoords(0.5, 0) will be horizontally centered and vertically at the top of the axis rect, etc. You can also go beyond the axis rect by providing negative coordinates or coordinates larger than 1. \par
}\cell }{\row }
{\xe \v ptPlotCoords\:QCPItemPosition}
{\xe \v QCPItemPosition\:ptPlotCoords}
{\qr ptPlotCoords{\bkmkstart AAAAAAACPE}
{\bkmkend AAAAAAACPE}
\cell }{{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Dynamic positioning at a plot coordinate defined by two axes (see {\b setAxes}). \par
}\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3445                     \{ ptAbsolute        \par
 3446                       ,ptViewportRatio  \par
 3447                       ,ptAxisRectRatio  \par
 3450                       ,ptPlotCoords     \par
 3453                     \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v QCPItemPosition\:QCPItemPosition}
{\xe \v QCPItemPosition\:QCPItemPosition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPItemPosition::QCPItemPosition ({\b QCustomPlot} *  {\i parentPlot}, {\b QCPAbstractItem} *  {\i parentItem}, const QString &  {\i name})}}
\par
{\bkmkstart AAAAAAACPF}
{\bkmkend AAAAAAACPF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a new {\b QCPItemPosition}. You shouldn't create {\b QCPItemPosition} instances directly, even if you want to make a new item subclass. Use {\b QCPAbstractItem::createPosition} instead, as explained in the subclassing section of the {\b QCPAbstractItem} documentation. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11488                                                                                                           :\par
11489   QCPItemAnchor(parentPlot, parentItem, name),\par
11490   mPositionTypeX(ptAbsolute),\par
11491   mPositionTypeY(ptAbsolute),\par
11492   mKey(0),\par
11493   mValue(0),\par
11494   mParentAnchorX(0),\par
11495   mParentAnchorY(0)\par
11496 \{\par
11497 \}\par
}
}
{\xe \v ~QCPItemPosition\:QCPItemPosition}
{\xe \v QCPItemPosition\:~QCPItemPosition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QCPItemPosition::~QCPItemPosition (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACPG}
{\bkmkend AAAAAAACPG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11500 \{\par
11501   // unregister as parent at children:\par
11502   // Note: this is done in ~QCPItemAnchor again, but it's important QCPItemPosition does it itself, because only then\par
11503   //       the setParentAnchor(0) call the correct QCPItemPosition::pixelPosition function instead of QCPItemAnchor::pixelPosition\par
11504   foreach (QCPItemPosition *child, mChildrenX.toList())\par
11505   \{\par
11506     if (child->parentAnchorX() == this)\par
11507       child->setParentAnchorX(0); // this acts back on this anchor and child removes itself from mChildrenX\par
11508   \}\par
11509   foreach (QCPItemPosition *child, mChildrenY.toList())\par
11510   \{\par
11511     if (child->parentAnchorY() == this)\par
11512       child->setParentAnchorY(0); // this acts back on this anchor and child removes itself from mChildrenY\par
11513   \}\par
11514   // unregister as child in parent:\par
11515   if (mParentAnchorX)\par
11516     mParentAnchorX->removeChildX(this);\par
11517   if (mParentAnchorY)\par
11518     mParentAnchorY->removeChildY(this);\par
11519 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funções membros\par
\pard\plain 
{\xe \v addChildX\:QCPItemPosition}
{\xe \v QCPItemPosition\:addChildX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemAnchor::addChildX ({\b QCPItemPosition} *  {\i pos}){\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACIX}
{\bkmkend AAAAAAACIX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11372 \{\par
11373   if (!mChildrenX.contains(pos))\par
11374     mChildrenX.insert(pos);\par
11375   else\par
11376     qDebug() << Q_FUNC_INFO << "provided pos is child already" << reinterpret_cast<quintptr>(pos);\par
11377 \}\par
}
}
{\xe \v addChildY\:QCPItemPosition}
{\xe \v QCPItemPosition\:addChildY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemAnchor::addChildY ({\b QCPItemPosition} *  {\i pos}){\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACIY}
{\bkmkend AAAAAAACIY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11400 \{\par
11401   if (!mChildrenY.contains(pos))\par
11402     mChildrenY.insert(pos);\par
11403   else\par
11404     qDebug() << Q_FUNC_INFO << "provided pos is child already" << reinterpret_cast<quintptr>(pos);\par
11405 \}\par
}
}
{\xe \v axisRect\:QCPItemPosition}
{\xe \v QCPItemPosition\:axisRect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAxisRect} * QCPItemPosition::axisRect () const}}
\par
{\bkmkstart AAAAAAACPH}
{\bkmkend AAAAAAACPH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11523 \{\par
11524   return mAxisRect.data();\par
11525 \}\par
}
}
{\xe \v coords\:QCPItemPosition}
{\xe \v QCPItemPosition\:coords}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPointF QCPItemPosition::coords () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACPI}
{\bkmkend AAAAAAACPI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3468 \{ return QPointF(mKey, mValue); \}\par
}
}
{\xe \v key\:QCPItemPosition}
{\xe \v QCPItemPosition\:key}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPItemPosition::key () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACPJ}
{\bkmkend AAAAAAACPJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3466 \{ return mKey; \}\par
}
}
{\xe \v keyAxis\:QCPItemPosition}
{\xe \v QCPItemPosition\:keyAxis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAxis}* QCPItemPosition::keyAxis () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACPK}
{\bkmkend AAAAAAACPK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3469 \{ return mKeyAxis.data(); \}\par
}
}
{\xe \v name\:QCPItemPosition}
{\xe \v QCPItemPosition\:name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPItemAnchor::name () const{\f2 [inline]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACIZ}
{\bkmkend AAAAAAACIZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3405 \{ return mName; \}\par
}
}
{\xe \v parentAnchor\:QCPItemPosition}
{\xe \v QCPItemPosition\:parentAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPItemAnchor} * QCPItemPosition::parentAnchor () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACPL}
{\bkmkend AAAAAAACPL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the current parent anchor.\par
If different parent anchors were set for X and Y ({\b setParentAnchorX}, {\b setParentAnchorY}), this method returns the parent anchor of the Y coordinate. In that case rather use {\i {\b parentAnchorX()}}  and {\i {\b parentAnchorY()}} .\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setParentAnchor} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3463 \{ return parentAnchorX(); \}\par
}
}
{\xe \v parentAnchorX\:QCPItemPosition}
{\xe \v QCPItemPosition\:parentAnchorX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPItemAnchor}* QCPItemPosition::parentAnchorX () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACPM}
{\bkmkend AAAAAAACPM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3464 \{ return mParentAnchorX; \}\par
}
}
{\xe \v parentAnchorY\:QCPItemPosition}
{\xe \v QCPItemPosition\:parentAnchorY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPItemAnchor}* QCPItemPosition::parentAnchorY () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACPN}
{\bkmkend AAAAAAACPN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3465 \{ return mParentAnchorY; \}\par
}
}
{\xe \v pixelPosition\:QCPItemPosition}
{\xe \v QCPItemPosition\:pixelPosition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPointF QCPItemPosition::pixelPosition () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJB}
{\bkmkend AAAAAAACJB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the final absolute pixel position of the {\b QCPItemPosition} on the {\b QCustomPlot} surface. It includes all effects of type ({\b setType}) and possible parent anchors ({\b setParentAnchor}).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setPixelPosition} \par
}}{
Reimplementa {\b QCPItemAnchor} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACJA \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11813 \{\par
11814   QPointF result;\par
11815   \par
11816   // determine X:\par
11817   switch (mPositionTypeX)\par
11818   \{\par
11819     case ptAbsolute:\par
11820     \{\par
11821       result.rx() = mKey;\par
11822       if (mParentAnchorX)\par
11823         result.rx() += mParentAnchorX->pixelPosition().x();\par
11824       break;\par
11825     \}\par
11826     case ptViewportRatio:\par
11827     \{\par
11828       result.rx() = mKey*mParentPlot->viewport().width();\par
11829       if (mParentAnchorX)\par
11830         result.rx() += mParentAnchorX->pixelPosition().x();\par
11831       else\par
11832         result.rx() += mParentPlot->viewport().left();\par
11833       break;\par
11834     \}\par
11835     case ptAxisRectRatio:\par
11836     \{\par
11837       if (mAxisRect)\par
11838       \{\par
11839         result.rx() = mKey*mAxisRect.data()->width();\par
11840         if (mParentAnchorX)\par
11841           result.rx() += mParentAnchorX->pixelPosition().x();\par
11842         else\par
11843           result.rx() += mAxisRect.data()->left();\par
11844       \} else\par
11845         qDebug() << Q_FUNC_INFO << "Item position type x is ptAxisRectRatio, but no axis rect was defined";\par
11846       break;\par
11847     \}\par
11848     case ptPlotCoords:\par
11849     \{\par
11850       if (mKeyAxis && mKeyAxis.data()->orientation() == Qt::Horizontal)\par
11851         result.rx() = mKeyAxis.data()->coordToPixel(mKey);\par
11852       else if (mValueAxis && mValueAxis.data()->orientation() == Qt::Horizontal)\par
11853         result.rx() = mValueAxis.data()->coordToPixel(mValue);\par
11854       else\par
11855         qDebug() << Q_FUNC_INFO << "Item position type x is ptPlotCoords, but no axes were defined";\par
11856       break;\par
11857     \}\par
11858   \}\par
11859   \par
11860   // determine Y:\par
11861   switch (mPositionTypeY)\par
11862   \{\par
11863     case ptAbsolute:\par
11864     \{\par
11865       result.ry() = mValue;\par
11866       if (mParentAnchorY)\par
11867         result.ry() += mParentAnchorY->pixelPosition().y();\par
11868       break;\par
11869     \}\par
11870     case ptViewportRatio:\par
11871     \{\par
11872       result.ry() = mValue*mParentPlot->viewport().height();\par
11873       if (mParentAnchorY)\par
11874         result.ry() += mParentAnchorY->pixelPosition().y();\par
11875       else\par
11876         result.ry() += mParentPlot->viewport().top();\par
11877       break;\par
11878     \}\par
11879     case ptAxisRectRatio:\par
11880     \{\par
11881       if (mAxisRect)\par
11882       \{\par
11883         result.ry() = mValue*mAxisRect.data()->height();\par
11884         if (mParentAnchorY)\par
11885           result.ry() += mParentAnchorY->pixelPosition().y();\par
11886         else\par
11887           result.ry() += mAxisRect.data()->top();\par
11888       \} else\par
11889         qDebug() << Q_FUNC_INFO << "Item position type y is ptAxisRectRatio, but no axis rect was defined";\par
11890       break;\par
11891     \}\par
11892     case ptPlotCoords:\par
11893     \{\par
11894       if (mKeyAxis && mKeyAxis.data()->orientation() == Qt::Vertical)\par
11895         result.ry() = mKeyAxis.data()->coordToPixel(mKey);\par
11896       else if (mValueAxis && mValueAxis.data()->orientation() == Qt::Vertical)\par
11897         result.ry() = mValueAxis.data()->coordToPixel(mValue);\par
11898       else\par
11899         qDebug() << Q_FUNC_INFO << "Item position type y is ptPlotCoords, but no axes were defined";\par
11900       break;\par
11901     \}\par
11902   \}\par
11903   \par
11904   return result;\par
11905 \}\par
}
}
{\xe \v removeChildX\:QCPItemPosition}
{\xe \v QCPItemPosition\:removeChildX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemAnchor::removeChildX ({\b QCPItemPosition} *  {\i pos}){\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJC}
{\bkmkend AAAAAAACJC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11386 \{\par
11387   if (!mChildrenX.remove(pos))\par
11388     qDebug() << Q_FUNC_INFO << "provided pos isn't child" << reinterpret_cast<quintptr>(pos);\par
11389 \}\par
}
}
{\xe \v removeChildY\:QCPItemPosition}
{\xe \v QCPItemPosition\:removeChildY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemAnchor::removeChildY ({\b QCPItemPosition} *  {\i pos}){\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJD}
{\bkmkend AAAAAAACJD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11414 \{\par
11415   if (!mChildrenY.remove(pos))\par
11416     qDebug() << Q_FUNC_INFO << "provided pos isn't child" << reinterpret_cast<quintptr>(pos);\par
11417 \}\par
}
}
{\xe \v setAxes\:QCPItemPosition}
{\xe \v QCPItemPosition\:setAxes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setAxes ({\b QCPAxis} *  {\i keyAxis}, {\b QCPAxis} *  {\i valueAxis})}}
\par
{\bkmkstart AAAAAAACPO}
{\bkmkend AAAAAAACPO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
When {\b setType} is {\b ptPlotCoords}, this function may be used to specify the axes the coordinates set with {\b setCoords} relate to. By default they are set to the initial xAxis and yAxis of the {\b QCustomPlot}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11913 \{\par
11914   mKeyAxis = keyAxis;\par
11915   mValueAxis = valueAxis;\par
11916 \}\par
}
}
{\xe \v setAxisRect\:QCPItemPosition}
{\xe \v QCPItemPosition\:setAxisRect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setAxisRect ({\b QCPAxisRect} *  {\i axisRect})}}
\par
{\bkmkstart AAAAAAACPP}
{\bkmkend AAAAAAACPP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
When {\b setType} is {\b ptAxisRectRatio}, this function may be used to specify the axis rect the coordinates set with {\b setCoords} relate to. By default this is set to the main axis rect of the {\b QCustomPlot}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11924 \{\par
11925   mAxisRect = axisRect;\par
11926 \}\par
}
}
{\xe \v setCoords\:QCPItemPosition}
{\xe \v QCPItemPosition\:setCoords}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setCoords (double  {\i key}, double  {\i value})}}
\par
{\bkmkstart AAAAAAACPQ}
{\bkmkend AAAAAAACPQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the coordinates of this {\b QCPItemPosition}. What the coordinates mean, is defined by the type ({\b setType}, {\b setTypeX}, {\b setTypeY}).\par
For example, if the type is {\b ptAbsolute}, {\i key}  and {\i value}  mean the x and y pixel position on the {\b QCustomPlot} surface. In that case the origin (0, 0) is in the top left corner of the {\b QCustomPlot} viewport. If the type is {\b ptPlotCoords}, {\i key}  and {\i value}  mean a point in the plot coordinate system defined by the axes set by {\b setAxes}. By default those are the {\b QCustomPlot}'s xAxis and yAxis. See the documentation of {\b setType} for other available coordinate types and their meaning.\par
If different types were configured for X and Y ({\b setTypeX}, {\b setTypeY}), {\i key}  and {\i value}  must also be provided in the different coordinate systems. Here, the X type refers to {\i key} , and the Y type refers to {\i value} .\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setPixelPosition} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11791 \{\par
11792   mKey = key;\par
11793   mValue = value;\par
11794 \}\par
}
}
{\xe \v setCoords\:QCPItemPosition}
{\xe \v QCPItemPosition\:setCoords}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setCoords (const QPointF &  {\i pos})}}
\par
{\bkmkstart AAAAAAACPR}
{\bkmkend AAAAAAACPR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.\par
Sets the coordinates as a QPointF {\i pos}  where pos.x has the meaning of {\i key}  and pos.y the meaning of {\i value}  of the {\b setCoords(double key, double value)} method. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11802 \{\par
11803   setCoords(pos.x(), pos.y());\par
11804 \}\par
}
}
{\xe \v setParentAnchor\:QCPItemPosition}
{\xe \v QCPItemPosition\:setParentAnchor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPItemPosition::setParentAnchor ({\b QCPItemAnchor} *  {\i parentAnchor}, bool  {\i keepPixelPosition} = {\f2 false})}}
\par
{\bkmkstart AAAAAAACPS}
{\bkmkend AAAAAAACPS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the parent of this {\b QCPItemPosition} to {\i parentAnchor} . This means the position will now follow any position changes of the anchor. The local coordinate system of positions with a parent anchor always is absolute pixels, with (0, 0) being exactly on top of the parent anchor. (Hence the type shouldn't be set to {\b ptPlotCoords} for positions with parent anchors.)\par
if {\i keepPixelPosition}  is true, the current pixel position of the {\b QCPItemPosition} is preserved during reparenting. If it's set to false, the coordinates are set to (0, 0), i.e. the position will be exactly on top of the parent anchor.\par
To remove this {\b QCPItemPosition} from any parent anchor, set {\i parentAnchor}  to 0.\par
If the {\b QCPItemPosition} previously had no parent and the type is {\b ptPlotCoords}, the type is set to {\b ptAbsolute}, to keep the position in a valid state.\par
This method sets the parent anchor for both X and Y directions. It is also possible to set different parents for X and Y, see {\b setParentAnchorX}, {\b setParentAnchorY}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11637 \{\par
11638   bool successX = setParentAnchorX(parentAnchor, keepPixelPosition);\par
11639   bool successY = setParentAnchorY(parentAnchor, keepPixelPosition);\par
11640   return successX && successY;\par
11641 \}\par
}
}
{\xe \v setParentAnchorX\:QCPItemPosition}
{\xe \v QCPItemPosition\:setParentAnchorX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPItemPosition::setParentAnchorX ({\b QCPItemAnchor} *  {\i parentAnchor}, bool  {\i keepPixelPosition} = {\f2 false})}}
\par
{\bkmkstart AAAAAAACPT}
{\bkmkend AAAAAAACPT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This method sets the parent anchor of the X coordinate to {\i parentAnchor} .\par
For a detailed description of what a parent anchor is, see the documentation of {\b setParentAnchor}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setParentAnchor}, {\b setParentAnchorY} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11651 \{\par
11652   // make sure self is not assigned as parent:\par
11653   if (parentAnchor == this)\par
11654   \{\par
11655     qDebug() << Q_FUNC_INFO << "can't set self as parent anchor" << reinterpret_cast<quintptr>(parentAnchor);\par
11656     return false;\par
11657   \}\par
11658   // make sure no recursive parent-child-relationships are created:\par
11659   QCPItemAnchor *currentParent = parentAnchor;\par
11660   while (currentParent)\par
11661   \{\par
11662     if (QCPItemPosition *currentParentPos = currentParent->toQCPItemPosition())\par
11663     \{\par
11664       // is a QCPItemPosition, might have further parent, so keep iterating\par
11665       if (currentParentPos == this)\par
11666       \{\par
11667         qDebug() << Q_FUNC_INFO << "can't create recursive parent-child-relationship" << reinterpret_cast<quintptr>(parentAnchor);\par
11668         return false;\par
11669       \}\par
11670       currentParent = currentParentPos->parentAnchorX();\par
11671     \} else\par
11672     \{\par
11673       // is a QCPItemAnchor, can't have further parent. Now make sure the parent items aren't the\par
11674       // same, to prevent a position being child of an anchor which itself depends on the position,\par
11675       // because they're both on the same item:\par
11676       if (currentParent->mParentItem == mParentItem)\par
11677       \{\par
11678         qDebug() << Q_FUNC_INFO << "can't set parent to be an anchor which itself depends on this position" << reinterpret_cast<quintptr>(parentAnchor);\par
11679         return false;\par
11680       \}\par
11681       break;\par
11682     \}\par
11683   \}\par
11684   \par
11685   // if previously no parent set and PosType is still ptPlotCoords, set to ptAbsolute:\par
11686   if (!mParentAnchorX && mPositionTypeX == ptPlotCoords)\par
11687     setTypeX(ptAbsolute);\par
11688   \par
11689   // save pixel position:\par
11690   QPointF pixelP;\par
11691   if (keepPixelPosition)\par
11692     pixelP = pixelPosition();\par
11693   // unregister at current parent anchor:\par
11694   if (mParentAnchorX)\par
11695     mParentAnchorX->removeChildX(this);\par
11696   // register at new parent anchor:\par
11697   if (parentAnchor)\par
11698     parentAnchor->addChildX(this);\par
11699   mParentAnchorX = parentAnchor;\par
11700   // restore pixel position under new parent:\par
11701   if (keepPixelPosition)\par
11702     setPixelPosition(pixelP);\par
11703   else\par
11704     setCoords(0, coords().y());\par
11705   return true;\par
11706 \}\par
}
}
{\xe \v setParentAnchorY\:QCPItemPosition}
{\xe \v QCPItemPosition\:setParentAnchorY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool QCPItemPosition::setParentAnchorY ({\b QCPItemAnchor} *  {\i parentAnchor}, bool  {\i keepPixelPosition} = {\f2 false})}}
\par
{\bkmkstart AAAAAAACPU}
{\bkmkend AAAAAAACPU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This method sets the parent anchor of the Y coordinate to {\i parentAnchor} .\par
For a detailed description of what a parent anchor is, see the documentation of {\b setParentAnchor}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setParentAnchor}, {\b setParentAnchorX} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11716 \{\par
11717   // make sure self is not assigned as parent:\par
11718   if (parentAnchor == this)\par
11719   \{\par
11720     qDebug() << Q_FUNC_INFO << "can't set self as parent anchor" << reinterpret_cast<quintptr>(parentAnchor);\par
11721     return false;\par
11722   \}\par
11723   // make sure no recursive parent-child-relationships are created:\par
11724   QCPItemAnchor *currentParent = parentAnchor;\par
11725   while (currentParent)\par
11726   \{\par
11727     if (QCPItemPosition *currentParentPos = currentParent->toQCPItemPosition())\par
11728     \{\par
11729       // is a QCPItemPosition, might have further parent, so keep iterating\par
11730       if (currentParentPos == this)\par
11731       \{\par
11732         qDebug() << Q_FUNC_INFO << "can't create recursive parent-child-relationship" << reinterpret_cast<quintptr>(parentAnchor);\par
11733         return false;\par
11734       \}\par
11735       currentParent = currentParentPos->parentAnchorY();\par
11736     \} else\par
11737     \{\par
11738       // is a QCPItemAnchor, can't have further parent. Now make sure the parent items aren't the\par
11739       // same, to prevent a position being child of an anchor which itself depends on the position,\par
11740       // because they're both on the same item:\par
11741       if (currentParent->mParentItem == mParentItem)\par
11742       \{\par
11743         qDebug() << Q_FUNC_INFO << "can't set parent to be an anchor which itself depends on this position" << reinterpret_cast<quintptr>(parentAnchor);\par
11744         return false;\par
11745       \}\par
11746       break;\par
11747     \}\par
11748   \}\par
11749   \par
11750   // if previously no parent set and PosType is still ptPlotCoords, set to ptAbsolute:\par
11751   if (!mParentAnchorY && mPositionTypeY == ptPlotCoords)\par
11752     setTypeY(ptAbsolute);\par
11753   \par
11754   // save pixel position:\par
11755   QPointF pixelP;\par
11756   if (keepPixelPosition)\par
11757     pixelP = pixelPosition();\par
11758   // unregister at current parent anchor:\par
11759   if (mParentAnchorY)\par
11760     mParentAnchorY->removeChildY(this);\par
11761   // register at new parent anchor:\par
11762   if (parentAnchor)\par
11763     parentAnchor->addChildY(this);\par
11764   mParentAnchorY = parentAnchor;\par
11765   // restore pixel position under new parent:\par
11766   if (keepPixelPosition)\par
11767     setPixelPosition(pixelP);\par
11768   else\par
11769     setCoords(coords().x(), 0);\par
11770   return true;\par
11771 \}\par
}
}
{\xe \v setPixelPosition\:QCPItemPosition}
{\xe \v QCPItemPosition\:setPixelPosition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setPixelPosition (const QPointF &  {\i pixelPosition})}}
\par
{\bkmkstart AAAAAAACPV}
{\bkmkend AAAAAAACPV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the apparent pixel position. This works no matter what type ({\b setType}) this {\b QCPItemPosition} is or what parent-child situation it is in, as coordinates are transformed appropriately, to make the position finally appear at the specified pixel values.\par
Only if the type is {\b ptAbsolute} and no parent anchor is set, this function's effect is identical to that of {\b setCoords}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b pixelPosition}, {\b setCoords} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11939 \{\par
11940   double x = pixelPosition.x();\par
11941   double y = pixelPosition.y();\par
11942   \par
11943   switch (mPositionTypeX)\par
11944   \{\par
11945     case ptAbsolute:\par
11946     \{\par
11947       if (mParentAnchorX)\par
11948         x -= mParentAnchorX->pixelPosition().x();\par
11949       break;\par
11950     \}\par
11951     case ptViewportRatio:\par
11952     \{\par
11953       if (mParentAnchorX)\par
11954         x -= mParentAnchorX->pixelPosition().x();\par
11955       else\par
11956         x -= mParentPlot->viewport().left();\par
11957       x /= (double)mParentPlot->viewport().width();\par
11958       break;\par
11959     \}\par
11960     case ptAxisRectRatio:\par
11961     \{\par
11962       if (mAxisRect)\par
11963       \{\par
11964         if (mParentAnchorX)\par
11965           x -= mParentAnchorX->pixelPosition().x();\par
11966         else\par
11967           x -= mAxisRect.data()->left();\par
11968         x /= (double)mAxisRect.data()->width();\par
11969       \} else\par
11970         qDebug() << Q_FUNC_INFO << "Item position type x is ptAxisRectRatio, but no axis rect was defined";\par
11971       break;\par
11972     \}\par
11973     case ptPlotCoords:\par
11974     \{\par
11975       if (mKeyAxis && mKeyAxis.data()->orientation() == Qt::Horizontal)\par
11976         x = mKeyAxis.data()->pixelToCoord(x);\par
11977       else if (mValueAxis && mValueAxis.data()->orientation() == Qt::Horizontal)\par
11978         y = mValueAxis.data()->pixelToCoord(x);\par
11979       else\par
11980         qDebug() << Q_FUNC_INFO << "Item position type x is ptPlotCoords, but no axes were defined";\par
11981       break;\par
11982     \}\par
11983   \}\par
11984   \par
11985   switch (mPositionTypeY)\par
11986   \{\par
11987     case ptAbsolute:\par
11988     \{\par
11989       if (mParentAnchorY)\par
11990         y -= mParentAnchorY->pixelPosition().y();\par
11991       break;\par
11992     \}\par
11993     case ptViewportRatio:\par
11994     \{\par
11995       if (mParentAnchorY)\par
11996         y -= mParentAnchorY->pixelPosition().y();\par
11997       else\par
11998         y -= mParentPlot->viewport().top();\par
11999       y /= (double)mParentPlot->viewport().height();\par
12000       break;\par
12001     \}\par
12002     case ptAxisRectRatio:\par
12003     \{\par
12004       if (mAxisRect)\par
12005       \{\par
12006         if (mParentAnchorY)\par
12007           y -= mParentAnchorY->pixelPosition().y();\par
12008         else\par
12009           y -= mAxisRect.data()->top();\par
12010         y /= (double)mAxisRect.data()->height();\par
12011       \} else\par
12012         qDebug() << Q_FUNC_INFO << "Item position type y is ptAxisRectRatio, but no axis rect was defined";\par
12013       break;\par
12014     \}\par
12015     case ptPlotCoords:\par
12016     \{\par
12017       if (mKeyAxis && mKeyAxis.data()->orientation() == Qt::Vertical)\par
12018         x = mKeyAxis.data()->pixelToCoord(y);\par
12019       else if (mValueAxis && mValueAxis.data()->orientation() == Qt::Vertical)\par
12020         y = mValueAxis.data()->pixelToCoord(y);\par
12021       else\par
12022         qDebug() << Q_FUNC_INFO << "Item position type y is ptPlotCoords, but no axes were defined";\par
12023       break;\par
12024     \}\par
12025   \}\par
12026   \par
12027   setCoords(x, y);\par
12028 \}\par
}
}
{\xe \v setType\:QCPItemPosition}
{\xe \v QCPItemPosition\:setType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setType ({\b QCPItemPosition::PositionType}  {\i type})}}
\par
{\bkmkstart AAAAAAACPW}
{\bkmkend AAAAAAACPW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the type of the position. The type defines how the coordinates passed to {\b setCoords} should be handled and how the {\b QCPItemPosition} should behave in the plot.\par
The possible values for {\i type}  can be separated in two main categories:\par
{
\par\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
The position is regarded as a point in plot coordinates. This corresponds to {\b ptPlotCoords} and requires two axes that define the plot coordinate system. They can be specified with {\b setAxes}. By default, the {\b QCustomPlot}'s x- and yAxis are used.\par
}
{
\par\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
The position is fixed on the {\b QCustomPlot} surface, i.e. independent of axis ranges. This corresponds to all other types, i.e. {\b ptAbsolute}, {\b ptViewportRatio} and {\b ptAxisRectRatio}. They differ only in the way the absolute position is described, see the documentation of {\b PositionType} for details. For {\b ptAxisRectRatio}, note that you can specify the axis rect with {\b setAxisRect}. By default this is set to the main axis rect.\par
}
Note that the position type {\b ptPlotCoords} is only available (and sensible) when the position has no parent anchor ({\b setParentAnchor}).\par
If the type is changed, the apparent pixel position on the plot is preserved. This means the coordinates as retrieved with {\b coords()} and set with {\b setCoords} may change in the process.\par
This method sets the type for both X and Y directions. It is also possible to set different types for X and Y, see {\b setTypeX}, {\b setTypeY}. \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11553 \{\par
11554   setTypeX(type);\par
11555   setTypeY(type);\par
11556 \}\par
}
}
{\xe \v setTypeX\:QCPItemPosition}
{\xe \v QCPItemPosition\:setTypeX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setTypeX ({\b QCPItemPosition::PositionType}  {\i type})}}
\par
{\bkmkstart AAAAAAACPX}
{\bkmkend AAAAAAACPX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This method sets the position type of the X coordinate to {\i type} .\par
For a detailed description of what a position type is, see the documentation of {\b setType}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setType}, {\b setTypeY} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11566 \{\par
11567   if (mPositionTypeX != type)\par
11568   \{\par
11569     // if switching from or to coordinate type that isn't valid (e.g. because axes or axis rect\par
11570     // were deleted), don't try to recover the pixelPosition() because it would output a qDebug warning.\par
11571     bool retainPixelPosition = true;\par
11572     if ((mPositionTypeX == ptPlotCoords || type == ptPlotCoords) && (!mKeyAxis || !mValueAxis))\par
11573       retainPixelPosition = false;\par
11574     if ((mPositionTypeX == ptAxisRectRatio || type == ptAxisRectRatio) && (!mAxisRect))\par
11575       retainPixelPosition = false;\par
11576     \par
11577     QPointF pixel;\par
11578     if (retainPixelPosition)\par
11579       pixel = pixelPosition();\par
11580     \par
11581     mPositionTypeX = type;\par
11582     \par
11583     if (retainPixelPosition)\par
11584       setPixelPosition(pixel);\par
11585   \}\par
11586 \}\par
}
}
{\xe \v setTypeY\:QCPItemPosition}
{\xe \v QCPItemPosition\:setTypeY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QCPItemPosition::setTypeY ({\b QCPItemPosition::PositionType}  {\i type})}}
\par
{\bkmkstart AAAAAAACPY}
{\bkmkend AAAAAAACPY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This method sets the position type of the Y coordinate to {\i type} .\par
For a detailed description of what a position type is, see the documentation of {\b setType}.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setType}, {\b setTypeX} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11596 \{\par
11597   if (mPositionTypeY != type)\par
11598   \{\par
11599     // if switching from or to coordinate type that isn't valid (e.g. because axes or axis rect\par
11600     // were deleted), don't try to recover the pixelPosition() because it would output a qDebug warning.\par
11601     bool retainPixelPosition = true;\par
11602     if ((mPositionTypeY == ptPlotCoords || type == ptPlotCoords) && (!mKeyAxis || !mValueAxis))\par
11603       retainPixelPosition = false;\par
11604     if ((mPositionTypeY == ptAxisRectRatio || type == ptAxisRectRatio) && (!mAxisRect))\par
11605       retainPixelPosition = false;\par
11606     \par
11607     QPointF pixel;\par
11608     if (retainPixelPosition)\par
11609       pixel = pixelPosition();\par
11610     \par
11611     mPositionTypeY = type;\par
11612     \par
11613     if (retainPixelPosition)\par
11614       setPixelPosition(pixel);\par
11615   \}\par
11616 \}\par
}
}
{\xe \v toQCPItemPosition\:QCPItemPosition}
{\xe \v QCPItemPosition\:toQCPItemPosition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual {\b QCPItemPosition}* QCPItemPosition::toQCPItemPosition (){\f2 [inline]}, {\f2 [protected]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAACJF}
{\bkmkend AAAAAAACJF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns 0 if this instance is merely a {\b QCPItemAnchor}, and a valid pointer of type QCPItemPosition* if it actually is a {\b QCPItemPosition} (which is a subclass of {\b QCPItemAnchor}).\par
This safe downcast functionality could also be achieved with a dynamic_cast. However, {\b QCustomPlot} avoids dynamic_cast to work with projects that don't have RTTI support enabled (e.g. -fno-rtti flag with gcc compiler). \par
}{
Reimplementa {\b QCPItemAnchor} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAACJE \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3496 \{ return this; \}\par
}
}
{\xe \v type\:QCPItemPosition}
{\xe \v QCPItemPosition\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPItemPosition::PositionType} * QCPItemPosition::type () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACPZ}
{\bkmkend AAAAAAACPZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Returns the current position type.\par
If different types were set for X and Y ({\b setTypeX}, {\b setTypeY}), this method returns the type of the X coordinate. In that case rather use {\i {\b typeX()}}  and {\i {\b typeY()}} .\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Veja também:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid {\b setType} \par
}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3460 \{ return typeX(); \}\par
}
}
{\xe \v typeX\:QCPItemPosition}
{\xe \v QCPItemPosition\:typeX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b PositionType} QCPItemPosition::typeX () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACQA}
{\bkmkend AAAAAAACQA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3461 \{ return mPositionTypeX; \}\par
}
}
{\xe \v typeY\:QCPItemPosition}
{\xe \v QCPItemPosition\:typeY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b PositionType} QCPItemPosition::typeY () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACQB}
{\bkmkend AAAAAAACQB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3462 \{ return mPositionTypeY; \}\par
}
}
{\xe \v value\:QCPItemPosition}
{\xe \v QCPItemPosition\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPItemPosition::value () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACQC}
{\bkmkend AAAAAAACQC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3467 \{ return mValue; \}\par
}
}
{\xe \v valueAxis\:QCPItemPosition}
{\xe \v QCPItemPosition\:valueAxis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAxis}* QCPItemPosition::valueAxis () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACQD}
{\bkmkend AAAAAAACQD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  3470 \{ return mValueAxis.data(); \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v mAnchorId\:QCPItemPosition}
{\xe \v QCPItemPosition\:mAnchorId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int QCPItemAnchor::mAnchorId{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJH}
{\bkmkend AAAAAAACJH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mAxisRect\:QCPItemPosition}
{\xe \v QCPItemPosition\:mAxisRect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPointer<{\b QCPAxisRect}> QCPItemPosition::mAxisRect{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQE}
{\bkmkend AAAAAAACQE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mChildrenX\:QCPItemPosition}
{\xe \v QCPItemPosition\:mChildrenX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QSet<{\b QCPItemPosition}*> QCPItemAnchor::mChildrenX{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJI}
{\bkmkend AAAAAAACJI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mChildrenY\:QCPItemPosition}
{\xe \v QCPItemPosition\:mChildrenY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QSet<{\b QCPItemPosition}*> QCPItemAnchor::mChildrenY{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJJ}
{\bkmkend AAAAAAACJJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mKey\:QCPItemPosition}
{\xe \v QCPItemPosition\:mKey}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPItemPosition::mKey{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQF}
{\bkmkend AAAAAAACQF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mKeyAxis\:QCPItemPosition}
{\xe \v QCPItemPosition\:mKeyAxis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPointer<{\b QCPAxis}> QCPItemPosition::mKeyAxis{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQG}
{\bkmkend AAAAAAACQG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mName\:QCPItemPosition}
{\xe \v QCPItemPosition\:mName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString QCPItemAnchor::mName{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJK}
{\bkmkend AAAAAAACJK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mParentAnchorX\:QCPItemPosition}
{\xe \v QCPItemPosition\:mParentAnchorX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPItemAnchor}* QCPItemPosition::mParentAnchorX{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQH}
{\bkmkend AAAAAAACQH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mParentAnchorY\:QCPItemPosition}
{\xe \v QCPItemPosition\:mParentAnchorY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPItemAnchor} * QCPItemPosition::mParentAnchorY{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQI}
{\bkmkend AAAAAAACQI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mParentItem\:QCPItemPosition}
{\xe \v QCPItemPosition\:mParentItem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCPAbstractItem}* QCPItemAnchor::mParentItem{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJL}
{\bkmkend AAAAAAACJL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mParentPlot\:QCPItemPosition}
{\xe \v QCPItemPosition\:mParentPlot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QCustomPlot}* QCPItemAnchor::mParentPlot{\f2 [protected]}, {\f2 [inherited]}}}
\par
{\bkmkstart AAAAAAACJM}
{\bkmkend AAAAAAACJM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mPositionTypeX\:QCPItemPosition}
{\xe \v QCPItemPosition\:mPositionTypeX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b PositionType} QCPItemPosition::mPositionTypeX{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQJ}
{\bkmkend AAAAAAACQJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mPositionTypeY\:QCPItemPosition}
{\xe \v QCPItemPosition\:mPositionTypeY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b PositionType} QCPItemPosition::mPositionTypeY{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQK}
{\bkmkend AAAAAAACQK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mValue\:QCPItemPosition}
{\xe \v QCPItemPosition\:mValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double QCPItemPosition::mValue{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQL}
{\bkmkend AAAAAAACQL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v mValueAxis\:QCPItemPosition}
{\xe \v QCPItemPosition\:mValueAxis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QPointer<{\b QCPAxis}> QCPItemPosition::mValueAxis{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAACQM}
{\bkmkend AAAAAAACQM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documentação para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
{\b qcustomplot.cpp}\par
}}