<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_axis_rect">
<title>QCPAxisRect class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPAxisRect</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_axis_rect__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPAxisRect</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_axis_rect__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Atributos Protegidos</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush mBackgroundBrush</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPixmap mBackgroundPixmap</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPixmap mScaledBackgroundPixmap</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mBackgroundScaled</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::AspectRatioMode mBackgroundScaledMode</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayoutInset * mInsetLayout</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::Orientations mRangeDrag</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::Orientations mRangeZoom</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QPointer&lt; QCPAxis &gt; &gt; mRangeDragHorzAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QPointer&lt; QCPAxis &gt; &gt; mRangeDragVertAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QPointer&lt; QCPAxis &gt; &gt; mRangeZoomHorzAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QPointer&lt; QCPAxis &gt; &gt; mRangeZoomVertAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mRangeZoomFactorHorz</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mRangeZoomFactorVert</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPRange &gt; mDragStartHorzRange</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPRange &gt; mDragStartVertRange</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::AntialiasedElements mAADragBackup</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::AntialiasedElements mNotAADragBackup</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mDragging</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QHash&lt; QCPAxis::AxisType, QList&lt; QCPAxis * &gt; &gt; mAxes</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayout * mParentLayout</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize mMinimumSize</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize mMaximumSize</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>SizeConstraintRect mSizeConstraintRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect mRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect mOuterRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins mMargins</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins mMinimumMargins</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::MarginSides mAutoMargins</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QHash&lt; QCP::MarginSide, QCPMarginGroup * &gt; mMarginGroups</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mVisible</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCustomPlot * mParentPlot</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPLayerable &gt; mParentLayerable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayer * mLayer</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mAntialiased</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_axis_rect_1a60b31dece805462c1b82eea2e69ba042">QCPAxisRect</link> (
<link linkend="class_q_custom_plot">QCustomPlot</link> * parentPlot, bool setupDefaultAxes)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_axis_rect_1a463c44b1856ddbf82eb3f7b582839cd0">~QCPAxisRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPixmap <link linkend="class_q_c_p_axis_rect_1a572deec9c9a4d5987d5c5f78521991e6">background</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush <link linkend="class_q_c_p_axis_rect_1a7d09540e3fef12362d00e6bac92b6453">backgroundBrush</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_axis_rect_1a059ede9a5fdcafb5cef280cd65fe4f3a">backgroundScaled</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::AspectRatioMode <link linkend="class_q_c_p_axis_rect_1a06b98faf54b5491bff780294e423d3ff">backgroundScaledMode</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::Orientations <link linkend="class_q_c_p_axis_rect_1aa3a84c768ad6edd08fd4c5dec176828f">rangeDrag</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::Orientations <link linkend="class_q_c_p_axis_rect_1aa0d8414ef040523f8b2d55f0c0bddbee">rangeZoom</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis">QCPAxis</link> * <link linkend="class_q_c_p_axis_rect_1a6d7c22cfc54fac7a3d6ef80b133a8574">rangeDragAxis</link> (
Qt::Orientation orientation)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis">QCPAxis</link> * <link linkend="class_q_c_p_axis_rect_1a679c63f2b8daccfe6ec5110dce3dd3b6">rangeZoomAxis</link> (
Qt::Orientation orientation)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> * &gt; <link linkend="class_q_c_p_axis_rect_1aae5f99a044ca911685a306f01b7ff941">rangeDragAxes</link> (
Qt::Orientation orientation)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a86aac0f435f209d60dacd22cda10c104">rangeZoomAxes</link> (
Qt::Orientation orientation)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_axis_rect_1ae4e6c4d143aacc88d2d3c56f117c2fe1">rangeZoomFactor</link> (
Qt::Orientation orientation)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground</link> (
const QPixmap &amp; pm)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ac48a2d5d9b7732e73b86605c69c5e4c1">setBackground</link> (
const QPixmap &amp; pm, bool scaled, Qt::AspectRatioMode mode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33">setBackground</link> (
const QBrush &amp; brush)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503">setBackgroundScaled</link> (
bool scaled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305">setBackgroundScaledMode</link> (
Qt::AspectRatioMode mode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418">setRangeDrag</link> (
Qt::Orientations orientations)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31">setRangeZoom</link> (
Qt::Orientations orientations)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">setRangeDragAxes</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * horizontal, <link linkend="class_q_c_p_axis">QCPAxis</link> * vertical)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ab756bc5f129115fa3e8783617292fc1a">setRangeDragAxes</link> (
QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> *&gt; axes)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ab767e659f952fd7cbf61faaf33feefc5">setRangeDragAxes</link> (
QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> *&gt; horizontal, QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> *&gt; vertical)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * horizontal, <link linkend="class_q_c_p_axis">QCPAxis</link> * vertical)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a07a41be4eda0d42abe49475e9fa38b92">setRangeZoomAxes</link> (
QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> *&gt; axes)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ae85a63a856e111def77437812c3acc99">setRangeZoomAxes</link> (
QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> *&gt; horizontal, QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> *&gt; vertical)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac">setRangeZoomFactor</link> (
double horizontalFactor, double verticalFactor)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ae83d187b03fc6fa4f00765ad50cd3fc3">setRangeZoomFactor</link> (
double factor)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_axis_rect_1a85b321acec0f694d8b5fdeafdbff3133">axisCount</link> (
<link linkend="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link> type)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis">QCPAxis</link> * <link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">axis</link> (
<link linkend="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link> type, int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867">axes</link> (
QCPAxis::AxisTypes types)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a11657b8faebe9677180860e8057ede26">axes</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis">QCPAxis</link> * <link linkend="class_q_c_p_axis_rect_1a2dc336092ccc57d44a46194c8a23e4f4">addAxis</link> (
<link linkend="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link> type, <link linkend="class_q_c_p_axis">QCPAxis</link> * axis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc">addAxes</link> (
QCPAxis::AxisTypes types)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa">removeAxis</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * axis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layout_inset">QCPLayoutInset</link> * <link linkend="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10">insetLayout</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a5fc8460564e81dcc2a9343dc8bc1fe67">zoom</link> (
const QRectF &amp; pixelRect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a6a39fb3aea60a8c503bdcb3f0477d2f6">zoom</link> (
const QRectF &amp; pixelRect, const QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> *&gt; &amp; affectedAxes)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4">setupFullAxesBox</link> (
bool connectRanges)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59">plottables</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_graph">QCPGraph</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88">graphs</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba">items</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_axis_rect_1afb4a3de02046b20b9310bdb8fca781c3">left</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_axis_rect_1a3f819d4a1b2193723d1fdafc573eea10">right</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_axis_rect_1a45dbad181cbb9f09d068dbb76c817c95">top</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_axis_rect_1acefdf1abaa8a8ab681e906cc2be9581e">bottom</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_axis_rect_1a204645398a4f9d0b0189385c7c2cfb91">width</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_axis_rect_1acc4377809e79d9a089ab790f39429b0d">height</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize <link linkend="class_q_c_p_axis_rect_1a7a8289346eb612f422c704f8b75cf479">size</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPoint <link linkend="class_q_c_p_axis_rect_1a5a847b3ddeca3abec38d3838fefb0dbd">topLeft</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPoint <link linkend="class_q_c_p_axis_rect_1a7aa221967549ba71b98c465bf8234758">topRight</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPoint <link linkend="class_q_c_p_axis_rect_1ab15d4311d6535ccd7af504dc0e2b98c6">bottomLeft</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPoint <link linkend="class_q_c_p_axis_rect_1a36dac884ec8fa3a3a2f3842ca7b7d32d">bottomRight</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPoint <link linkend="class_q_c_p_axis_rect_1ade3aef874bafcec6dd16174fba44c0b1">center</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1add049d464b9ef2ccdc638adc4ccb4aca">update</link> (
<link linkend="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d">UpdatePhase</link> phase)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QList&lt; <link linkend="class_q_c_p_layout_element">QCPLayoutElement</link> * &gt; <link linkend="class_q_c_p_axis_rect_1a3aee067fd105f2fa8de9eb8024435ac5">elements</link> (
bool recursive)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layout">QCPLayout</link> * <link linkend="class_q_c_p_layout_element_1a4efdcbde9d28f410e5ef166c9d691deb">layout</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect <link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins <link linkend="class_q_c_p_layout_element_1af4ac9450aa2d60863bf3a8ea0c940c9d">margins</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins <link linkend="class_q_c_p_layout_element_1a5eae30e28f28d73fd1c56409c011393e">minimumMargins</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::MarginSides <link linkend="class_q_c_p_layout_element_1a2585bc8c5cc70ee712909751a2fc8909">autoMargins</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize <link linkend="class_q_c_p_layout_element_1a60d4295468a2b57fe91f6f68e20c3993">minimumSize</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize <link linkend="class_q_c_p_layout_element_1afb9503858d4aa0f3b9f1794b084fb40a">maximumSize</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a">SizeConstraintRect</link> <link linkend="class_q_c_p_layout_element_1a66136f121ee3e1c933b748761203cab4">sizeConstraintRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_margin_group">QCPMarginGroup</link> * <link linkend="class_q_c_p_layout_element_1a8af6bcf81e12fe1d6f44490f34522b90">marginGroup</link> (
<link linkend="namespace_q_c_p_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> side)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QHash&lt; <link linkend="namespace_q_c_p_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link>, <link linkend="class_q_c_p_margin_group">QCPMarginGroup</link> * &gt; <link linkend="class_q_c_p_layout_element_1ac8d1139a81a1625860647e307ae2b733">marginGroups</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link> (
const QRect &amp; rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link> (
const QMargins &amp; margins)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673">setMinimumMargins</link> (
const QMargins &amp; margins)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> (
QCP::MarginSides sides)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link> (
const QSize &amp; size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a8e0447614a0bf92de9a7304588c6b96e">setMinimumSize</link> (
int width, int height)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link> (
const QSize &amp; size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a03e0e9c48f230217c529b0819f832d84">setMaximumSize</link> (
int width, int height)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (
<link linkend="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a">SizeConstraintRect</link> constraintRect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d">setMarginGroup</link> (
QCP::MarginSides sides, <link linkend="class_q_c_p_margin_group">QCPMarginGroup</link> * group)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QSize <link linkend="class_q_c_p_layout_element_1a46789036c4fcb190fa374f91321d7c09">minimumOuterSizeHint</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QSize <link linkend="class_q_c_p_layout_element_1ad96efb977a26e360e8a64a4c1e56456d">maximumOuterSizeHint</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_layout_element_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70">visible</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_custom_plot">QCustomPlot</link> * <link linkend="class_q_c_p_layerable_1a473edb813a4c1929d6b6a8fe3ff3faf7">parentPlot</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layerable">QCPLayerable</link> * <link linkend="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858">parentLayerable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layer">QCPLayer</link> * <link linkend="class_q_c_p_layerable_1a5ff4862e8c784c9f5986dbc1533ba2a4">layer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709">antialiased</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">setVisible</link> (
bool on)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT bool <link linkend="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54">setLayer</link> (
<link linkend="class_q_c_p_layer">QCPLayer</link> * layer)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083">setLayer</link> (
const QString &amp; layerName)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581">setAntialiased</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1a4a318008e2b7f881a14c3d97186b31f9">applyDefaultAntialiasingHint</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1af710c50530e370539a4439d6c4db9090">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="class_q_c_p_axis_rect_1ac51055d83f5f414b6d013d3a24b0a941">calculateAutoMargin</link> (
<link linkend="namespace_q_c_p_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> side)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1a575e38ac71a21906dc2d7b3364db2d62">layoutChanged</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link> (
QMouseEvent * event, const QVariant &amp; details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb">mouseMoveEvent</link> (
QMouseEvent * event, const QPointF &amp; startPos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4">mouseReleaseEvent</link> (
QMouseEvent * event, const QPointF &amp; startPos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262">wheelEvent</link> (
QWheelEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1ab49d338d1ce74b476fcead5b32cf06dc">drawBackground</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_axis_rect_1a6024ccdc74f5dc0e8a0fe482e5b28a20">updateAxesOffset</link> (
<link linkend="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link> type)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layout_element_1ab4bb5c5a958451f5f153fdce350f13cf">parentPlotInitialized</link> (
<link linkend="class_q_custom_plot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037">QCP::Interaction</link> <link linkend="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d">selectionCategory</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QRect <link linkend="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3">clipRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91">selectEvent</link> (
QMouseEvent * event, bool additive, const QVariant &amp; details, bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee">deselectEvent</link> (
bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> (
QMouseEvent * event, const QVariant &amp; details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc">initializeParentPlot</link> (
<link linkend="class_q_custom_plot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a">setParentLayerable</link> (
<link linkend="class_q_c_p_layerable">QCPLayerable</link> * parentLayerable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4">moveToLayer</link> (
<link linkend="class_q_c_p_layer">QCPLayer</link> * layer, bool prepend)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b">applyAntialiasingHint</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, bool localAntialiased, <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c">QCP::AntialiasedElement</link> overrideElement)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d">UpdatePhase</link> {
<link linkend="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3">upPreparation</link>,
<link linkend="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676">upMargins</link>,
<link linkend="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045">upLayout</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a">SizeConstraintRect</link> {
<link linkend="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c">scrInnerRect</link>,
<link linkend="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d">scrOuterRect</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>Holds multiple axes and arranges them in a rectangular shape. </para>
    </simplesect>
        <simplesect>
            <title>Descrição detalhada</title>

<para>This class represents an axis rect, a rectangular area that is bounded on all sides with an arbitrary number of axes.</para>

<para>Initially <link linkend="class_q_custom_plot">QCustomPlot</link> has one axis rect, accessible via <link linkend="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9">QCustomPlot::axisRect()</link>. However, the layout system allows to have multiple axis rects, e.g. arranged in a grid layout (<link linkend="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f">QCustomPlot::plotLayout</link>).</para>

<para>By default, <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> comes with four axes, at bottom, top, left and right. They can be accessed via <link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">axis</link> by providing the respective axis type (<link linkend="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link>) and index. If you need all axes in the axis rect, use <link linkend="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867">axes</link>. The top and right axes are set to be invisible initially (<link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPAxis::setVisible</link>). To add more axes to a side, use <link linkend="class_q_c_p_axis_rect_1a2dc336092ccc57d44a46194c8a23e4f4">addAxis</link> or <link linkend="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc">addAxes</link>. To remove an axis, use <link linkend="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa">removeAxis</link>.</para>

<para>The axis rect layerable itself only draws a background pixmap or color, if specified (<link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground</link>). It is placed on the &quot;background&quot; layer initially (see <link linkend="class_q_c_p_layer">QCPLayer</link> for an explanation of the <link linkend="class_q_custom_plot">QCustomPlot</link> layer system). The axes that are held by the axis rect can be placed on other layers, independently of the axis rect.</para>

<para>Every axis rect has a child layout of type <link linkend="class_q_c_p_layout_inset">QCPLayoutInset</link>. It is accessible via <link linkend="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10">insetLayout</link> and can be used to have other layout elements (or even other layouts with multiple elements) hovering inside the axis rect.</para>

<para>If an axis rect is clicked and dragged, it processes this by moving certain axis ranges. The behaviour can be controlled with <link linkend="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418">setRangeDrag</link> and <link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">setRangeDragAxes</link>. If the mouse wheel is scrolled while the cursor is on the axis rect, certain axes are scaled. This is controllable via <link linkend="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31">setRangeZoom</link>, <link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link> and <link linkend="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac">setRangeZoomFactor</link>. These interactions are only enabled if <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> contains <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18">QCP::iRangeDrag</link> and <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14">QCP::iRangeZoom</link>.</para>

<para> <informaltable frame='none'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>Overview of the spacings and paddings that define the geometry of an axis. The dashed line on the far left indicates the viewport/widget border.</entry></row></tbody></tgroup></informaltable> </para>
                <para>Definition at line 4583 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="class_q_c_p_axis_rect_1a60b31dece805462c1b82eea2e69ba042">
                <title>QCPAxisRect::QCPAxisRect (QCustomPlot *parentPlot, bool setupDefaultAxes=true)</title> <emphasis></emphasis>
                
<para>Creates a <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> instance and sets default values. An axis is added for each of the four sides, the top and right axes are set invisible initially. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a463c44b1856ddbf82eb3f7b582839cd0">
                <title>QCPAxisRect::~QCPAxisRect ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1a572deec9c9a4d5987d5c5f78521991e6">
                <title>QPixmap QCPAxisRect::background () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1a7d09540e3fef12362d00e6bac92b6453">
                <title>QBrush QCPAxisRect::backgroundBrush () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1a059ede9a5fdcafb5cef280cd65fe4f3a">
                <title>bool QCPAxisRect::backgroundScaled () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1a06b98faf54b5491bff780294e423d3ff">
                <title>Qt::AspectRatioMode QCPAxisRect::backgroundScaledMode () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1aa3a84c768ad6edd08fd4c5dec176828f">
                <title>Qt::Orientations QCPAxisRect::rangeDrag () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1aa0d8414ef040523f8b2d55f0c0bddbee">
                <title>Qt::Orientations QCPAxisRect::rangeZoom () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1a6d7c22cfc54fac7a3d6ef80b133a8574">
                <title>QCPAxis * QCPAxisRect::rangeDragAxis (Qt::Orientation orientation)</title> <emphasis></emphasis>
                
<para>Returns the range drag axis of the <emphasis>orientation</emphasis> provided. If multiple axes were set, returns the first one (use <link linkend="class_q_c_p_axis_rect_1aae5f99a044ca911685a306f01b7ff941">rangeDragAxes</link> to retrieve a list with all set axes).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">setRangeDragAxes</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a679c63f2b8daccfe6ec5110dce3dd3b6">
                <title>QCPAxis * QCPAxisRect::rangeZoomAxis (Qt::Orientation orientation)</title> <emphasis></emphasis>
                
<para>Returns the range zoom axis of the <emphasis>orientation</emphasis> provided. If multiple axes were set, returns the first one (use <link linkend="class_q_c_p_axis_rect_1a86aac0f435f209d60dacd22cda10c104">rangeZoomAxes</link> to retrieve a list with all set axes).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1aae5f99a044ca911685a306f01b7ff941">
                <title>QList&lt; QCPAxis * &gt; QCPAxisRect::rangeDragAxes (Qt::Orientation orientation)</title> <emphasis></emphasis>
                
<para>Returns all range drag axes of the <emphasis>orientation</emphasis> provided.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a679c63f2b8daccfe6ec5110dce3dd3b6">rangeZoomAxis</link>, <link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a86aac0f435f209d60dacd22cda10c104">
                <title>QList&lt; QCPAxis * &gt; QCPAxisRect::rangeZoomAxes (Qt::Orientation orientation)</title> <emphasis></emphasis>
                
<para>Returns all range zoom axes of the <emphasis>orientation</emphasis> provided.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a6d7c22cfc54fac7a3d6ef80b133a8574">rangeDragAxis</link>, <link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">setRangeDragAxes</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ae4e6c4d143aacc88d2d3c56f117c2fe1">
                <title>double QCPAxisRect::rangeZoomFactor (Qt::Orientation orientation)</title> <emphasis></emphasis>
                
<para>Returns the range zoom factor of the <emphasis>orientation</emphasis> provided.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac">setRangeZoomFactor</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">
                <title>void QCPAxisRect::setBackground (const QPixmap &amp;pm)</title> <emphasis></emphasis>
                
<para>Sets <emphasis>pm</emphasis> as the axis background pixmap. The axis background pixmap will be drawn inside the axis rect. Since axis rects place themselves on the &quot;background&quot; layer by default, the axis rect backgrounds are usually drawn below everything else.</para>

<para>For cases where the provided pixmap doesn&apos;t have the same size as the axis rect, scaling can be enabled with <link linkend="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503">setBackgroundScaled</link> and the scaling mode (i.e. whether and how the aspect ratio is preserved) can be set with <link linkend="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305">setBackgroundScaledMode</link>. To set all these options in one call, consider using the overloaded version of this function.</para>

<para>Below the pixmap, the axis rect may be optionally filled with a brush, if specified with <link linkend="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33">setBackground(const QBrush &amp;brush)</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503">setBackgroundScaled</link>, <link linkend="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305">setBackgroundScaledMode</link>, <link linkend="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33">setBackground(const QBrush &amp;brush)</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ac48a2d5d9b7732e73b86605c69c5e4c1">
                <title>void QCPAxisRect::setBackground (const QPixmap &amp;pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRatioByExpanding)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Allows setting the background pixmap of the axis rect, whether it shall be scaled and how it shall be scaled in one call.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground(const QPixmap &amp;pm)</link>, <link linkend="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503">setBackgroundScaled</link>, <link linkend="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305">setBackgroundScaledMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a22a22b8668735438dc06f9a55fe46b33">
                <title>void QCPAxisRect::setBackground (const QBrush &amp;brush)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Sets <emphasis>brush</emphasis> as the background brush. The axis rect background will be filled with this brush. Since axis rects place themselves on the &quot;background&quot; layer by default, the axis rect backgrounds are usually drawn below everything else.</para>

<para>The brush will be drawn before (under) any background pixmap, which may be specified with <link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground(const QPixmap &amp;pm)</link>.</para>

<para>To disable drawing of a background brush, set <emphasis>brush</emphasis> to Qt::NoBrush.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground(const QPixmap &amp;pm)</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503">
                <title>void QCPAxisRect::setBackgroundScaled (bool scaled)</title> <emphasis></emphasis>
                
<para>Sets whether the axis background pixmap shall be scaled to fit the axis rect or not. If <emphasis>scaled</emphasis> is set to true, you may control whether and how the aspect ratio of the original pixmap is preserved with <link linkend="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305">setBackgroundScaledMode</link>.</para>

<para>Note that the scaled version of the original pixmap is buffered, so there is no performance penalty on replots. (Except when the axis rect dimensions are changed continuously.)</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground</link>, <link linkend="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305">setBackgroundScaledMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a5ef77ea829c9de7ba248e473f48f7305">
                <title>void QCPAxisRect::setBackgroundScaledMode (Qt::AspectRatioMode mode)</title> <emphasis></emphasis>
                
<para>If scaling of the axis background pixmap is enabled (<link linkend="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503">setBackgroundScaled</link>), use this function to define whether and how the aspect ratio of the original pixmap passed to <link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground</link> is preserved. <formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1af615ab5e52b8e0a9a0eff415b6559db5">setBackground</link>, <link linkend="class_q_c_p_axis_rect_1ae6d36c3e0e968ffb991170a018e7b503">setBackgroundScaled</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418">
                <title>void QCPAxisRect::setRangeDrag (Qt::Orientations orientations)</title> <emphasis></emphasis>
                
<para>Sets which axis orientation may be range dragged by the user with mouse interaction. What orientation corresponds to which specific axis can be set with <link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">setRangeDragAxes(QCPAxis *horizontal, QCPAxis *vertical)</link>. By default, the horizontal axis is the bottom axis (xAxis) and the vertical axis is the left axis (yAxis).</para>

<para>To disable range dragging entirely, pass 0 as <emphasis>orientations</emphasis> or remove <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18">QCP::iRangeDrag</link> from <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link>. To enable range dragging for both directions, pass <computeroutput>Qt::Horizontal | Qt::Vertical</computeroutput> as <emphasis>orientations</emphasis>.</para>

<para>In addition to setting <emphasis>orientations</emphasis> to a non-zero value, make sure <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> contains <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18">QCP::iRangeDrag</link> to enable the range dragging interaction.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31">setRangeZoom</link>, <link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">setRangeDragAxes</link>, <link linkend="class_q_custom_plot_1a775bdcb6329d44701aeaa6135b0e5265">QCustomPlot::setNoAntialiasingOnDrag</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31">
                <title>void QCPAxisRect::setRangeZoom (Qt::Orientations orientations)</title> <emphasis></emphasis>
                
<para>Sets which axis orientation may be zoomed by the user with the mouse wheel. What orientation corresponds to which specific axis can be set with <link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link>(<link linkend="class_q_c_p_axis">QCPAxis</link> *horizontal, <link linkend="class_q_c_p_axis">QCPAxis</link> *vertical). By default, the horizontal axis is the bottom axis (xAxis) and the vertical axis is the left axis (yAxis).</para>

<para>To disable range zooming entirely, pass 0 as <emphasis>orientations</emphasis> or remove <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14">QCP::iRangeZoom</link> from <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link>. To enable range zooming for both directions, pass <computeroutput>Qt::Horizontal | Qt::Vertical</computeroutput> as <emphasis>orientations</emphasis>.</para>

<para>In addition to setting <emphasis>orientations</emphasis> to a non-zero value, make sure <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> contains <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14">QCP::iRangeZoom</link> to enable the range zooming interaction.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac">setRangeZoomFactor</link>, <link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link>, <link linkend="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418">setRangeDrag</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">
                <title>void QCPAxisRect::setRangeDragAxes (QCPAxis *horizontal, QCPAxis *vertical)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Sets the axes whose range will be dragged when <link linkend="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418">setRangeDrag</link> enables mouse range dragging on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget. Pass 0 if no axis shall be dragged in the respective orientation.</para>

<para>Use the overload taking a list of axes, if multiple axes (more than one per orientation) shall react to dragging interactions.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ab756bc5f129115fa3e8783617292fc1a">
                <title>void QCPAxisRect::setRangeDragAxes (QList&lt; QCPAxis *&gt; axes)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>This method allows to set up multiple axes to react to horizontal and vertical dragging. The drag orientation that the respective axis will react to is deduced from its orientation (<link linkend="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e">QCPAxis::orientation</link>).</para>

<para>In the unusual case that you wish to e.g. drag a vertically oriented axis with a horizontal drag motion, use the overload taking two separate lists for horizontal and vertical dragging. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ab767e659f952fd7cbf61faaf33feefc5">
                <title>void QCPAxisRect::setRangeDragAxes (QList&lt; QCPAxis *&gt; horizontal, QList&lt; QCPAxis *&gt; vertical)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>This method allows to set multiple axes up to react to horizontal and vertical dragging, and define specifically which axis reacts to which drag orientation (irrespective of the axis orientation). </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">
                <title>void QCPAxisRect::setRangeZoomAxes (QCPAxis *horizontal, QCPAxis *vertical)</title> <emphasis></emphasis>
                
<para>Sets the axes whose range will be zoomed when <link linkend="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31">setRangeZoom</link> enables mouse wheel zooming on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget. Pass 0 if no axis shall be zoomed in the respective orientation.</para>

<para>The two axes can be zoomed with different strengths, when different factors are passed to <link linkend="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac">setRangeZoomFactor(double horizontalFactor, double verticalFactor)</link>.</para>

<para>Use the overload taking a list of axes, if multiple axes (more than one per orientation) shall react to zooming interactions.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">setRangeDragAxes</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a07a41be4eda0d42abe49475e9fa38b92">
                <title>void QCPAxisRect::setRangeZoomAxes (QList&lt; QCPAxis *&gt; axes)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>This method allows to set up multiple axes to react to horizontal and vertical range zooming. The zoom orientation that the respective axis will react to is deduced from its orientation (<link linkend="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e">QCPAxis::orientation</link>).</para>

<para>In the unusual case that you wish to e.g. zoom a vertically oriented axis with a horizontal zoom interaction, use the overload taking two separate lists for horizontal and vertical zooming. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ae85a63a856e111def77437812c3acc99">
                <title>void QCPAxisRect::setRangeZoomAxes (QList&lt; QCPAxis *&gt; horizontal, QList&lt; QCPAxis *&gt; vertical)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>This method allows to set multiple axes up to react to horizontal and vertical zooming, and define specifically which axis reacts to which zoom orientation (irrespective of the axis orientation). </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a895d7ac745ea614e04056244b3c138ac">
                <title>void QCPAxisRect::setRangeZoomFactor (double horizontalFactor, double verticalFactor)</title> <emphasis></emphasis>
                
<para>Sets how strong one rotation step of the mouse wheel zooms, when range zoom was activated with <link linkend="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31">setRangeZoom</link>. The two parameters <emphasis>horizontalFactor</emphasis> and <emphasis>verticalFactor</emphasis> provide a way to let the horizontal axis zoom at different rates than the vertical axis. Which axis is horizontal and which is vertical, can be set with <link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">setRangeZoomAxes</link>.</para>

<para>When the zoom factor is greater than one, scrolling the mouse wheel backwards (towards the user) will zoom in (make the currently visible range smaller). For zoom factors smaller than one, the same scrolling direction will zoom out. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ae83d187b03fc6fa4f00765ad50cd3fc3">
                <title>void QCPAxisRect::setRangeZoomFactor (double factor)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Sets both the horizontal and vertical zoom <emphasis>factor</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a85b321acec0f694d8b5fdeafdbff3133">
                <title>int QCPAxisRect::axisCount (QCPAxis::AxisType type) const</title> <emphasis></emphasis>
                
<para>Returns the number of axes on the axis rect side specified with <emphasis>type</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">axis</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">
                <title>QCPAxis * QCPAxisRect::axis (QCPAxis::AxisType type, int index=0) const</title> <emphasis></emphasis>
                
<para>Returns the axis with the given <emphasis>index</emphasis> on the axis rect side specified with <emphasis>type</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a85b321acec0f694d8b5fdeafdbff3133">axisCount</link>, <link linkend="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867">axes</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a8db4722cb93e9c4a6f0d91150c200867">
                <title>QList&lt; QCPAxis * &gt; QCPAxisRect::axes (QCPAxis::AxisTypes types) const</title> <emphasis></emphasis>
                
<para>Returns all axes on the axis rect sides specified with <emphasis>types</emphasis>.</para>

<para><emphasis>types</emphasis> may be a single <link linkend="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link> or an <computeroutput>or</computeroutput>-combination, to get the axes of multiple sides.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">axis</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a11657b8faebe9677180860e8057ede26">
                <title>QList&lt; QCPAxis * &gt; QCPAxisRect::axes () const</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Returns all axes of this axis rect. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a2dc336092ccc57d44a46194c8a23e4f4">
                <title>QCPAxis * QCPAxisRect::addAxis (QCPAxis::AxisType type, QCPAxis *axis=0)</title> <emphasis></emphasis>
                
<para>Adds a new axis to the axis rect side specified with <emphasis>type</emphasis>, and returns it. If <emphasis>axis</emphasis> is 0, a new <link linkend="class_q_c_p_axis">QCPAxis</link> instance is created internally. <link linkend="class_q_custom_plot">QCustomPlot</link> owns the returned axis, so if you want to remove an axis, use <link linkend="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa">removeAxis</link> instead of deleting it manually.</para>

<para>You may inject <link linkend="class_q_c_p_axis">QCPAxis</link> instances (or subclasses of <link linkend="class_q_c_p_axis">QCPAxis</link>) by setting <emphasis>axis</emphasis> to an axis that was previously created outside <link linkend="class_q_custom_plot">QCustomPlot</link>. It is important to note that <link linkend="class_q_custom_plot">QCustomPlot</link> takes ownership of the axis, so you may not delete it afterwards. Further, the <emphasis>axis</emphasis> must have been created with this axis rect as parent and with the same axis type as specified in <emphasis>type</emphasis>. If this is not the case, a debug output is generated, the axis is not added, and the method returns 0.</para>

<para>This method can not be used to move <emphasis>axis</emphasis> between axis rects. The same <emphasis>axis</emphasis> instance must not be added multiple times to the same or different axis rects.</para>

<para>If an axis rect side already contains one or more axes, the lower and upper endings of the new axis (<link linkend="class_q_c_p_axis_1a08af1c72db9ae4dc8cb8a973d44405ab">QCPAxis::setLowerEnding</link>, <link linkend="class_q_c_p_axis_1a69119b892fc306f651763596685aa377">QCPAxis::setUpperEnding</link>) are set to <link linkend="class_q_c_p_line_ending_1a5ef16e6876b4b74959c7261d8d4c2cd5a126c390f0c359fcd8df1fc5e38d26d5b">QCPLineEnding::esHalfBar</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc">addAxes</link>, <link linkend="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4">setupFullAxesBox</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a792e1f3d9cb1591fca135bb0de9b81fc">
                <title>QList&lt; QCPAxis * &gt; QCPAxisRect::addAxes (QCPAxis::AxisTypes types)</title> <emphasis></emphasis>
                
<para>Adds a new axis with <link linkend="class_q_c_p_axis_rect_1a2dc336092ccc57d44a46194c8a23e4f4">addAxis</link> to each axis rect side specified in <emphasis>types</emphasis>. This may be an <computeroutput>or</computeroutput>-combination of <link linkend="class_q_c_p_axis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link>, so axes can be added to multiple sides at once.</para>

<para>Returns a list of the added axes.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a2dc336092ccc57d44a46194c8a23e4f4">addAxis</link>, <link linkend="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4">setupFullAxesBox</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a03c39cd9704f0d36fb6cf980cdddcbaa">
                <title>bool QCPAxisRect::removeAxis (QCPAxis *axis)</title> <emphasis></emphasis>
                
<para>Removes the specified <emphasis>axis</emphasis> from the axis rect and deletes it.</para>

<para>Returns true on success, i.e. if <emphasis>axis</emphasis> was a valid axis in this axis rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a2dc336092ccc57d44a46194c8a23e4f4">addAxis</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10">
                <title>QCPLayoutInset * QCPAxisRect::insetLayout () const</title> <emphasis></emphasis>
                
<para>Returns the inset layout of this axis rect. It can be used to place other layout elements (or even layouts with multiple other elements) inside/on top of an axis rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_inset">QCPLayoutInset</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a5fc8460564e81dcc2a9343dc8bc1fe67">
                <title>void QCPAxisRect::zoom (const QRectF &amp;pixelRect)</title> <emphasis></emphasis>
                
<para>Zooms in (or out) to the passed rectangular region <emphasis>pixelRect</emphasis>, given in pixel coordinates.</para>

<para>All axes of this axis rect will have their range zoomed accordingly. If you only wish to zoom specific axes, use the overloaded version of this method.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb">QCustomPlot::setSelectionRectMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a6a39fb3aea60a8c503bdcb3f0477d2f6">
                <title>void QCPAxisRect::zoom (const QRectF &amp;pixelRect, const QList&lt; QCPAxis *&gt; &amp;affectedAxes)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Zooms in (or out) to the passed rectangular region <emphasis>pixelRect</emphasis>, given in pixel coordinates.</para>

<para>Only the axes passed in <emphasis>affectedAxes</emphasis> will have their ranges zoomed accordingly.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb">QCustomPlot::setSelectionRectMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4">
                <title>void QCPAxisRect::setupFullAxesBox (bool connectRanges=false)</title> <emphasis></emphasis>
                
<para>Convenience function to create an axis on each side that doesn&apos;t have any axes yet and set their visibility to true. Further, the top/right axes are assigned the following properties of the bottom/left axes:</para>

<para><itemizedlist>
<listitem>
<para>range (<link linkend="class_q_c_p_axis_1aebdfea5d44c3a0ad2b4700cd4d25b641">QCPAxis::setRange</link>) </para>
</listitem>
<listitem>
<para>range reversed (<link linkend="class_q_c_p_axis_1a2172fdb196b1a0dc3f40992fcad8e9e1">QCPAxis::setRangeReversed</link>) </para>
</listitem>
<listitem>
<para>scale type (<link linkend="class_q_c_p_axis_1adef29cae617af4f519f6c40d1a866ca6">QCPAxis::setScaleType</link>) </para>
</listitem>
<listitem>
<para>tick visibility (<link linkend="class_q_c_p_axis_1ac891409315bc379e3b1abdb162c1a011">QCPAxis::setTicks</link>) </para>
</listitem>
<listitem>
<para>number format (<link linkend="class_q_c_p_axis_1ae585a54dc2aac662e90a2ca82f002590">QCPAxis::setNumberFormat</link>) </para>
</listitem>
<listitem>
<para>number precision (<link linkend="class_q_c_p_axis_1a21dc8023ad7500382ad9574b48137e63">QCPAxis::setNumberPrecision</link>) </para>
</listitem>
<listitem>
<para>tick count of ticker (<link linkend="class_q_c_p_axis_ticker_1a47752abba8293e6dc18491501ae34008">QCPAxisTicker::setTickCount</link>) </para>
</listitem>
<listitem>
<para>tick origin of ticker (<link linkend="class_q_c_p_axis_ticker_1ab509c7e500293bf66a8409f0d7c23943">QCPAxisTicker::setTickOrigin</link>)</para>
</listitem>
</itemizedlist>
Tick label visibility (<link linkend="class_q_c_p_axis_1a04ba16e1f6f78d70f938519576ed32c8">QCPAxis::setTickLabels</link>) of the right and top axes are set to false.</para>

<para>If <emphasis>connectRanges</emphasis> is true, the <link linkend="class_q_c_p_axis_1a0894084e4c16a1736534c4095746f910">rangeChanged</link> signals of the bottom and left axes are connected to the <link linkend="class_q_c_p_axis_1aebdfea5d44c3a0ad2b4700cd4d25b641">QCPAxis::setRange</link> slots of the top and right axes. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59">
                <title>QList&lt; QCPAbstractPlottable * &gt; QCPAxisRect::plottables () const</title> <emphasis></emphasis>
                
<para>Returns a list of all the plottables that are associated with this axis rect.</para>

<para>A plottable is considered associated with an axis rect if its key or value axis (or both) is in this axis rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88">graphs</link>, <link linkend="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba">items</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88">
                <title>QList&lt; QCPGraph * &gt; QCPAxisRect::graphs () const</title> <emphasis></emphasis>
                
<para>Returns a list of all the graphs that are associated with this axis rect.</para>

<para>A graph is considered associated with an axis rect if its key or value axis (or both) is in this axis rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59">plottables</link>, <link linkend="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba">items</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a03c113a2175448300ee8f944e24776ba">
                <title>QList&lt; QCPAbstractItem * &gt; QCPAxisRect::items () const</title> <emphasis></emphasis>
                
<para>Returns a list of all the items that are associated with this axis rect.</para>

<para>An item is considered associated with an axis rect if any of its positions has key or value axis set to an axis that is in this axis rect, or if any of its positions has <link linkend="class_q_c_p_item_position_1a0cd9b326fb324710169e92e8ca0041c2">QCPItemPosition::setAxisRect</link> set to the axis rect, or if the clip axis rect (<link linkend="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347">QCPAbstractItem::setClipAxisRect</link>) is set to this axis rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a587d073a97b27bc7293fab4b2774ad59">plottables</link>, <link linkend="class_q_c_p_axis_rect_1a2d9ded3eca97be1fcb5867949391bb88">graphs</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1afb4a3de02046b20b9310bdb8fca781c3">
                <title>int QCPAxisRect::left () const</title> <emphasis></emphasis>
                
<para>Returns the pixel position of the left border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a3f819d4a1b2193723d1fdafc573eea10">
                <title>int QCPAxisRect::right () const</title> <emphasis></emphasis>
                
<para>Returns the pixel position of the right border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a45dbad181cbb9f09d068dbb76c817c95">
                <title>int QCPAxisRect::top () const</title> <emphasis></emphasis>
                
<para>Returns the pixel position of the top border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1acefdf1abaa8a8ab681e906cc2be9581e">
                <title>int QCPAxisRect::bottom () const</title> <emphasis></emphasis>
                
<para>Returns the pixel position of the bottom border of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a204645398a4f9d0b0189385c7c2cfb91">
                <title>int QCPAxisRect::width () const</title> <emphasis></emphasis>
                
<para>Returns the pixel width of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1acc4377809e79d9a089ab790f39429b0d">
                <title>int QCPAxisRect::height () const</title> <emphasis></emphasis>
                
<para>Returns the pixel height of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a7a8289346eb612f422c704f8b75cf479">
                <title>QSize QCPAxisRect::size () const</title> <emphasis></emphasis>
                
<para>Returns the pixel size of this axis rect. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a5a847b3ddeca3abec38d3838fefb0dbd">
                <title>QPoint QCPAxisRect::topLeft () const</title> <emphasis></emphasis>
                
<para>Returns the top left corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a7aa221967549ba71b98c465bf8234758">
                <title>QPoint QCPAxisRect::topRight () const</title> <emphasis></emphasis>
                
<para>Returns the top right corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ab15d4311d6535ccd7af504dc0e2b98c6">
                <title>QPoint QCPAxisRect::bottomLeft () const</title> <emphasis></emphasis>
                
<para>Returns the bottom left corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a36dac884ec8fa3a3a2f3842ca7b7d32d">
                <title>QPoint QCPAxisRect::bottomRight () const</title> <emphasis></emphasis>
                
<para>Returns the bottom right corner of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ade3aef874bafcec6dd16174fba44c0b1">
                <title>QPoint QCPAxisRect::center () const</title> <emphasis></emphasis>
                
<para>Returns the center of this axis rect in pixels. Margins are not taken into account here, so the returned value is with respect to the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1add049d464b9ef2ccdc638adc4ccb4aca">
                <title>void QCPAxisRect::update (UpdatePhase phase) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This method is called automatically upon replot and doesn&apos;t need to be called by users of <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link>.</para>

<para>Calls the base class implementation to update the margins (see <link linkend="class_q_c_p_layout_element_1a929c2ec62e0e0e1d8418eaa802e2af9b">QCPLayoutElement::update</link>), and finally passes the <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> to the inset layout (<link linkend="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10">insetLayout</link>) and calls its QCPInsetLayout::update function.</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a3aee067fd105f2fa8de9eb8024435ac5">
                <title>QList&lt; QCPLayoutElement * &gt; QCPAxisRect::elements (bool recursive) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns a list of all child elements in this layout element. If <emphasis>recursive</emphasis> is true, all sub-child elements are included in the list, too.</para>

<para><formalpara><title>Aviso: </title>

<para>There may be entries with value 0 in the returned list. (For example, <link linkend="class_q_c_p_layout_grid">QCPLayoutGrid</link> may have empty cells which yield 0 at the respective index.) </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a4efdcbde9d28f410e5ef166c9d691deb">
                <title>QCPLayout * QCPLayoutElement::layout () const</title> <emphasis></emphasis>
                
<para>Returns the parent layout of this layout element. </para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">
                <title>QRect QCPLayoutElement::rect () const</title> <emphasis></emphasis>
                
<para>Returns the inner rect of this layout element. The inner rect is the outer rect (<link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>, <link linkend="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link>) shrinked by the margins (<link linkend="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>, <link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>).</para>

<para>In some cases, the area between outer and inner rect is left blank. In other cases the margin area is used to display peripheral graphics while the main content is in the inner rect. This is where automatic margin calculation becomes interesting because it allows the layout element to adapt the margins to the peripheral graphics it wants to draw. For example, <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> draws the axis labels and tick labels in the margin area, thus needs to adjust the margins (if <link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> is enabled) according to the space required by the labels of the axes.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">
                <title>QRect QCPLayoutElement::outerRect () const</title> <emphasis></emphasis>
                
<para>Returns the outer rect of this layout element. The outer rect is the inner rect expanded by the margins (<link linkend="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>, <link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>). The outer rect is used (and set via <link linkend="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link>) by the parent <link linkend="class_q_c_p_layout">QCPLayout</link> to control the size of this layout element.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1af4ac9450aa2d60863bf3a8ea0c940c9d">
                <title>QMargins QCPLayoutElement::margins () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1a5eae30e28f28d73fd1c56409c011393e">
                <title>QMargins QCPLayoutElement::minimumMargins () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1a2585bc8c5cc70ee712909751a2fc8909">
                <title>QCP::MarginSides QCPLayoutElement::autoMargins () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1a60d4295468a2b57fe91f6f68e20c3993">
                <title>QSize QCPLayoutElement::minimumSize () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1afb9503858d4aa0f3b9f1794b084fb40a">
                <title>QSize QCPLayoutElement::maximumSize () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1a66136f121ee3e1c933b748761203cab4">
                <title>SizeConstraintRect QCPLayoutElement::sizeConstraintRect () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1a8af6bcf81e12fe1d6f44490f34522b90">
                <title>QCPMarginGroup* QCPLayoutElement::marginGroup (QCP::MarginSide side) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1ac8d1139a81a1625860647e307ae2b733">
                <title>QHash&lt;QCP::MarginSide, QCPMarginGroup*&gt; QCPLayoutElement::marginGroups () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f">
                <title>void QCPLayoutElement::setOuterRect (const QRect &amp;rect)</title> <emphasis></emphasis>
                
<para>Sets the outer rect of this layout element. If the layout element is inside a layout, the layout sets the position and size of this layout element using this function.</para>

<para>Calling this function externally has no effect, since the layout will overwrite any changes to the outer rect upon the next replot.</para>

<para>The layout element will adapt its inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> by applying the margins inward to the outer rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf">
                <title>void QCPLayoutElement::setMargins (const QMargins &amp;margins)</title> <emphasis></emphasis>
                
<para>Sets the margins of this layout element. If <link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> is disabled for some or all sides, this function is used to manually set the margin on those sides. Sides that are still set to be handled automatically are ignored and may have any value in <emphasis>margins</emphasis>.</para>

<para>The margin is the distance between the outer rect (controlled by the parent layout via <link linkend="class_q_c_p_layout_element_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link>) and the inner <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> (which usually contains the main content of this layout element).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673">
                <title>void QCPLayoutElement::setMinimumMargins (const QMargins &amp;margins)</title> <emphasis></emphasis>
                
<para>If <link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> is enabled on some or all margins, this function is used to provide minimum values for those margins.</para>

<para>The minimum values are not enforced on margin sides that were set to be under manual control via <link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">
                <title>void QCPLayoutElement::setAutoMargins (QCP::MarginSides sides)</title> <emphasis></emphasis>
                
<para>Sets on which sides the margin shall be calculated automatically. If a side is calculated automatically, a minimum margin value may be provided with <link linkend="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673">setMinimumMargins</link>. If a side is set to be controlled manually, the value may be specified with <link linkend="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>.</para>

<para>Margin sides that are under automatic control may participate in a <link linkend="class_q_c_p_margin_group">QCPMarginGroup</link> (see <link linkend="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d">setMarginGroup</link>), to synchronize (align) it with other layout elements in the plot.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1a0a8a17abc16b7923159fcc7608f94673">setMinimumMargins</link>, <link linkend="class_q_c_p_layout_element_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>, <link linkend="namespace_q_c_p_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b">
                <title>void QCPLayoutElement::setMinimumSize (const QSize &amp;size)</title> <emphasis></emphasis>
                
<para>Sets the minimum size of this layout element. A parent layout tries to respect the <emphasis>size</emphasis> here by changing row/column sizes in the layout accordingly.</para>

<para>If the parent layout size is not sufficient to satisfy all minimum size constraints of its child layout elements, the layout may set a size that is actually smaller than <emphasis>size</emphasis>. <link linkend="class_q_custom_plot">QCustomPlot</link> propagates the layout&apos;s size constraints to the outside by setting its own minimum QWidget size accordingly, so violations of <emphasis>size</emphasis> should be exceptions.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a8e0447614a0bf92de9a7304588c6b96e">
                <title>void QCPLayoutElement::setMinimumSize (int width, int height)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Sets the minimum size of this layout element.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95">
                <title>void QCPLayoutElement::setMaximumSize (const QSize &amp;size)</title> <emphasis></emphasis>
                
<para>Sets the maximum size of this layout element. A parent layout tries to respect the <emphasis>size</emphasis> here by changing row/column sizes in the layout accordingly.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a03e0e9c48f230217c529b0819f832d84">
                <title>void QCPLayoutElement::setMaximumSize (int width, int height)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Sets the maximum size of this layout element.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f">
                <title>void QCPLayoutElement::setSizeConstraintRect (SizeConstraintRect constraintRect)</title> <emphasis></emphasis>
                
<para>Sets to which rect of a layout element the size constraints apply. Size constraints can be set via <link linkend="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link> and <link linkend="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link>.</para>

<para>The outer rect (<link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) includes the margins (e.g. in the case of a <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> the axis labels), whereas the inner rect (<link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>) does not.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link>, <link linkend="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a516e56f76b6bc100e8e71d329866847d">
                <title>void QCPLayoutElement::setMarginGroup (QCP::MarginSides sides, QCPMarginGroup *group)</title> <emphasis></emphasis>
                
<para>Sets the margin <emphasis>group</emphasis> of the specified margin <emphasis>sides</emphasis>.</para>

<para>Margin groups allow synchronizing specified margins across layout elements, see the documentation of <link linkend="class_q_c_p_margin_group">QCPMarginGroup</link>.</para>

<para>To unset the margin group of <emphasis>sides</emphasis>, set <emphasis>group</emphasis> to 0.</para>

<para>Note that margin groups only work for margin sides that are set to automatic (<link linkend="class_q_c_p_layout_element_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="namespace_q_c_p_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1a46789036c4fcb190fa374f91321d7c09">
                <title>QSize QCPLayoutElement::minimumOuterSizeHint () const</title> <emphasis></emphasis>
                
<para>Returns the suggested minimum size this layout element (the <link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) may be compressed to, if no manual minimum size is set.</para>

<para>if a minimum size (<link linkend="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link>) was not set manually, parent layouts use the returned size (usually indirectly through <link linkend="class_q_c_p_layout_1a864fddc84721f186663faf3683f1fa70">QCPLayout::getFinalMinimumOuterSize</link>) to determine the minimum allowed size of this layout element.</para>

<para>A manual minimum size is considered set if it is non-zero.</para>

<para>The default implementation simply returns the sum of the horizontal margins for the width and the sum of the vertical margins for the height. Reimplementations may use their detailed knowledge about the layout element&apos;s content to provide size hints. </para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1ad96efb977a26e360e8a64a4c1e56456d">
                <title>QSize QCPLayoutElement::maximumOuterSizeHint () const</title> <emphasis></emphasis>
                
<para>Returns the suggested maximum size this layout element (the <link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) may be expanded to, if no manual maximum size is set.</para>

<para>if a maximum size (<link linkend="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link>) was not set manually, parent layouts use the returned size (usually indirectly through <link linkend="class_q_c_p_layout_1add49fd6843821a6126914b837ed52e22">QCPLayout::getFinalMaximumOuterSize</link>) to determine the maximum allowed size of this layout element.</para>

<para>A manual maximum size is considered set if it is smaller than Qt&apos;s <computeroutput>QWIDGETSIZE_MAX</computeroutput>.</para>

<para>The default implementation simply returns <computeroutput>QWIDGETSIZE_MAX</computeroutput> for both width and height, implying no suggested maximum size. Reimplementations may use their detailed knowledge about the layout element&apos;s content to provide size hints. </para>

            </section>
            <section xml:id="class_q_c_p_layout_element_1ae97f483cccedadbf18ea4525ef240ee4">
                <title>double QCPLayoutElement::selectTest (const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Layout elements are sensitive to events inside their outer rect. If <emphasis>pos</emphasis> is within the outer rect, this method returns a value corresponding to 0.99 times the parent plot&apos;s selection tolerance. However, layout elements are not selectable by default. So if <emphasis>onlySelectable</emphasis> is true, -1.0 is returned.</para>

<para>See <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">QCPLayerable::selectTest</link> for a general explanation of this virtual method.</para>

<para><link linkend="class_q_c_p_layout_element">QCPLayoutElement</link> subclasses may reimplement this method to provide more specific selection test behaviour. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70">
                <title>bool QCPLayerable::visible () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a473edb813a4c1929d6b6a8fe3ff3faf7">
                <title>QCustomPlot* QCPLayerable::parentPlot () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858">
                <title>QCPLayerable * QCPLayerable::parentLayerable () const</title> <emphasis></emphasis>
                
<para>Returns the parent layerable of this layerable. The parent layerable is used to provide visibility hierarchies in conjunction with the method <link linkend="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link>. This way, layerables only get drawn if their parent layerables are visible, too.</para>

<para>Note that a parent layerable is not necessarily also the QObject parent for memory management. Further, a layerable doesn&apos;t always have a parent layerable, so this function may return 0.</para>

<para>A parent layerable is set implicitly when placed inside layout elements and doesn&apos;t need to be set manually by the user. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a5ff4862e8c784c9f5986dbc1533ba2a4">
                <title>QCPLayer* QCPLayerable::layer () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709">
                <title>bool QCPLayerable::antialiased () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">
                <title>void QCPLayerable::setVisible (bool on)</title> <emphasis></emphasis>
                
<para>Sets the visibility of this layerable object. If an object is not visible, it will not be drawn on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface, and user interaction with it (e.g. click and selection) is not possible. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54">
                <title>bool QCPLayerable::setLayer (QCPLayer *layer)</title> <emphasis></emphasis>
                
<para>Sets the <emphasis>layer</emphasis> of this layerable object. The object will be placed on top of the other objects already on <emphasis>layer</emphasis>.</para>

<para>If <emphasis>layer</emphasis> is 0, this layerable will not be on any layer and thus not appear in the plot (or interact/receive events).</para>

<para>Returns true if the layer of this layerable was successfully changed to <emphasis>layer</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083">
                <title>bool QCPLayerable::setLayer (const QString &amp;layerName)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados. Sets the layer of this layerable object by name</para>

<para>Returns true on success, i.e. if <emphasis>layerName</emphasis> is a valid layer name. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581">
                <title>void QCPLayerable::setAntialiased (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether this object will be drawn antialiased or not.</para>

<para>Note that antialiasing settings may be overridden by <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> and <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">QCustomPlot::setNotAntialiasedElements</link>. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">
                <title>bool QCPLayerable::realVisibility () const</title> <emphasis></emphasis>
                
<para>Returns whether this layerable is visible, taking the visibility of the layerable parent and the visibility of this layerable&apos;s layer into account. This is the method that is consulted to decide whether a layerable shall be drawn or not.</para>

<para>If this layerable has a direct layerable parent (usually set via hierarchies implemented in subclasses, like in the case of <link linkend="class_q_c_p_layout_element">QCPLayoutElement</link>), this function returns true only if this layerable has its visibility set to true and the parent layerable&apos;s <link linkend="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link> returns true. </para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a4a318008e2b7f881a14c3d97186b31f9">
                <title>void QCPAxisRect::applyDefaultAntialiasingHint (QCPPainter *painter) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1af710c50530e370539a4439d6c4db9090">
                <title>void QCPAxisRect::draw (QCPPainter *painter) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1ac51055d83f5f414b6d013d3a24b0a941">
                <title>int QCPAxisRect::calculateAutoMargin (QCP::MarginSide side) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1a575e38ac71a21906dc2d7b3364db2d62">
                <title>void QCPAxisRect::layoutChanged () Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">
                <title>void QCPAxisRect::mousePressEvent (QMouseEvent *event, const QVariant &amp;details) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user presses a mouse button while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="class_q_c_p_layout_element_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <link linkend="class_q_c_p_layout_element_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link>. For example, One-dimensional plottables like <link linkend="class_q_c_p_graph">QCPGraph</link> or <link linkend="class_q_c_p_bars">QCPBars</link> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <link linkend="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f">QCPAxis::SelectablePart</link> in the case of axes).</para>

<para><link linkend="class_q_custom_plot">QCustomPlot</link> uses an event propagation system that works the same as Qt&apos;s system. If your layerable doesn&apos;t reimplement the <link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link> or explicitly calls <computeroutput>event-&gt;ignore()</computeroutput> in its reimplementation, the event will be propagated to the next layerable in the stacking order.</para>

<para>Once a layerable has accepted the <link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link>, it is considered the mouse grabber and will receive all following calls to <link linkend="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb">mouseMoveEvent</link> or <link linkend="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4">mouseReleaseEvent</link> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>

<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb">mouseMoveEvent</link>, <link linkend="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb">
                <title>void QCPAxisRect::mouseMoveEvent (QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding <link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link> occured, that started the mouse interaction.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link>, <link linkend="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4">
                <title>void QCPAxisRect::mouseReleaseEvent (QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding <link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link> occured, that started the mouse interaction.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link>, <link linkend="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb">mouseMoveEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1a93eeaa0c127d6d6fe8171b2455080262">
                <title>void QCPAxisRect::wheelEvent (QWheelEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="class_q_c_p_layout_element_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>.</para>

<para>The <computeroutput>event-&gt;delta()</computeroutput> indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making <computeroutput>event-&gt;delta()</computeroutput> larger. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_axis_rect_1aa9a7c807eaa4666870ac94aa6abc4dde">mousePressEvent</link>, <link linkend="class_q_c_p_axis_rect_1a9cd27ad8c5cfb49aefd9dbb30def4beb">mouseMoveEvent</link>, <link linkend="class_q_c_p_axis_rect_1a6c89b988d3a0b93c0878f0ebdb5037f4">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_axis_rect_1ab49d338d1ce74b476fcead5b32cf06dc">
                <title>void QCPAxisRect::drawBackground (QCPPainter *painter)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_axis_rect_1a6024ccdc74f5dc0e8a0fe482e5b28a20">
                <title>void QCPAxisRect::updateAxesOffset (QCPAxis::AxisType type)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1ab4bb5c5a958451f5f153fdce350f13cf">
                <title>void QCPLayoutElement::parentPlotInitialized (QCustomPlot *parentPlot) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a908c9edda761886f33893be326dab77d">
                <title>QCP::Interaction QCPLayerable::selectionCategory () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1acbcfc9ecc75433747b1978a77b1864b3">
                <title>QRect QCPLayerable::clipRect () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91">
                <title>void QCPLayerable::selectEvent (QMouseEvent *event, bool additive, const QVariant &amp;details, bool *selectionStateChanged)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1ae546370644a5551c76af739afc008bee">
                <title>void QCPLayerable::deselectEvent (bool *selectionStateChanged)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">
                <title>void QCPLayerable::mouseDoubleClickEvent (QMouseEvent *event, const QVariant &amp;details)</title> <emphasis></emphasis>
                
<para>This event gets called when the user presses the mouse button a second time in a double-click, while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>.</para>

<para>The <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> is called instead of the second <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>. So in the case of a double-click, the event succession is <emphasis>pressEvent &#8211; releaseEvent &#8211; doubleClickEvent &#8211; releaseEvent</emphasis>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>. For example, One-dimensional plottables like <link linkend="class_q_c_p_graph">QCPGraph</link> or <link linkend="class_q_c_p_bars">QCPBars</link> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <link linkend="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f">QCPAxis::SelectablePart</link> in the case of axes).</para>

<para>Similarly to <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, once a layerable has accepted the <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, it is considered the mouse grabber and will receive all following calls to <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link> and <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>

<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link>, <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc">
                <title>void QCPLayerable::initializeParentPlot (QCustomPlot *parentPlot)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a">
                <title>void QCPLayerable::setParentLayerable (QCPLayerable *parentLayerable)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4">
                <title>bool QCPLayerable::moveToLayer (QCPLayer *layer, bool prepend)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b">
                <title>void QCPLayerable::applyAntialiasingHint (QCPPainter *painter, bool localAntialiased, QCP::AntialiasedElement overrideElement) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374d">
               <title>enum UpdatePhase </title>
               
<para>Defines the phases of the update process, that happens just before a replot. At each phase, <link linkend="class_q_c_p_layout_element_1a929c2ec62e0e0e1d8418eaa802e2af9b">update</link> is called with the according UpdatePhase value. </para>

               <formalpara>
                    <title>Enumeradores:</title>
                    <variablelist>
                        <varlistentry xml:id="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3">
                            <term>upPreparation</term>
                            <listitem>
                                <para>Phase used for any type of preparation that needs to be done before margin calculation and layout.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676">
                            <term>upMargins</term>
                            <listitem>
                                <para>Phase in which the margins are calculated and set.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_layout_element_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045">
                            <term>upLayout</term>
                            <listitem>
                                <para>Final phase in which the layout system places the rects of the elements.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 1197 of file qcustomplot.h
                    <computeroutput><literallayout>
{
upPreparation, 
upMargins, 
upLayout, 
}UpdatePhase;
                    </literallayout></computeroutput>
                </para>
            </section>
            <section xml:id="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2a">
               <title>enum SizeConstraintRect </title>
               
<para>Defines to which rect of a layout element the size constraints that can be set via <link linkend="class_q_c_p_layout_element_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link> and <link linkend="class_q_c_p_layout_element_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link> apply. The outer rect (<link linkend="class_q_c_p_layout_element_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) includes the margins (e.g. in the case of a <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> the axis labels), whereas the inner rect (<link linkend="class_q_c_p_layout_element_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>) does not.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_layout_element_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumeradores:</title>
                    <variablelist>
                        <varlistentry xml:id="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c">
                            <term>scrInnerRect</term>
                            <listitem>
                                <para>Minimum/Maximum size constraints apply to inner rect.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_layout_element_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d">
                            <term>scrOuterRect</term>
                            <listitem>
                                <para>Minimum/Maximum size constraints apply to outer rect, thus include layout element margins.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 1211 of file qcustomplot.h
                    <computeroutput><literallayout>
{
scrInnerRect, 
scrOuterRect, 
}SizeConstraintRect;
                    </literallayout></computeroutput>
                </para>
            </section>
</section>
