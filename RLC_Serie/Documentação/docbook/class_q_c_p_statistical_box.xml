<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_statistical_box">
<title>QCPStatisticalBox class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPStatisticalBox</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_statistical_box__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPStatisticalBox</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_statistical_box__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Protected Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mWidth</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mWhiskerWidth</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen mWhiskerPen</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen mWhiskerBarPen</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mWhiskerAntialiased</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen mMedianPen</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPScatterStyle mOutlierStyle</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_statistical_box_1a75c2b3e7fcd0741cc981693a2ba63b27">QCPStatisticalBox</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * keyAxis, <link linkend="class_q_c_p_axis">QCPAxis</link> * valueAxis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSharedPointer&lt; <link linkend="qcustomplot_8h_1a8b773c0c35f8f924701ced6e9915e4c7">QCPStatisticalBoxDataContainer</link> &gt; <link linkend="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc">data</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_statistical_box_1ae589b7481dec6ef8e50ebb6492d296f1">width</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_statistical_box_1aacfa6686c7cf4af18794ec02354f4782">whiskerWidth</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen <link linkend="class_q_c_p_statistical_box_1a67e5144f07645fe25c31001c460817fc">whiskerPen</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen <link linkend="class_q_c_p_statistical_box_1a47ed9ad9d2ca65640319a2f071982ed4">whiskerBarPen</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_statistical_box_1a2015a8ea758cf65a41d4a6c52a20696b">whiskerAntialiased</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen <link linkend="class_q_c_p_statistical_box_1af767bc7b6b477d005535314b35aca683">medianPen</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_scatter_style">QCPScatterStyle</link> <link linkend="class_q_c_p_statistical_box_1aef92e38fcb8e5041a44c2e01886e3b66">outlierStyle</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f">setData</link> (
QSharedPointer&lt; <link linkend="qcustomplot_8h_1a8b773c0c35f8f924701ced6e9915e4c7">QCPStatisticalBoxDataContainer</link> &gt; data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a4ae198e66243d8cc57ad8893c37bf9d4">setData</link> (
const QVector&lt; double &gt; &amp; keys, const QVector&lt; double &gt; &amp; minimum, const QVector&lt; double &gt; &amp; lowerQuartile, const QVector&lt; double &gt; &amp; median, const QVector&lt; double &gt; &amp; upperQuartile, const QVector&lt; double &gt; &amp; maximum, bool alreadySorted)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14">setWidth</link> (
double width)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd">setWhiskerWidth</link> (
double width)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b">setWhiskerPen</link> (
const QPen &amp; pen)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f">setWhiskerBarPen</link> (
const QPen &amp; pen)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a61bcd458fba002f72304d11319051843">setWhiskerAntialiased</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a7260ac55b669f5d0a74f16d5ca84c52c">setMedianPen</link> (
const QPen &amp; pen)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1ad5241943422eb8e58360a97e99ad6aa7">setOutlierStyle</link> (
const <link linkend="class_q_c_p_scatter_style">QCPScatterStyle</link> &amp; style)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478">addData</link> (
const QVector&lt; double &gt; &amp; keys, const QVector&lt; double &gt; &amp; minimum, const QVector&lt; double &gt; &amp; lowerQuartile, const QVector&lt; double &gt; &amp; median, const QVector&lt; double &gt; &amp; upperQuartile, const QVector&lt; double &gt; &amp; maximum, bool alreadySorted)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e">addData</link> (
double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector&lt; double &gt; &amp; outliers)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> <link linkend="class_q_c_p_statistical_box_1a42febad6ad5e924a151434cc434b4ffc">selectTestRect</link> (
const QRectF &amp; rect, bool onlySelectable)<para><emphasis>\copybrief QCPPlottableInterface1D::selectTestRect</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_statistical_box_1a1607fa92f829c631107c20ccb2d70a6d">selectTest</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_statistical_box_1a77d2d13301dfe60c13adfaa17fc1802f">getKeyRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_statistical_box_1ab3388a21d0c2e86fbc0cba9c06ceb49b">getValueRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain, const <link linkend="class_q_c_p_range">QCPRange</link> &amp; inKeyRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_statistical_box_1afcff35fa79728cfe10e80e0702014fea">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_statistical_box_1ad286c63a79c21d5231a4b6c6fdbb914f">drawLegendIcon</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, const QRectF &amp; rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_statistical_box_1a02dc6b561be8203d460d7263da74b8a9">drawStatisticalBox</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, <link linkend="class_q_c_p_data_container_1ae40a91f5cb0bcac61d727427449b7d15">QCPStatisticalBoxDataContainer::const_iterator</link> it, const <link linkend="class_q_c_p_scatter_style">QCPScatterStyle</link> &amp; outlierStyle)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_statistical_box_1a1c24e86384a4aced91d5216fce86b175">getVisibleDataBounds</link> (
<link linkend="class_q_c_p_data_container_1ae40a91f5cb0bcac61d727427449b7d15">QCPStatisticalBoxDataContainer::const_iterator</link> &amp; begin, <link linkend="class_q_c_p_data_container_1ae40a91f5cb0bcac61d727427449b7d15">QCPStatisticalBoxDataContainer::const_iterator</link> &amp; end)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRectF <link linkend="class_q_c_p_statistical_box_1aa44482bf991ceca74602294dd9977243">getQuartileBox</link> (
<link linkend="class_q_c_p_data_container_1ae40a91f5cb0bcac61d727427449b7d15">QCPStatisticalBoxDataContainer::const_iterator</link> it)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QVector&lt; QLineF &gt; <link linkend="class_q_c_p_statistical_box_1a233c28f8c2464ed104a4d580eedd4c64">getWhiskerBackboneLines</link> (
<link linkend="class_q_c_p_data_container_1ae40a91f5cb0bcac61d727427449b7d15">QCPStatisticalBoxDataContainer::const_iterator</link> it)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QVector&lt; QLineF &gt; <link linkend="class_q_c_p_statistical_box_1af478f6e8a5e9ca2f1bbac10a6b73319a">getWhiskerBarLines</link> (
<link linkend="class_q_c_p_data_container_1ae40a91f5cb0bcac61d727427449b7d15">QCPStatisticalBoxDataContainer::const_iterator</link> it)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>A plottable representing a single statistical box in a plot. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para></para>

<para>To plot data, assign it with the <link linkend="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f">setData</link> or <link linkend="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478">addData</link> functions. Alternatively, you can also access and modify the data via the <link linkend="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc">data</link> method, which returns a pointer to the internal <link linkend="qcustomplot_8h_1a8b773c0c35f8f924701ced6e9915e4c7">QCPStatisticalBoxDataContainer</link>.</para>

<para>Additionally each data point can itself have a list of outliers, drawn as scatter points at the key coordinate of the respective statistical box data point. They can either be set by using the respective <link linkend="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e">addData</link> method or accessing the individual data points through <link linkend="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc">data</link>, and setting the <computeroutput>QVector&lt;double&gt; outliers</computeroutput> of the data points directly.</para>
<section xml:id="class_q_c_p_statistical_box_1qcpstatisticalbox-appearance">
<title>Changing the appearance</title>

<para>The appearance of each data point box, ranging from the lower to the upper quartile, is controlled via <link linkend="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7">setPen</link> and <link linkend="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74">setBrush</link>. You may change the width of the boxes with <link linkend="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14">setWidth</link> in plot coordinates.</para>

<para>Each data point&apos;s visual representation also consists of two whiskers. Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum. The appearance of the whiskers can be modified with: <link linkend="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b">setWhiskerPen</link>, <link linkend="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f">setWhiskerBarPen</link>, <link linkend="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd">setWhiskerWidth</link>. The whisker width is the width of the bar perpendicular to the whisker at the top (for maximum) and bottom (for minimum). If the whisker pen is changed, make sure to set the <computeroutput>capStyle</computeroutput> to <computeroutput>Qt::FlatCap</computeroutput>. Otherwise the backbone line might exceed the whisker bars by a few pixels due to the pen cap being not perfectly flat.</para>

<para>The median indicator line inside the box has its own pen, <link linkend="class_q_c_p_statistical_box_1a7260ac55b669f5d0a74f16d5ca84c52c">setMedianPen</link>.</para>

<para>The outlier data points are drawn as normal scatter points. Their look can be controlled with <link linkend="class_q_c_p_statistical_box_1ad5241943422eb8e58360a97e99ad6aa7">setOutlierStyle</link></para>
</section>
<section xml:id="class_q_c_p_statistical_box_1qcpstatisticalbox-usage">
<title>Usage</title>

<para>Like all data representing objects in <link linkend="class_q_custom_plot">QCustomPlot</link>, the <link linkend="class_q_c_p_statistical_box">QCPStatisticalBox</link> is a plottable (<link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link>). So the plottable-interface of <link linkend="class_q_custom_plot">QCustomPlot</link> applies (<link linkend="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f">QCustomPlot::plottable</link>, <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">QCustomPlot::removePlottable</link>, etc.)</para>

<para>Usually, you first create an instance: <literallayout><computeroutput></computeroutput></literallayout>which registers it with the <link linkend="class_q_custom_plot">QCustomPlot</link> instance of the passed axes. Note that this <link linkend="class_q_custom_plot">QCustomPlot</link> instance takes ownership of the plottable, so do not delete it manually but use <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">QCustomPlot::removePlottable()</link> instead. The newly created plottable can be modified, e.g.: <literallayout><computeroutput></computeroutput></literallayout></para>
</section>
                <para>Definition at line 5603 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_q_c_p_statistical_box_1a75c2b3e7fcd0741cc981693a2ba63b27">
                <title>QCPStatisticalBox::QCPStatisticalBox (QCPAxis *keyAxis, QCPAxis *valueAxis)</title> <emphasis></emphasis>
                
<para>Constructs a statistical box which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <link linkend="class_q_custom_plot">QCustomPlot</link> instance and not have the same orientation. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>

<para>The created <link linkend="class_q_c_p_statistical_box">QCPStatisticalBox</link> is automatically registered with the <link linkend="class_q_custom_plot">QCustomPlot</link> instance inferred from <emphasis>keyAxis</emphasis>. This <link linkend="class_q_custom_plot">QCustomPlot</link> instance takes ownership of the <link linkend="class_q_c_p_statistical_box">QCPStatisticalBox</link>, so do not delete it manually but use <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">QCustomPlot::removePlottable()</link> instead. </para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc">
                <title>QSharedPointer&lt; QCPStatisticalBoxDataContainer &gt; QCPStatisticalBox::data () const</title> <emphasis></emphasis>
                
<para>Returns a shared pointer to the internal data storage of type <link linkend="qcustomplot_8h_1a8b773c0c35f8f924701ced6e9915e4c7">QCPStatisticalBoxDataContainer</link>. You may use it to directly manipulate the data, which may be more convenient and faster than using the regular <link linkend="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f">setData</link> or <link linkend="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478">addData</link> methods. </para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1ae589b7481dec6ef8e50ebb6492d296f1">
                <title>double QCPStatisticalBox::width () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1aacfa6686c7cf4af18794ec02354f4782">
                <title>double QCPStatisticalBox::whiskerWidth () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1a67e5144f07645fe25c31001c460817fc">
                <title>QPen QCPStatisticalBox::whiskerPen () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1a47ed9ad9d2ca65640319a2f071982ed4">
                <title>QPen QCPStatisticalBox::whiskerBarPen () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1a2015a8ea758cf65a41d4a6c52a20696b">
                <title>bool QCPStatisticalBox::whiskerAntialiased () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1af767bc7b6b477d005535314b35aca683">
                <title>QPen QCPStatisticalBox::medianPen () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1aef92e38fcb8e5041a44c2e01886e3b66">
                <title>QCPScatterStyle QCPStatisticalBox::outlierStyle () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1a08a6da55822bad825ee25a8069b9b52f">
                <title>void QCPStatisticalBox::setData (QSharedPointer&lt; QCPStatisticalBoxDataContainer &gt; data)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Replaces the current data container with the provided <emphasis>data</emphasis> container.</para>

<para>Since a QSharedPointer is used, multiple QCPStatisticalBoxes may share the same data container safely. Modifying the data in the container will then affect all statistical boxes that share the container. Sharing can be achieved by simply exchanging the data containers wrapped in shared pointers: <literallayout><computeroutput></computeroutput></literallayout> If you do not wish to share containers, but create a copy from an existing container, rather use the <link linkend="class_q_c_p_data_container_1ae7042bd534fc3ce7befa2ce3f790b5bf">QCPDataContainer&lt;DataType&gt;::set</link> method on the statistical box data container directly: <literallayout><computeroutput></computeroutput></literallayout> <formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a4ae198e66243d8cc57ad8893c37bf9d4">
                <title>void QCPStatisticalBox::setData (const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;minimum, const QVector&lt; double &gt; &amp;lowerQuartile, const QVector&lt; double &gt; &amp;median, const QVector&lt; double &gt; &amp;upperQuartile, const QVector&lt; double &gt; &amp;maximum, bool alreadySorted=false)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Replaces the current data with the provided points in <emphasis>keys</emphasis>, <emphasis>minimum</emphasis>, <emphasis>lowerQuartile</emphasis>, <emphasis>median</emphasis>, <emphasis>upperQuartile</emphasis> and <emphasis>maximum</emphasis>. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>

<para>If you can guarantee that the passed data points are sorted by <emphasis>keys</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14">
                <title>void QCPStatisticalBox::setWidth (double width)</title> <emphasis></emphasis>
                
<para>Sets the width of the boxes in key coordinates.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd">setWhiskerWidth</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1adf378812446bd66f34d1f7f293d991cd">
                <title>void QCPStatisticalBox::setWhiskerWidth (double width)</title> <emphasis></emphasis>
                
<para>Sets the width of the whiskers in key coordinates.</para>

<para>Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_statistical_box_1a0b62775bd67301b1eba5c785f2b26f14">setWidth</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b">
                <title>void QCPStatisticalBox::setWhiskerPen (const QPen &amp;pen)</title> <emphasis></emphasis>
                
<para>Sets the pen used for drawing the whisker backbone.</para>

<para>Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum.</para>

<para>Make sure to set the <computeroutput>capStyle</computeroutput> of the passed <emphasis>pen</emphasis> to <computeroutput>Qt::FlatCap</computeroutput>. Otherwise the backbone line might exceed the whisker bars by a few pixels due to the pen cap being not perfectly flat.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f">setWhiskerBarPen</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1aa8d3e503897788e1abf68dc74b5f147f">
                <title>void QCPStatisticalBox::setWhiskerBarPen (const QPen &amp;pen)</title> <emphasis></emphasis>
                
<para>Sets the pen used for drawing the whisker bars. Those are the lines parallel to the key axis at each end of the whisker backbone.</para>

<para>Whiskers are the lines which reach from the upper quartile to the maximum, and from the lower quartile to the minimum.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_statistical_box_1a4a5034cb3b9b040444df05ab1684620b">setWhiskerPen</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a61bcd458fba002f72304d11319051843">
                <title>void QCPStatisticalBox::setWhiskerAntialiased (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether the statistical boxes whiskers are drawn with antialiasing or not.</para>

<para>Note that antialiasing settings may be overridden by <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> and <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">QCustomPlot::setNotAntialiasedElements</link>. </para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a7260ac55b669f5d0a74f16d5ca84c52c">
                <title>void QCPStatisticalBox::setMedianPen (const QPen &amp;pen)</title> <emphasis></emphasis>
                
<para>Sets the pen used for drawing the median indicator line inside the statistical boxes. </para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1ad5241943422eb8e58360a97e99ad6aa7">
                <title>void QCPStatisticalBox::setOutlierStyle (const QCPScatterStyle &amp;style)</title> <emphasis></emphasis>
                
<para>Sets the appearance of the outlier data points.</para>

<para>Outliers can be specified with the method <link linkend="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e">addData(double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector&lt;double&gt; &amp;outliers)</link> </para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a9a8739c5b8291db8fd839e892fc8f478">
                <title>void QCPStatisticalBox::addData (const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;minimum, const QVector&lt; double &gt; &amp;lowerQuartile, const QVector&lt; double &gt; &amp;median, const QVector&lt; double &gt; &amp;upperQuartile, const QVector&lt; double &gt; &amp;maximum, bool alreadySorted=false)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds the provided points in <emphasis>keys</emphasis>, <emphasis>minimum</emphasis>, <emphasis>lowerQuartile</emphasis>, <emphasis>median</emphasis>, <emphasis>upperQuartile</emphasis> and <emphasis>maximum</emphasis> to the current data. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>

<para>If you can guarantee that the passed data points are sorted by <emphasis>keys</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>

<para>Alternatively, you can also access and modify the data directly via the <link linkend="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc">data</link> method, which returns a pointer to the internal data container. </para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a026f2790b530d6f29312254ecb1e7c1e">
                <title>void QCPStatisticalBox::addData (double key, double minimum, double lowerQuartile, double median, double upperQuartile, double maximum, const QVector&lt; double &gt; &amp;outliers=QVector&lt; double &gt;())</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds the provided data point as <emphasis>key</emphasis>, <emphasis>minimum</emphasis>, <emphasis>lowerQuartile</emphasis>, <emphasis>median</emphasis>, <emphasis>upperQuartile</emphasis> and <emphasis>maximum</emphasis> to the current data.</para>

<para>Alternatively, you can also access and modify the data directly via the <link linkend="class_q_c_p_statistical_box_1a728e501413eaf191544014173d52dfbc">data</link> method, which returns a pointer to the internal data container. </para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a42febad6ad5e924a151434cc434b4ffc">
                <title>QCPDataSelection QCPStatisticalBox::selectTestRect (const QRectF &amp;rect, bool onlySelectable) const Q_DECL_OVERRIDE</title> <emphasis>\copybrief QCPPlottableInterface1D::selectTestRect</emphasis>
                
<para>Returns a data selection containing all the data points of this plottable which are contained (or hit by) <emphasis>rect</emphasis>. This is used mainly in the selection rect interaction for data selection (data selection mechanism).</para>

<para>If <emphasis>onlySelectable</emphasis> is true, an empty <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> is returned if this plottable is not selectable (i.e. if <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">QCPAbstractPlottable::setSelectable</link> is <link linkend="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038aa64628e338a2dd1e6f0dc84dec0b63fe">QCP::stNone</link>).</para>

<para><formalpara><title>Note: </title>

<para><emphasis>rect</emphasis> must be a normalized rect (positive or zero width and height). This is especially important when using the rect of <link linkend="class_q_c_p_selection_rect_1a15a43542e1f7b953a44c260b419e6d2c">QCPSelectionRect::accepted</link>, which is not necessarily normalized. Use <computeroutput>QRect::normalized()</computeroutput> when passing a rect which might not be normalized. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a1607fa92f829c631107c20ccb2d70a6d">
                <title>double QCPStatisticalBox::selectTest (const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Implements a point-selection algorithm assuming the data (accessed via the 1D data interface) is point-like. Most subclasses will want to reimplement this method again, to provide a more accurate hit test based on the true data visualization geometry.</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a77d2d13301dfe60c13adfaa17fc1802f">
                <title>QCPRange QCPStatisticalBox::getKeyRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that all data in this plottable span in the key axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_statistical_box_1ab3388a21d0c2e86fbc0cba9c06ceb49b">getValueRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1ab3388a21d0c2e86fbc0cba9c06ceb49b">
                <title>QCPRange QCPStatisticalBox::getValueRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange()) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that the data points in the specified key range (<emphasis>inKeyRange</emphasis>) span in the value axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><link linkend="class_q_c_p_range">QCPRange()</link></computeroutput>), all data points are considered, without any restriction on the keys.</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_statistical_box_1a77d2d13301dfe60c13adfaa17fc1802f">getKeyRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1afcff35fa79728cfe10e80e0702014fea">
                <title>void QCPStatisticalBox::draw (QCPPainter *painter) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1ad286c63a79c21d5231a4b6c6fdbb914f">
                <title>void QCPStatisticalBox::drawLegendIcon (QCPPainter *painter, const QRectF &amp;rect) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1a02dc6b561be8203d460d7263da74b8a9">
                <title>void QCPStatisticalBox::drawStatisticalBox (QCPPainter *painter, QCPStatisticalBoxDataContainer::const_iterator it, const QCPScatterStyle &amp;outlierStyle) const</title> <emphasis></emphasis>
                
<para>Draws the graphical representation of a single statistical box with the data given by the iterator <emphasis>it</emphasis> with the provided <emphasis>painter</emphasis>.</para>

<para>If the statistical box has a set of outlier data points, they are drawn with <emphasis>outlierStyle</emphasis>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_statistical_box_1aa44482bf991ceca74602294dd9977243">getQuartileBox</link>, <link linkend="class_q_c_p_statistical_box_1a233c28f8c2464ed104a4d580eedd4c64">getWhiskerBackboneLines</link>, <link linkend="class_q_c_p_statistical_box_1af478f6e8a5e9ca2f1bbac10a6b73319a">getWhiskerBarLines</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_statistical_box_1a1c24e86384a4aced91d5216fce86b175">
                <title>void QCPStatisticalBox::getVisibleDataBounds (QCPStatisticalBoxDataContainer::const_iterator &amp;begin, QCPStatisticalBoxDataContainer::const_iterator &amp;end) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1aa44482bf991ceca74602294dd9977243">
                <title>QRectF QCPStatisticalBox::getQuartileBox (QCPStatisticalBoxDataContainer::const_iterator it) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1a233c28f8c2464ed104a4d580eedd4c64">
                <title>QVector&lt; QLineF &gt; QCPStatisticalBox::getWhiskerBackboneLines (QCPStatisticalBoxDataContainer::const_iterator it) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_statistical_box_1af478f6e8a5e9ca2f1bbac10a6b73319a">
                <title>QVector&lt; QLineF &gt; QCPStatisticalBox::getWhiskerBarLines (QCPStatisticalBoxDataContainer::const_iterator it) const</title> <emphasis></emphasis>
                
            </section>
</section>
