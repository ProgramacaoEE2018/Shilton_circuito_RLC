<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_error_bars">
<title>QCPErrorBars class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPErrorBars</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_error_bars__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPErrorBars</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_error_bars__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474">ErrorType</link> {
<link linkend="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474a9fca24d20d5376e41be216fc9b08cd21">etKeyError</link>,
<link linkend="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474a5f760fc9c0a98c7f1e93e33bf54e9d83">etValueError</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Protected Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSharedPointer&lt; QCPErrorBarsDataContainer &gt; mDataContainer</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPAbstractPlottable &gt; mDataPlottable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ErrorType mErrorType</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mWhiskerWidth</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mSymbolGap</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_error_bars_1a5cdcc33e5f173780c3d657e96216e5c1">QCPErrorBars</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * keyAxis, <link linkend="class_q_c_p_axis">QCPAxis</link> * valueAxis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_error_bars_1a7468f8c3dc1cb162d86cf392e938a2e3">~QCPErrorBars</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSharedPointer&lt; <link linkend="qcustomplot_8h_1a8c4472a4da738e0ddbf6b03222c39906">QCPErrorBarsDataContainer</link> &gt; <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * <link linkend="class_q_c_p_error_bars_1ad7e5f1229db58d05bb3d8305d2504af8">dataPlottable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474">ErrorType</link> <link linkend="class_q_c_p_error_bars_1a527e7df83c98709cef22a8447fee4f13">errorType</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_error_bars_1ae5a292470366ec92b248753f83b8646e">whiskerWidth</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_error_bars_1a2c969749fa0db565a42b80db9da5f388">symbolGap</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link> (
QSharedPointer&lt; <link linkend="qcustomplot_8h_1a8c4472a4da738e0ddbf6b03222c39906">QCPErrorBarsDataContainer</link> &gt; data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1a2f33d68a7ec163b09017dce3d9d3abcc">setData</link> (
const QVector&lt; double &gt; &amp; error)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1aac0cf070b957c11177e91b02bcb433c8">setData</link> (
const QVector&lt; double &gt; &amp; errorMinus, const QVector&lt; double &gt; &amp; errorPlus)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link> (
<link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * plottable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1af0af493d454a8f3a0908830160680d2b">setErrorType</link> (
<link linkend="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474">ErrorType</link> type)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1ad05f6ff9e46c6047f1cd2459744b7b59">setWhiskerWidth</link> (
double pixels)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1a280ee8d863d8a2630c309701d019b3de">setSymbolGap</link> (
double pixels)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1aae296ad9817b3fa418db284af81cecf8">addData</link> (
const QVector&lt; double &gt; &amp; error)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1a2135cf41d7925a3dcdadd4eb03fd3eb6">addData</link> (
const QVector&lt; double &gt; &amp; errorMinus, const QVector&lt; double &gt; &amp; errorPlus)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1a39ef73b0e61941fc4064fd3a5224c72a">addData</link> (
double error)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1a1833c5de9c2fe2952b977505d9f27cd1">addData</link> (
double errorMinus, double errorPlus)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="class_q_c_p_error_bars_1a18b797c62f2af000b926e52eb46d97c7">dataCount</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_error_bars_1a7cba420078adc523efa59fb8c6ca23e0">dataMainKey</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_error_bars_1a3000a036124880a90c629d124c1cd1e2">dataSortKey</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_error_bars_1ae9f6c79c03147efb1a67742c55386dc8">dataMainValue</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_error_bars_1af71af55d929d832daf32e283b21e1f3e">dataValueRange</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QPointF <link linkend="class_q_c_p_error_bars_1ae79fed6566f1912a97344b20b35faac1">dataPixelPosition</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_q_c_p_error_bars_1af75958b95d9b9c7edfd9851c1d123850">sortKeyIsMainKey</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> <link linkend="class_q_c_p_error_bars_1ad7c727736599dfb173f0952082e1a5b6">selectTestRect</link> (
const QRectF &amp; rect, bool onlySelectable)<para><emphasis>\copybrief QCPPlottableInterface1D::selectTestRect</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="class_q_c_p_error_bars_1a74c57d6abb8eda3c4c31b72d1df9f568">findBegin</link> (
double sortKey, bool expandedRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="class_q_c_p_error_bars_1ad22dd8499c6d45176ad0651751a0b0b0">findEnd</link> (
double sortKey, bool expandedRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_error_bars_1ac1b6675ef43e32547a3cbcf7b7ac46ed">selectTest</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_plottable_interface1_d">QCPPlottableInterface1D</link> * <link linkend="class_q_c_p_error_bars_1a0b6fbf3a943b4241ee485d066cc8562a">interface1D</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_error_bars_1a801e85931372abf2a1034bfb2eac5cd2">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_error_bars_1a20f5d292e66103f26bca00b11ce417b4">drawLegendIcon</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, const QRectF &amp; rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_error_bars_1a6cac828a430d66ac77a167549d01d212">getKeyRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_error_bars_1ab76215a186ae4862235821e028685f26">getValueRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain, const <link linkend="class_q_c_p_range">QCPRange</link> &amp; inKeyRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1abeea5ff0d66732bbfc9b74869d8c552e">getErrorBarLines</link> (
QCPErrorBarsDataContainer::const_iterator it, QVector&lt; QLineF &gt; &amp; backbones, QVector&lt; QLineF &gt; &amp; whiskers)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1aac9ffa98815035d300b2e9a67495ba4c">getVisibleDataBounds</link> (
QCPErrorBarsDataContainer::const_iterator &amp; begin, QCPErrorBarsDataContainer::const_iterator &amp; end, const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; rangeRestriction)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_error_bars_1a8e904076bad643f43af28b95f21c1b88">pointDistance</link> (
const QPointF &amp; pixelPoint, QCPErrorBarsDataContainer::const_iterator &amp; closestData)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_error_bars_1a243e0bb2563fc2e9f08efd77e7175abf">getDataSegments</link> (
QList&lt; <link linkend="class_q_c_p_data_range">QCPDataRange</link> &gt; &amp; selectedSegments, QList&lt; <link linkend="class_q_c_p_data_range">QCPDataRange</link> &gt; &amp; unselectedSegments)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_error_bars_1a5ad9abccb1be3df25485ad7dc21b3b89">errorBarVisible</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_error_bars_1aa9b1642567a0aff8a2f6e0556c563633">rectIntersectsLine</link> (
const QRectF &amp; pixelRect, const QLineF &amp; line)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>A plottable that adds a set of error bars to other plottables. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para></para>

<para>The <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> plottable can be attached to other one-dimensional plottables (e.g. <link linkend="class_q_c_p_graph">QCPGraph</link>, <link linkend="class_q_c_p_curve">QCPCurve</link>, <link linkend="class_q_c_p_bars">QCPBars</link>, etc.) and equips them with error bars.</para>

<para>Use <link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link> to define for which plottable the <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> shall display the error bars. The orientation of the error bars can be controlled with <link linkend="class_q_c_p_error_bars_1af0af493d454a8f3a0908830160680d2b">setErrorType</link>.</para>

<para>By using <link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link>, you can supply the actual error data, either as symmetric error or plus/minus asymmetric errors. <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> only stores the error data. The absolute key/value position of each error bar will be adopted from the configured data plottable. The error data of the <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> are associated one-to-one via their index to the data points of the data plottable. You can directly access and manipulate the error bar data via <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link>.</para>

<para>Set either of the plus/minus errors to NaN (<computeroutput>qQNaN()</computeroutput> or <computeroutput>std::numeric_limits&lt;double&gt;::quiet_NaN()</computeroutput>) to not show the respective error bar on the data point at that index.</para>
<section xml:id="class_q_c_p_error_bars_1qcperrorbars-appearance">
<title>Changing the appearance</title>

<para>The appearance of the error bars is defined by the pen (<link linkend="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7">setPen</link>), and the width of the whiskers (<link linkend="class_q_c_p_error_bars_1ad05f6ff9e46c6047f1cd2459744b7b59">setWhiskerWidth</link>). Further, the error bar backbones may leave a gap around the data point center to prevent that error bars are drawn too close to or even through scatter points. This gap size can be controlled via <link linkend="class_q_c_p_error_bars_1a280ee8d863d8a2630c309701d019b3de">setSymbolGap</link>. </para>
</section>
                <para>Definition at line 5985 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474">
               <title>enum ErrorType </title>
               
<para>Defines in which orientation the error bars shall appear. If your data needs both error dimensions, create two <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> with different <link linkend="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474">ErrorType</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1af0af493d454a8f3a0908830160680d2b">setErrorType</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumerator:</title>
                    <variablelist>
                        <varlistentry xml:id="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474a9fca24d20d5376e41be216fc9b08cd21">
                            <term>etKeyError</term>
                            <listitem>
                                <para>The errors are for the key dimension (bars appear parallel to the key axis)</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_error_bars_1a95f0220f11a72648b96480a85ce26474a5f760fc9c0a98c7f1e93e33bf54e9d83">
                            <term>etValueError</term>
                            <listitem>
                                <para>The errors are for the value dimension (bars appear parallel to the value axis)</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 6002 of file qcustomplot.h
                    <computeroutput><literallayout>
{
etKeyError, 
etValueError, 
}ErrorType;
                    </literallayout></computeroutput>
                </para>
            </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_q_c_p_error_bars_1a5cdcc33e5f173780c3d657e96216e5c1">
                <title>QCPErrorBars::QCPErrorBars (QCPAxis *keyAxis, QCPAxis *valueAxis)</title> <emphasis></emphasis>
                
<para>Constructs an error bars plottable which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <link linkend="class_q_custom_plot">QCustomPlot</link> instance and not have the same orientation. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>

<para>It is also important that the <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> are the same for the error bars plottable and the data plottable that the error bars shall be drawn on (<link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link>).</para>

<para>The created <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> is automatically registered with the <link linkend="class_q_custom_plot">QCustomPlot</link> instance inferred from <emphasis>keyAxis</emphasis>. This <link linkend="class_q_custom_plot">QCustomPlot</link> instance takes ownership of the <link linkend="class_q_c_p_error_bars">QCPErrorBars</link>, so do not delete it manually but use <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">QCustomPlot::removePlottable()</link> instead. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a7468f8c3dc1cb162d86cf392e938a2e3">
                <title>QCPErrorBars::~QCPErrorBars ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">
                <title>QSharedPointer&lt; QCPErrorBarsDataContainer &gt; QCPErrorBars::data () const</title> <emphasis></emphasis>
                
<para>Returns a shared pointer to the internal data storage of type <link linkend="qcustomplot_8h_1a8c4472a4da738e0ddbf6b03222c39906">QCPErrorBarsDataContainer</link>. You may use it to directly manipulate the error values, which may be more convenient and faster than using the regular <link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link> methods. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ad7e5f1229db58d05bb3d8305d2504af8">
                <title>QCPAbstractPlottable* QCPErrorBars::dataPlottable () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a527e7df83c98709cef22a8447fee4f13">
                <title>ErrorType QCPErrorBars::errorType () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1ae5a292470366ec92b248753f83b8646e">
                <title>double QCPErrorBars::whiskerWidth () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a2c969749fa0db565a42b80db9da5f388">
                <title>double QCPErrorBars::symbolGap () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">
                <title>void QCPErrorBars::setData (QSharedPointer&lt; QCPErrorBarsDataContainer &gt; data)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Replaces the current data container with the provided <emphasis>data</emphasis> container.</para>

<para>Since a QSharedPointer is used, multiple <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> instances may share the same data container safely. Modifying the data in the container will then affect all <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> instances that share the container. Sharing can be achieved by simply exchanging the data containers wrapped in shared pointers: <literallayout><computeroutput></computeroutput></literallayout> If you do not wish to share containers, but create a copy from an existing container, assign the data containers directly: <literallayout><computeroutput></computeroutput></literallayout>(This uses different notation compared with other plottables, because the <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> uses a <computeroutput>QVector&lt;QCPErrorBarsData&gt;</computeroutput> as its data container, instead of a <link linkend="class_q_c_p_data_container">QCPDataContainer</link>.)</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1aae296ad9817b3fa418db284af81cecf8">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a2f33d68a7ec163b09017dce3d9d3abcc">
                <title>void QCPErrorBars::setData (const QVector&lt; double &gt; &amp;error)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Sets symmetrical error values as specified in <emphasis>error</emphasis>. The errors will be associated one-to-one by the data point index to the associated data plottable (<link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link>).</para>

<para>You can directly access and manipulate the error bar data via <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1aae296ad9817b3fa418db284af81cecf8">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1aac0cf070b957c11177e91b02bcb433c8">
                <title>void QCPErrorBars::setData (const QVector&lt; double &gt; &amp;errorMinus, const QVector&lt; double &gt; &amp;errorPlus)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Sets asymmetrical errors as specified in <emphasis>errorMinus</emphasis> and <emphasis>errorPlus</emphasis>. The errors will be associated one-to-one by the data point index to the associated data plottable (<link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link>).</para>

<para>You can directly access and manipulate the error bar data via <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1aae296ad9817b3fa418db284af81cecf8">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">
                <title>void QCPErrorBars::setDataPlottable (QCPAbstractPlottable *plottable)</title> <emphasis></emphasis>
                
<para>Sets the data plottable to which the error bars will be applied. The error values specified e.g. via <link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link> will be associated one-to-one by the data point index to the data points of <emphasis>plottable</emphasis>. This means that the error bars will adopt the key/value coordinates of the data point with the same index.</para>

<para>The passed <emphasis>plottable</emphasis> must be a one-dimensional plottable, i.e. it must implement the <link linkend="class_q_c_p_plottable_interface1_d">QCPPlottableInterface1D</link>. Further, it must not be a <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> instance itself. If either of these restrictions is violated, a corresponding qDebug output is generated, and the data plottable of this <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> instance is set to zero.</para>

<para>For proper display, care must also be taken that the key and value axes of the <emphasis>plottable</emphasis> match those configured for this <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> instance. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1af0af493d454a8f3a0908830160680d2b">
                <title>void QCPErrorBars::setErrorType (ErrorType type)</title> <emphasis></emphasis>
                
<para>Sets in which orientation the error bars shall appear on the data points. If your data needs both error dimensions, create two <link linkend="class_q_c_p_error_bars">QCPErrorBars</link> with different <emphasis>type</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ad05f6ff9e46c6047f1cd2459744b7b59">
                <title>void QCPErrorBars::setWhiskerWidth (double pixels)</title> <emphasis></emphasis>
                
<para>Sets the width of the whiskers (the short bars at the end of the actual error bar backbones) to <emphasis>pixels</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a280ee8d863d8a2630c309701d019b3de">
                <title>void QCPErrorBars::setSymbolGap (double pixels)</title> <emphasis></emphasis>
                
<para>Sets the gap diameter around the data points that will be left out when drawing the error bar backbones. This gap prevents that error bars are drawn too close to or even through scatter points. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1aae296ad9817b3fa418db284af81cecf8">
                <title>void QCPErrorBars::addData (const QVector&lt; double &gt; &amp;error)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds symmetrical error values as specified in <emphasis>error</emphasis>. The errors will be associated one-to-one by the data point index to the associated data plottable (<link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link>).</para>

<para>You can directly access and manipulate the error bar data via <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a2135cf41d7925a3dcdadd4eb03fd3eb6">
                <title>void QCPErrorBars::addData (const QVector&lt; double &gt; &amp;errorMinus, const QVector&lt; double &gt; &amp;errorPlus)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds asymmetrical errors as specified in <emphasis>errorMinus</emphasis> and <emphasis>errorPlus</emphasis>. The errors will be associated one-to-one by the data point index to the associated data plottable (<link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link>).</para>

<para>You can directly access and manipulate the error bar data via <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a39ef73b0e61941fc4064fd3a5224c72a">
                <title>void QCPErrorBars::addData (double error)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds a single symmetrical error bar as specified in <emphasis>error</emphasis>. The errors will be associated one-to-one by the data point index to the associated data plottable (<link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link>).</para>

<para>You can directly access and manipulate the error bar data via <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a1833c5de9c2fe2952b977505d9f27cd1">
                <title>void QCPErrorBars::addData (double errorMinus, double errorPlus)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds a single asymmetrical error bar as specified in <emphasis>errorMinus</emphasis> and <emphasis>errorPlus</emphasis>. The errors will be associated one-to-one by the data point index to the associated data plottable (<link linkend="class_q_c_p_error_bars_1aabb42a964cfbf780cd1c79850c7cd989">setDataPlottable</link>).</para>

<para>You can directly access and manipulate the error bar data via <link linkend="class_q_c_p_error_bars_1aeebd1b14f4c3573565efafd514988813">data</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1a92b1980003255f5f7c05407a4d92aabc">setData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a18b797c62f2af000b926e52eb46d97c7">
                <title>int QCPErrorBars::dataCount () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the number of data points of the plottable. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a7cba420078adc523efa59fb8c6ca23e0">
                <title>double QCPErrorBars::dataMainKey (int index) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the main key of the data point at the given <emphasis>index</emphasis>.</para>

<para>What the main key is, is defined by the plottable&apos;s data type. See the <link linkend="class_q_c_p_data_container_1qcpdatacontainer-datatype">QCPDataContainer DataType</link> documentation for details about this naming convention. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a3000a036124880a90c629d124c1cd1e2">
                <title>double QCPErrorBars::dataSortKey (int index) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the sort key of the data point at the given <emphasis>index</emphasis>.</para>

<para>What the sort key is, is defined by the plottable&apos;s data type. See the <link linkend="class_q_c_p_data_container_1qcpdatacontainer-datatype">QCPDataContainer DataType</link> documentation for details about this naming convention. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ae9f6c79c03147efb1a67742c55386dc8">
                <title>double QCPErrorBars::dataMainValue (int index) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the main value of the data point at the given <emphasis>index</emphasis>.</para>

<para>What the main value is, is defined by the plottable&apos;s data type. See the <link linkend="class_q_c_p_data_container_1qcpdatacontainer-datatype">QCPDataContainer DataType</link> documentation for details about this naming convention. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1af71af55d929d832daf32e283b21e1f3e">
                <title>QCPRange QCPErrorBars::dataValueRange (int index) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the value range of the data point at the given <emphasis>index</emphasis>.</para>

<para>What the value range is, is defined by the plottable&apos;s data type. See the <link linkend="class_q_c_p_data_container_1qcpdatacontainer-datatype">QCPDataContainer DataType</link> documentation for details about this naming convention. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ae79fed6566f1912a97344b20b35faac1">
                <title>QPointF QCPErrorBars::dataPixelPosition (int index) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the pixel position on the widget surface at which the data point at the given <emphasis>index</emphasis> appears.</para>

<para>Usually this corresponds to the point of <link linkend="class_q_c_p_error_bars_1a7cba420078adc523efa59fb8c6ca23e0">dataMainKey</link>/<link linkend="class_q_c_p_error_bars_1ae9f6c79c03147efb1a67742c55386dc8">dataMainValue</link>, in pixel coordinates. However, depending on the plottable, this might be a different apparent position than just a coord-to-pixel transform of those values. For example, <link linkend="class_q_c_p_bars">QCPBars</link> apparent data values can be shifted depending on their stacking, bar grouping or configured base value. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1af75958b95d9b9c7edfd9851c1d123850">
                <title>bool QCPErrorBars::sortKeyIsMainKey () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns whether the sort key (<link linkend="class_q_c_p_error_bars_1a3000a036124880a90c629d124c1cd1e2">dataSortKey</link>) is identical to the main key (<link linkend="class_q_c_p_error_bars_1a7cba420078adc523efa59fb8c6ca23e0">dataMainKey</link>).</para>

<para>What the sort and main keys are, is defined by the plottable&apos;s data type. See the <link linkend="class_q_c_p_data_container_1qcpdatacontainer-datatype">QCPDataContainer DataType</link> documentation for details about this naming convention. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ad7c727736599dfb173f0952082e1a5b6">
                <title>QCPDataSelection QCPErrorBars::selectTestRect (const QRectF &amp;rect, bool onlySelectable) const Q_DECL_OVERRIDE</title> <emphasis>\copybrief QCPPlottableInterface1D::selectTestRect</emphasis>
                
<para>Returns a data selection containing all the data points of this plottable which are contained (or hit by) <emphasis>rect</emphasis>. This is used mainly in the selection rect interaction for data selection (data selection mechanism).</para>

<para>If <emphasis>onlySelectable</emphasis> is true, an empty <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> is returned if this plottable is not selectable (i.e. if <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">QCPAbstractPlottable::setSelectable</link> is <link linkend="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038aa64628e338a2dd1e6f0dc84dec0b63fe">QCP::stNone</link>).</para>

<para><formalpara><title>Note: </title>

<para><emphasis>rect</emphasis> must be a normalized rect (positive or zero width and height). This is especially important when using the rect of <link linkend="class_q_c_p_selection_rect_1a15a43542e1f7b953a44c260b419e6d2c">QCPSelectionRect::accepted</link>, which is not necessarily normalized. Use <computeroutput>QRect::normalized()</computeroutput> when passing a rect which might not be normalized. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a74c57d6abb8eda3c4c31b72d1df9f568">
                <title>int QCPErrorBars::findBegin (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the index of the data point with a (sort-)key that is equal to, just below, or just above <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just below <emphasis>sortKey</emphasis> will be considered, otherwise the one just above.</para>

<para>This can be used in conjunction with <link linkend="class_q_c_p_error_bars_1ad22dd8499c6d45176ad0651751a0b0b0">findEnd</link> to iterate over data points within a given key range, including or excluding the bounding data points that are just beyond the specified range.</para>

<para>If <emphasis>expandedRange</emphasis> is true but there are no data points below <emphasis>sortKey</emphasis>, 0 is returned.</para>

<para>If the container is empty, returns 0 (in that case, <link linkend="class_q_c_p_error_bars_1ad22dd8499c6d45176ad0651751a0b0b0">findEnd</link> will also return 0, so a loop using these methods will not iterate over the index 0).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1ad22dd8499c6d45176ad0651751a0b0b0">findEnd</link>, <link linkend="class_q_c_p_data_container_1a2ad8a5399072d99a242d3a6d2d7e278a">QCPDataContainer::findBegin</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ad22dd8499c6d45176ad0651751a0b0b0">
                <title>int QCPErrorBars::findEnd (double sortKey, bool expandedRange=true) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the index one after the data point with a (sort-)key that is equal to, just above, or just below <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just above <emphasis>sortKey</emphasis> will be considered, otherwise the one just below.</para>

<para>This can be used in conjunction with <link linkend="class_q_c_p_error_bars_1a74c57d6abb8eda3c4c31b72d1df9f568">findBegin</link> to iterate over data points within a given key range, including the bounding data points that are just below and above the specified range.</para>

<para>If <emphasis>expandedRange</emphasis> is true but there are no data points above <emphasis>sortKey</emphasis>, the index just above the highest data point is returned.</para>

<para>If the container is empty, returns 0.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_error_bars_1a74c57d6abb8eda3c4c31b72d1df9f568">findBegin</link>, <link linkend="class_q_c_p_data_container_1afb8b8f23cc2b7234a793a25ce79fe48f">QCPDataContainer::findEnd</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ac1b6675ef43e32547a3cbcf7b7ac46ed">
                <title>double QCPErrorBars::selectTest (const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This function is used to decide whether a click hits a layerable object or not.</para>

<para><emphasis>pos</emphasis> is a point in pixel coordinates on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface. This function returns the shortest pixel distance of this point to the object. If the object is either invisible or the distance couldn&apos;t be determined, -1.0 is returned. Further, if <emphasis>onlySelectable</emphasis> is true and the object is not selectable, -1.0 is returned, too.</para>

<para>If the object is represented not by single lines but by an area like a <link linkend="class_q_c_p_item_text">QCPItemText</link> or the bars of a <link linkend="class_q_c_p_bars">QCPBars</link> plottable, a click inside the area should also be considered a hit. In these cases this function thus returns a constant value greater zero but still below the parent plot&apos;s selection tolerance. (typically the selectionTolerance multiplied by 0.99).</para>

<para>Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i.e. closer than 0.99*selectionTolerance).</para>

<para>The actual setting of the selection state is not done by this function. This is handled by the parent <link linkend="class_q_custom_plot">QCustomPlot</link> when the mouseReleaseEvent occurs, and the finally selected object is notified via the <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link>/<link linkend="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e">deselectEvent</link> methods.</para>

<para><emphasis>details</emphasis> is an optional output parameter. Every layerable subclass may place any information in <emphasis>details</emphasis>. This information will be passed to <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link> when the parent <link linkend="class_q_custom_plot">QCustomPlot</link> decides on the basis of this selectTest call, that the object was successfully selected. The subsequent call to <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link> will carry the <emphasis>details</emphasis>. This is useful for multi-part objects (like <link linkend="class_q_c_p_axis">QCPAxis</link>). This way, a possibly complex calculation to decide which part was clicked is only done once in <link linkend="class_q_c_p_error_bars_1ac1b6675ef43e32547a3cbcf7b7ac46ed">selectTest</link>. The result (i.e. the actually clicked part) can then be placed in <emphasis>details</emphasis>. So in the subsequent <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link>, the decision which part was selected doesn&apos;t have to be done a second time for a single selection operation.</para>

<para>You may pass 0 as <emphasis>details</emphasis> to indicate that you are not interested in those selection details.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link>, <link linkend="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e">deselectEvent</link>, <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link>, <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a0b6fbf3a943b4241ee485d066cc8562a">
                <title>virtual QCPPlottableInterface1D* QCPErrorBars::interface1D () Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>If this plottable is a one-dimensional plottable, i.e. it implements the <link linkend="class_q_c_p_plottable_interface1_d">QCPPlottableInterface1D</link>, returns the <emphasis>this</emphasis> pointer with that type. Otherwise (e.g. in the case of a <link linkend="class_q_c_p_color_map">QCPColorMap</link>) returns zero.</para>

<para>You can use this method to gain read access to data coordinates while holding a pointer to the abstract base class only. </para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1a801e85931372abf2a1034bfb2eac5cd2">
                <title>void QCPErrorBars::draw (QCPPainter *painter) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a20f5d292e66103f26bca00b11ce417b4">
                <title>void QCPErrorBars::drawLegendIcon (QCPPainter *painter, const QRectF &amp;rect) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a6cac828a430d66ac77a167549d01d212">
                <title>QCPRange QCPErrorBars::getKeyRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that all data in this plottable span in the key axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_error_bars_1ab76215a186ae4862235821e028685f26">getValueRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1ab76215a186ae4862235821e028685f26">
                <title>QCPRange QCPErrorBars::getValueRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange()) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that the data points in the specified key range (<emphasis>inKeyRange</emphasis>) span in the value axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><link linkend="class_q_c_p_range">QCPRange()</link></computeroutput>), all data points are considered, without any restriction on the keys.</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_error_bars_1a6cac828a430d66ac77a167549d01d212">getKeyRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_error_bars_1abeea5ff0d66732bbfc9b74869d8c552e">
                <title>void QCPErrorBars::getErrorBarLines (QCPErrorBarsDataContainer::const_iterator it, QVector&lt; QLineF &gt; &amp;backbones, QVector&lt; QLineF &gt; &amp;whiskers) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1aac9ffa98815035d300b2e9a67495ba4c">
                <title>void QCPErrorBars::getVisibleDataBounds (QCPErrorBarsDataContainer::const_iterator &amp;begin, QCPErrorBarsDataContainer::const_iterator &amp;end, const QCPDataRange &amp;rangeRestriction) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a8e904076bad643f43af28b95f21c1b88">
                <title>double QCPErrorBars::pointDistance (const QPointF &amp;pixelPoint, QCPErrorBarsDataContainer::const_iterator &amp;closestData) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a243e0bb2563fc2e9f08efd77e7175abf">
                <title>void QCPErrorBars::getDataSegments (QList&lt; QCPDataRange &gt; &amp;selectedSegments, QList&lt; QCPDataRange &gt; &amp;unselectedSegments) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1a5ad9abccb1be3df25485ad7dc21b3b89">
                <title>bool QCPErrorBars::errorBarVisible (int index) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_error_bars_1aa9b1642567a0aff8a2f6e0556c563633">
                <title>bool QCPErrorBars::rectIntersectsLine (const QRectF &amp;pixelRect, const QLineF &amp;line) const</title> <emphasis></emphasis>
                
            </section>
</section>
