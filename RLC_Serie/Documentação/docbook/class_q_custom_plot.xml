<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_custom_plot">
<title>QCustomPlot class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCustomPlot</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_custom_plot__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCustomPlot</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_custom_plot__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7">LayerInsertMode</link> {
<link linkend="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7aee39cf650cd24e68552da0b697ce4a93">limBelow</link>,
<link linkend="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7a062b0b7825650b432a713c0df6742d41">limAbove</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39">RefreshPriority</link> {
<link linkend="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39aa6eda645ccf1a60635df3e8b71ea6ae2">rpImmediateRefresh</link>,
<link linkend="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39acd6f1e590ea775d1ddee666428077f3e">rpQueuedRefresh</link>,
<link linkend="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a49666a5854a68dbcca8b277b03331260">rpRefreshHint</link>,
<link linkend="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a019650c6ddf308f97e811fbfff207a8f">rpQueuedReplot</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Public Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPAxis * xAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPAxis * yAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPAxis * xAxis2</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPAxis * yAxis2</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLegend * legend</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Protected Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect mViewport</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mBufferDevicePixelRatio</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayoutGrid * mPlotLayout</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mAutoAddPlottableToLegend</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPAbstractPlottable * &gt; mPlottables</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPGraph * &gt; mGraphs</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPAbstractItem * &gt; mItems</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPLayer * &gt; mLayers</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::AntialiasedElements mAntialiasedElements</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::AntialiasedElements mNotAntialiasedElements</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::Interactions mInteractions</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mSelectionTolerance</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mNoAntialiasingOnDrag</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush mBackgroundBrush</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPixmap mBackgroundPixmap</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPixmap mScaledBackgroundPixmap</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mBackgroundScaled</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::AspectRatioMode mBackgroundScaledMode</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayer * mCurrentLayer</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::PlottingHints mPlottingHints</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::KeyboardModifier mMultiSelectModifier</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::SelectionRectMode mSelectionRectMode</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPSelectionRect * mSelectionRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mOpenGl</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QSharedPointer&lt; QCPAbstractPaintBuffer &gt; &gt; mPaintBuffers</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPoint mMousePressPos</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mMouseHasMoved</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPLayerable &gt; mMouseEventLayerable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPLayerable &gt; mMouseSignalLayerable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QVariant mMouseEventLayerableDetails</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QVariant mMouseSignalLayerableDetails</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mReplotting</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mReplotQueued</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mOpenGlMultisamples</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::AntialiasedElements mOpenGlAntialiasedElementsBackup</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mOpenGlCacheLabelsBackup</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_custom_plot_1a45b99626558651a6428b83972b0b34b8">QCustomPlot</link> (
QWidget * parent)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_custom_plot_1a75d9b6f599dcae706e45efd425c5499e">~QCustomPlot</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect <link linkend="class_q_custom_plot_1a19842409b18f556b256d05e97fffc670">viewport</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_custom_plot_1a53d35abe0f576f9838cde5d0bee47657">bufferDevicePixelRatio</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPixmap <link linkend="class_q_custom_plot_1a5b9bbc838cb856e31b39c050fad49f9a">background</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1aac96f3a0f5070228ed13602976886b80">backgroundScaled</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::AspectRatioMode <link linkend="class_q_custom_plot_1af8f1ebfdbf48d7c49f95136475d55b14">backgroundScaledMode</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layout_grid">QCPLayoutGrid</link> * <link linkend="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f">plotLayout</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::AntialiasedElements <link linkend="class_q_custom_plot_1a631762eb183aceecee73d30e108641ee">antialiasedElements</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::AntialiasedElements <link linkend="class_q_custom_plot_1a75571bc5b2167e83def132fc993091b3">notAntialiasedElements</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ac4b87de13eaceadc8db5a66654197689">autoAddPlottableToLegend</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const QCP::Interactions <link linkend="class_q_custom_plot_1a2c78c5fd2943c148ab76652801d3f2dc">interactions</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1a5441d11013afeaf4b8f2ea06e8624a25">selectionTolerance</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1aca3f01f903fb250a3dd27104d92830be">noAntialiasingOnDrag</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::PlottingHints <link linkend="class_q_custom_plot_1ac724f4075822f74f7b676a790095b877">plottingHints</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Qt::KeyboardModifier <link linkend="class_q_custom_plot_1a28182402ed11609c9a429f0788162d18">multiSelectModifier</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacf">QCP::SelectionRectMode</link> <link linkend="class_q_custom_plot_1a6e53c402de2770a978dffa5584c05b27">selectionRectMode</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_selection_rect">QCPSelectionRect</link> * <link linkend="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd">selectionRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1abe5556ac80dc0140fd57f2b2f94a1f0e">openGl</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4">setViewport</link> (
const QRect &amp; rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a159162653ad6f8b8bf21263ba5787215">setBufferDevicePixelRatio</link> (
double ratio)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00">setBackground</link> (
const QPixmap &amp; pm)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a8513971d6aa24d8b0d6a68d45b542130">setBackground</link> (
const QPixmap &amp; pm, bool scaled, Qt::AspectRatioMode mode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0">setBackground</link> (
const QBrush &amp; brush)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">setBackgroundScaled</link> (
bool scaled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">setBackgroundScaledMode</link> (
Qt::AspectRatioMode mode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements</link> (
const QCP::AntialiasedElements &amp; antialiasedElements)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1aeef813bcf7efab8e765f9f87ec454691">setAntialiasedElement</link> (
<link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c">QCP::AntialiasedElement</link> antialiasedElement, bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">setNotAntialiasedElements</link> (
const QCP::AntialiasedElements &amp; notAntialiasedElements)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1afc657938a707c890e449ae89203a076d">setNotAntialiasedElement</link> (
<link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c">QCP::AntialiasedElement</link> notAntialiasedElement, bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1ad8858410c2db47b7104040a3aa61c3fc">setAutoAddPlottableToLegend</link> (
bool on)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link> (
const QCP::Interactions &amp; interactions)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a422bf1bc6d56dac75a3d805d9a65902c">setInteraction</link> (
const <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037">QCP::Interaction</link> &amp; interaction, bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93">setSelectionTolerance</link> (
int pixels)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a775bdcb6329d44701aeaa6135b0e5265">setNoAntialiasingOnDrag</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d">setPlottingHints</link> (
const QCP::PlottingHints &amp; hints)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9">setPlottingHint</link> (
<link linkend="namespace_q_c_p_1a5400e5fcb9528d92002ddb938c1f4ef4">QCP::PlottingHint</link> hint, bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a8fc96e3b5138a06759a2a90c166df516">setMultiSelectModifier</link> (
Qt::KeyboardModifier modifier)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb">setSelectionRectMode</link> (
<link linkend="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacf">QCP::SelectionRectMode</link> mode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33">setSelectionRect</link> (
<link linkend="class_q_c_p_selection_rect">QCPSelectionRect</link> * selectionRect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a7db1adc09016329f3aef7c60da935789">setOpenGl</link> (
bool enabled, int multisampling)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * <link linkend="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f">plottable</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * <link linkend="class_q_custom_plot_1adea38bdc660da9412ba69fb939031567">plottable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">removePlottable</link> (
<link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * plottable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1afc210e0021480f8119bccf37839dbcc8">removePlottable</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1a9a409bb3201878adb7ffba1c89c4e004">clearPlottables</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4">plottableCount</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * &gt; <link linkend="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">selectedPlottables</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * <link linkend="class_q_custom_plot_1acddbbd8b16dd633f0d94e5a736fbd8cf">plottableAt</link> (
const QPointF &amp; pos, bool onlySelectable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a72cefbfbb9e699940e37be605bd9c51e">hasPlottable</link> (
<link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * plottable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_graph">QCPGraph</link> * <link linkend="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6">graph</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_graph">QCPGraph</link> * <link linkend="class_q_custom_plot_1aac190865a67f19af3fdf2136774997af">graph</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_graph">QCPGraph</link> * <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">addGraph</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * keyAxis, <link linkend="class_q_c_p_axis">QCPAxis</link> * valueAxis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713">removeGraph</link> (
<link linkend="class_q_c_p_graph">QCPGraph</link> * graph)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a9554b3d2d5b10c0f884bd4010b6c192c">removeGraph</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa">clearGraphs</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90">graphCount</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_graph">QCPGraph</link> * &gt; <link linkend="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06">selectedGraphs</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * <link linkend="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239">item</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * <link linkend="class_q_custom_plot_1a12eb2a283cf10a8a9176c01c0443e83e">item</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ae04446557292551e8fb6e2c106e1848d">removeItem</link> (
<link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * item)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1abcfdda3d601c0441cab136137d715dea">removeItem</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1abdfd07d4f0591d0cf967f85013fd3645">clearItems</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2">itemCount</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * &gt; <link linkend="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba">selectedItems</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * <link linkend="class_q_custom_plot_1ac08578e0e6c059c83a8d340ba0038e8e">itemAt</link> (
const QPointF &amp; pos, bool onlySelectable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1af0b57f35646079f93fa6161a65b36109">hasItem</link> (
<link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * item)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layer">QCPLayer</link> * <link linkend="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159">layer</link> (
const QString &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layer">QCPLayer</link> * <link linkend="class_q_custom_plot_1acbb570f4c24306e7c2324d40bfe157c2">layer</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layer">QCPLayer</link> * <link linkend="class_q_custom_plot_1a0421d647f420b0b4c57aec1708857af5">currentLayer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852">setCurrentLayer</link> (
const QString &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a23a4d3cadad1a0063c5fe19aac5659e6">setCurrentLayer</link> (
<link linkend="class_q_c_p_layer">QCPLayer</link> * layer)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1afa45d61e65292026f4c58c9c88c2cef0">layerCount</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link> (
const QString &amp; name, <link linkend="class_q_c_p_layer">QCPLayer</link> * otherLayer, <link linkend="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7">LayerInsertMode</link> insertMode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94">removeLayer</link> (
<link linkend="class_q_c_p_layer">QCPLayer</link> * layer)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link> (
<link linkend="class_q_c_p_layer">QCPLayer</link> * layer, <link linkend="class_q_c_p_layer">QCPLayer</link> * otherLayer, <link linkend="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7">LayerInsertMode</link> insertMode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6">axisRectCount</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> * <link linkend="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9">axisRect</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> * &gt; <link linkend="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe">axisRects</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layout_element">QCPLayoutElement</link> * <link linkend="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c">layoutElementAt</link> (
const QPointF &amp; pos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> * <link linkend="class_q_custom_plot_1a4a08842fc3e9ba6bed83aa410c5c5ba5">axisRectAt</link> (
const QPointF &amp; pos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="class_q_custom_plot_1ad86528f2cee6c7e446dea4a6e8839935">rescaleAxes</link> (
bool onlyVisiblePlottables)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_axis">QCPAxis</link> * &gt; <link linkend="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe">selectedAxes</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_legend">QCPLegend</link> * &gt; <link linkend="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4">selectedLegends</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c">deselectAll</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">savePdf</link> (
const QString &amp; fileName, int width, int height, <link linkend="namespace_q_c_p_1a17844f19e1019693a953e1eb93536d2f">QCP::ExportPen</link> exportPen, const QString &amp; pdfCreator, const QString &amp; pdfTitle)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link> (
const QString &amp; fileName, int width, int height, double scale, int quality, int resolution, <link linkend="namespace_q_c_p_1a715d46153da230990aa887d0f0602452">QCP::ResolutionUnit</link> resolutionUnit)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4">saveJpg</link> (
const QString &amp; fileName, int width, int height, double scale, int quality, int resolution, <link linkend="namespace_q_c_p_1a715d46153da230990aa887d0f0602452">QCP::ResolutionUnit</link> resolutionUnit)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d">saveBmp</link> (
const QString &amp; fileName, int width, int height, double scale, int resolution, <link linkend="namespace_q_c_p_1a715d46153da230990aa887d0f0602452">QCP::ResolutionUnit</link> resolutionUnit)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352">saveRastered</link> (
const QString &amp; fileName, int width, int height, double scale, const char * format, int quality, int resolution, <link linkend="namespace_q_c_p_1a715d46153da230990aa887d0f0602452">QCP::ResolutionUnit</link> resolutionUnit)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPixmap <link linkend="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe">toPixmap</link> (
int width, int height, double scale)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9">toPainter</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, int width, int height)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af">replot</link> (
<link linkend="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39">QCustomPlot::RefreshPriority</link> refreshPriority)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QSize <link linkend="class_q_custom_plot_1a968a01cd4077d63aecde1aef1db057fc">minimumSizeHint</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QSize <link linkend="class_q_custom_plot_1ac9d6fe101e082daf756903b11f6e6213">sizeHint</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1a8068b368e5813065ee0f4cf7c6d21330">paintEvent</link> (
QPaintEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1af5b69dc6a431562ecdd1d0718bcbdf70">resizeEvent</link> (
QResizeEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1a344075e6e80ed6d575c79b81694abb8a">mouseDoubleClickEvent</link> (
QMouseEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1aac0a7296a6031dc667c01c1abd4ecc6b">mousePressEvent</link> (
QMouseEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1ae7abdc93b26d2ad4632c1ab75ae5b46f">mouseMoveEvent</link> (
QMouseEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1adc24846f52199e5a9bc35c387a6ce68d">mouseReleaseEvent</link> (
QMouseEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1a7848c9ac8be60bbd8fcea9b53be543c5">wheelEvent</link> (
QWheelEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1ad7a7d878bf050f101a43008e7d8fdb52">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1a6e6693e2c249f65437382ffd93405e04">updateLayout</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1a8b46607021c463c94709d3504951cb47">axisRemoved</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * axis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_custom_plot_1a9d173454555021c9ffd4f675c4d9037a">legendRemoved</link> (
<link linkend="class_q_c_p_legend">QCPLegend</link> * legend)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Q_SLOT void <link linkend="class_q_custom_plot_1ac10849411e1d0e858ea7f29c8ade364c">processRectSelection</link> (
QRect rect, QMouseEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Q_SLOT void <link linkend="class_q_custom_plot_1a5508a207dcc279f316142f96d984bba3">processRectZoom</link> (
QRect rect, QMouseEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Q_SLOT void <link linkend="class_q_custom_plot_1ac13c10fff6613e3e80e13c787b010838">processPointSelection</link> (
QMouseEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1aeba7733bb9fadfb5a375b3f40de9e58a">registerPlottable</link> (
<link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> * plottable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1acfc01230bddaea4f1782e4aa7d130af6">registerGraph</link> (
<link linkend="class_q_c_p_graph">QCPGraph</link> * graph)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1afbd4010b2e3f364c8d512691b2a1640a">registerItem</link> (
<link linkend="class_q_c_p_abstract_item">QCPAbstractItem</link> * item)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a7f1ca67a66d37b6d260a0b93de08f3bd">updateLayerIndices</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layerable">QCPLayerable</link> * <link linkend="class_q_custom_plot_1a12536fa6d5deb34ec620acb5134ca82a">layerableAt</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * selectionDetails)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_layerable">QCPLayerable</link> * &gt; <link linkend="class_q_custom_plot_1ac9048589e78e7959d27a2c48c253e159">layerableListAt</link> (
const QPointF &amp; pos, bool onlySelectable, QList&lt; QVariant &gt; * selectionDetails)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a05dd52438cee4353b18c1e53a439008d">drawBackground</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1a2685341f7242c3882f4cc5e379308d71">setupPaintBuffers</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_abstract_paint_buffer">QCPAbstractPaintBuffer</link> * <link linkend="class_q_custom_plot_1a943b57596a1adf7f0e75c3b50e407ae6">createPaintBuffer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1ad452b582348c8e99462d83fe1cd0279b">hasInvalidatedPaintBuffers</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_custom_plot_1a8954c4667c51070ff4e9b02d858fd190">setupOpenGl</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_custom_plot_1aaa3073362074581a7b5905726b4a0067">freeOpenGl</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>The central class of the library. This is the QWidget which displays the plot and interacts with the user. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>For tutorials on how to use <link linkend="class_q_custom_plot">QCustomPlot</link>, see the website
<literallayout>
</literallayout>
<link xlink:href="http://www.qcustomplot.com/">http://www.qcustomplot.com/</link> </para>
                <para>Definition at line 3583 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7">
               <title>enum LayerInsertMode </title>
               
<para>Defines how a layer should be inserted relative to an other layer.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumerator:</title>
                    <variablelist>
                        <varlistentry xml:id="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7aee39cf650cd24e68552da0b697ce4a93">
                            <term>limBelow</term>
                            <listitem>
                                <para>Layer is inserted below other layer.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_custom_plot_1a75a8afbe6ef333b1f3d47abb25b9add7a062b0b7825650b432a713c0df6742d41">
                            <term>limAbove</term>
                            <listitem>
                                <para>Layer is inserted above other layer.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 3603 of file qcustomplot.h
                    <computeroutput><literallayout>
{
limBelow, 
limAbove, 
}LayerInsertMode;
                    </literallayout></computeroutput>
                </para>
            </section>
            <section xml:id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39">
               <title>enum RefreshPriority </title>
               
<para>Defines with what timing the <link linkend="class_q_custom_plot">QCustomPlot</link> surface is refreshed after a replot.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af">replot</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumerator:</title>
                    <variablelist>
                        <varlistentry xml:id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39aa6eda645ccf1a60635df3e8b71ea6ae2">
                            <term>rpImmediateRefresh</term>
                            <listitem>
                                <para>Replots immediately and repaints the widget immediately by calling QWidget::repaint() after the replot.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39acd6f1e590ea775d1ddee666428077f3e">
                            <term>rpQueuedRefresh</term>
                            <listitem>
                                <para>Replots immediately, but queues the widget repaint, by calling QWidget::update() after the replot. This way multiple redundant widget repaints can be avoided.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a49666a5854a68dbcca8b277b03331260">
                            <term>rpRefreshHint</term>
                            <listitem>
                                <para>Whether to use immediate or queued refresh depends on whether the plotting hint \ref QCP::phImmediateRefresh is set, see \ref setPlottingHints.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a019650c6ddf308f97e811fbfff207a8f">
                            <term>rpQueuedReplot</term>
                            <listitem>
                                <para>Queues the entire replot for the next event loop iteration. This way multiple redundant replots can be avoided. The actual replot is then done with \ref rpRefreshHint priority.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 3613 of file qcustomplot.h
                    <computeroutput><literallayout>
{
rpImmediateRefresh, 
rpQueuedRefresh, 
rpRefreshHint, 
rpQueuedReplot, 
}RefreshPriority;
                    </literallayout></computeroutput>
                </para>
            </section>
        <section>
            <title>Member Data Documentation</title>
            <simplesect>
                <title>QCPAxis * QCustomPlot::xAxis</title>                
<para>A pointer to the primary x Axis (bottom) of the main axis rect of the plot.</para>

<para><link linkend="class_q_custom_plot">QCustomPlot</link> offers convenient pointers to the axes (<link linkend="class_q_custom_plot_1a9a79cd0158a4c7f30cbc702f0fd800e4">xAxis</link>, <link linkend="class_q_custom_plot_1af6fea5679725b152c14facd920b19367">yAxis</link>, <link linkend="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9">xAxis2</link>, <link linkend="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7">yAxis2</link>) and the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <link linkend="">the layout system</link> to add multiple axis rects or multiple axes to one side, use the <link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">QCPAxisRect::axis</link> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become 0.</para>

<para>If an axis convenience pointer is currently zero and a new axis rect or a corresponding axis is added in the place of the main axis rect, <link linkend="class_q_custom_plot">QCustomPlot</link> resets the convenience pointers to the according new axes. Similarly the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>

                <para>Definition at line 3731 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>QCPAxis * QCustomPlot::yAxis</title>                
<para>A pointer to the primary y Axis (left) of the main axis rect of the plot.</para>

<para><link linkend="class_q_custom_plot">QCustomPlot</link> offers convenient pointers to the axes (<link linkend="class_q_custom_plot_1a9a79cd0158a4c7f30cbc702f0fd800e4">xAxis</link>, <link linkend="class_q_custom_plot_1af6fea5679725b152c14facd920b19367">yAxis</link>, <link linkend="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9">xAxis2</link>, <link linkend="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7">yAxis2</link>) and the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <link linkend="">the layout system</link> to add multiple axis rects or multiple axes to one side, use the <link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">QCPAxisRect::axis</link> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become 0.</para>

<para>If an axis convenience pointer is currently zero and a new axis rect or a corresponding axis is added in the place of the main axis rect, <link linkend="class_q_custom_plot">QCustomPlot</link> resets the convenience pointers to the according new axes. Similarly the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>

                <para>Definition at line 3731 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>QCPAxis * QCustomPlot::xAxis2</title>                
<para>A pointer to the secondary x Axis (top) of the main axis rect of the plot. Secondary axes are invisible by default. Use <link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPAxis::setVisible</link> to change this (or use <link linkend="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4">QCPAxisRect::setupFullAxesBox</link>).</para>

<para><link linkend="class_q_custom_plot">QCustomPlot</link> offers convenient pointers to the axes (<link linkend="class_q_custom_plot_1a9a79cd0158a4c7f30cbc702f0fd800e4">xAxis</link>, <link linkend="class_q_custom_plot_1af6fea5679725b152c14facd920b19367">yAxis</link>, <link linkend="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9">xAxis2</link>, <link linkend="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7">yAxis2</link>) and the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <link linkend="">the layout system</link> to add multiple axis rects or multiple axes to one side, use the <link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">QCPAxisRect::axis</link> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become 0.</para>

<para>If an axis convenience pointer is currently zero and a new axis rect or a corresponding axis is added in the place of the main axis rect, <link linkend="class_q_custom_plot">QCustomPlot</link> resets the convenience pointers to the according new axes. Similarly the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>

                <para>Definition at line 3731 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>QCPAxis * QCustomPlot::yAxis2</title>                
<para>A pointer to the secondary y Axis (right) of the main axis rect of the plot. Secondary axes are invisible by default. Use <link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPAxis::setVisible</link> to change this (or use <link linkend="class_q_c_p_axis_rect_1a5fa906175447b14206954f77fc7f1ef4">QCPAxisRect::setupFullAxesBox</link>).</para>

<para><link linkend="class_q_custom_plot">QCustomPlot</link> offers convenient pointers to the axes (<link linkend="class_q_custom_plot_1a9a79cd0158a4c7f30cbc702f0fd800e4">xAxis</link>, <link linkend="class_q_custom_plot_1af6fea5679725b152c14facd920b19367">yAxis</link>, <link linkend="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9">xAxis2</link>, <link linkend="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7">yAxis2</link>) and the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <link linkend="">the layout system</link> to add multiple axis rects or multiple axes to one side, use the <link linkend="class_q_c_p_axis_rect_1a583ae4f6d78b601b732183f6cabecbe1">QCPAxisRect::axis</link> interface to access the new axes. If one of the four default axes or the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointers become 0.</para>

<para>If an axis convenience pointer is currently zero and a new axis rect or a corresponding axis is added in the place of the main axis rect, <link linkend="class_q_custom_plot">QCustomPlot</link> resets the convenience pointers to the according new axes. Similarly the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>

                <para>Definition at line 3731 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>QCPLegend * QCustomPlot::legend</title>                
<para>A pointer to the default legend of the main axis rect. The legend is invisible by default. Use <link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPLegend::setVisible</link> to change this.</para>

<para><link linkend="class_q_custom_plot">QCustomPlot</link> offers convenient pointers to the axes (<link linkend="class_q_custom_plot_1a9a79cd0158a4c7f30cbc702f0fd800e4">xAxis</link>, <link linkend="class_q_custom_plot_1af6fea5679725b152c14facd920b19367">yAxis</link>, <link linkend="class_q_custom_plot_1ada41599f22cad901c030f3dcbdd82fd9">xAxis2</link>, <link linkend="class_q_custom_plot_1af13fdc5bce7d0fabd640f13ba805c0b7">yAxis2</link>) and the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link>. They make it very easy working with plots that only have a single axis rect and at most one axis at each axis rect side. If you use <link linkend="">the layout system</link> to add multiple legends to the plot, use the layout system interface to access the new legend. For example, legends can be placed inside an axis rect&apos;s <link linkend="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10">inset layout</link>, and must then also be accessed via the inset layout. If the default legend is removed due to manipulation of the layout system (e.g. by removing the main axis rect), the corresponding pointer becomes 0.</para>

<para>If an axis convenience pointer is currently zero and a new axis rect or a corresponding axis is added in the place of the main axis rect, <link linkend="class_q_custom_plot">QCustomPlot</link> resets the convenience pointers to the according new axes. Similarly the <link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">legend</link> convenience pointer will be reset if a legend is added after the main legend was removed before. </para>

                <para>Definition at line 3732 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
            </simplesect>
        </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_q_custom_plot_1a45b99626558651a6428b83972b0b34b8">
                <title>QCustomPlot::QCustomPlot (QWidget *parent=0)</title> <emphasis></emphasis>
                
<para>Constructs a <link linkend="class_q_custom_plot">QCustomPlot</link> and sets reasonable default values. </para>

            </section>
            <section xml:id="class_q_custom_plot_1a75d9b6f599dcae706e45efd425c5499e">
                <title>QCustomPlot::~QCustomPlot ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a19842409b18f556b256d05e97fffc670">
                <title>QRect QCustomPlot::viewport () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a53d35abe0f576f9838cde5d0bee47657">
                <title>double QCustomPlot::bufferDevicePixelRatio () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a5b9bbc838cb856e31b39c050fad49f9a">
                <title>QPixmap QCustomPlot::background () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1aac96f3a0f5070228ed13602976886b80">
                <title>bool QCustomPlot::backgroundScaled () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1af8f1ebfdbf48d7c49f95136475d55b14">
                <title>Qt::AspectRatioMode QCustomPlot::backgroundScaledMode () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1af1a1f1f571237deb7c2bd34a5e9f018f">
                <title>QCPLayoutGrid * QCustomPlot::plotLayout () const</title> <emphasis></emphasis>
                
<para>Returns the top level layout of this <link linkend="class_q_custom_plot">QCustomPlot</link> instance. It is a <link linkend="class_q_c_p_layout_grid">QCPLayoutGrid</link>, initially containing just one cell with the main <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> inside. </para>

            </section>
            <section xml:id="class_q_custom_plot_1a631762eb183aceecee73d30e108641ee">
                <title>QCP::AntialiasedElements QCustomPlot::antialiasedElements () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a75571bc5b2167e83def132fc993091b3">
                <title>QCP::AntialiasedElements QCustomPlot::notAntialiasedElements () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ac4b87de13eaceadc8db5a66654197689">
                <title>bool QCustomPlot::autoAddPlottableToLegend () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a2c78c5fd2943c148ab76652801d3f2dc">
                <title>const QCP::Interactions QCustomPlot::interactions () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a5441d11013afeaf4b8f2ea06e8624a25">
                <title>int QCustomPlot::selectionTolerance () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1aca3f01f903fb250a3dd27104d92830be">
                <title>bool QCustomPlot::noAntialiasingOnDrag () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ac724f4075822f74f7b676a790095b877">
                <title>QCP::PlottingHints QCustomPlot::plottingHints () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a28182402ed11609c9a429f0788162d18">
                <title>Qt::KeyboardModifier QCustomPlot::multiSelectModifier () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a6e53c402de2770a978dffa5584c05b27">
                <title>QCP::SelectionRectMode QCustomPlot::selectionRectMode () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd">
                <title>QCPSelectionRect * QCustomPlot::selectionRect () const</title> <emphasis></emphasis>
                
<para>Allows access to the currently used <link linkend="class_q_c_p_selection_rect">QCPSelectionRect</link> instance (or subclass thereof), that is used to handle and draw selection rect interactions (see <link linkend="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb">setSelectionRectMode</link>).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33">setSelectionRect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1abe5556ac80dc0140fd57f2b2f94a1f0e">
                <title>bool QCustomPlot::openGl () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4">
                <title>void QCustomPlot::setViewport (const QRect &amp;rect)</title> <emphasis></emphasis>
                
<para>Sets the viewport of this <link linkend="class_q_custom_plot">QCustomPlot</link>. Usually users of <link linkend="class_q_custom_plot">QCustomPlot</link> don&apos;t need to change the viewport manually.</para>

<para>The viewport is the area in which the plot is drawn. All mechanisms, e.g. margin caluclation take the viewport to be the outer border of the plot. The viewport normally is the rect() of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget, i.e. a rect with top left (0, 0) and size of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget.</para>

<para>Don&apos;t confuse the viewport with the axis rect (<link linkend="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9">QCustomPlot::axisRect</link>). An axis rect is typically an area enclosed by four axes, where the graphs/plottables are drawn in. The viewport is larger and contains also the axes themselves, their tick numbers, their labels, or even additional axis rects, color scales and other layout elements.</para>

<para>This function is used to allow arbitrary size exports with <link linkend="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe">toPixmap</link>, <link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link>, <link linkend="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">savePdf</link>, etc. by temporarily changing the viewport size. </para>

            </section>
            <section xml:id="class_q_custom_plot_1a159162653ad6f8b8bf21263ba5787215">
                <title>void QCustomPlot::setBufferDevicePixelRatio (double ratio)</title> <emphasis></emphasis>
                
<para>Sets the device pixel ratio used by the paint buffers of this <link linkend="class_q_custom_plot">QCustomPlot</link> instance.</para>

<para>Normally, this doesn&apos;t need to be set manually, because it is initialized with the regular <emphasis>QWidget::devicePixelRatio</emphasis> which is configured by Qt to fit the display device (e.g. 1 for normal displays, 2 for High-DPI displays).</para>

<para>Device pixel ratios are supported by Qt only for Qt versions since 5.4. If this method is called when <link linkend="class_q_custom_plot">QCustomPlot</link> is being used with older Qt versions, outputs an according qDebug message and leaves the internal buffer device pixel ratio at 1.0. </para>

            </section>
            <section xml:id="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00">
                <title>void QCustomPlot::setBackground (const QPixmap &amp;pm)</title> <emphasis></emphasis>
                
<para>Sets <emphasis>pm</emphasis> as the viewport background pixmap (see <link linkend="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4">setViewport</link>). The pixmap is always drawn below all other objects in the plot.</para>

<para>For cases where the provided pixmap doesn&apos;t have the same size as the viewport, scaling can be enabled with <link linkend="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">setBackgroundScaled</link> and the scaling mode (whether and how the aspect ratio is preserved) can be set with <link linkend="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">setBackgroundScaledMode</link>. To set all these options in one call, consider using the overloaded version of this function.</para>

<para>If a background brush was set with <link linkend="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0">setBackground(const QBrush &amp;brush)</link>, the viewport will first be filled with that brush, before drawing the background pixmap. This can be useful for background pixmaps with translucent areas.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">setBackgroundScaled</link>, <link linkend="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">setBackgroundScaledMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a8513971d6aa24d8b0d6a68d45b542130">
                <title>void QCustomPlot::setBackground (const QPixmap &amp;pm, bool scaled, Qt::AspectRatioMode mode=Qt::KeepAspectRatioByExpanding)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Allows setting the background pixmap of the viewport, whether it shall be scaled and how it shall be scaled in one call.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00">setBackground(const QPixmap &amp;pm)</link>, <link linkend="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">setBackgroundScaled</link>, <link linkend="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">setBackgroundScaledMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0">
                <title>void QCustomPlot::setBackground (const QBrush &amp;brush)</title> <emphasis></emphasis>
                
<para>Sets the background brush of the viewport (see <link linkend="class_q_custom_plot_1a3f9bc4b939dd8aaba9339fd09f273fc4">setViewport</link>).</para>

<para>Before drawing everything else, the background is filled with <emphasis>brush</emphasis>. If a background pixmap was set with <link linkend="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00">setBackground(const QPixmap &amp;pm)</link>, this brush will be used to fill the viewport before the background pixmap is drawn. This can be useful for background pixmaps with translucent areas.</para>

<para>Set <emphasis>brush</emphasis> to Qt::NoBrush or Qt::Transparent to leave background transparent. This can be useful for exporting to image formats which support transparency, e.g. <link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">setBackgroundScaled</link>, <link linkend="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">setBackgroundScaledMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">
                <title>void QCustomPlot::setBackgroundScaled (bool scaled)</title> <emphasis></emphasis>
                
<para>Sets whether the viewport background pixmap shall be scaled to fit the viewport. If <emphasis>scaled</emphasis> is set to true, control whether and how the aspect ratio of the original pixmap is preserved with <link linkend="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">setBackgroundScaledMode</link>.</para>

<para>Note that the scaled version of the original pixmap is buffered, so there is no performance penalty on replots. (Except when the viewport dimensions are changed continuously.)</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00">setBackground</link>, <link linkend="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">setBackgroundScaledMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a4c0eb4865b7949f62e1cb97db04a3de0">
                <title>void QCustomPlot::setBackgroundScaledMode (Qt::AspectRatioMode mode)</title> <emphasis></emphasis>
                
<para>If scaling of the viewport background pixmap is enabled (<link linkend="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">setBackgroundScaled</link>), use this function to define whether and how the aspect ratio of the original pixmap is preserved.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a130358592cfca353ff3cf5571b49fb00">setBackground</link>, <link linkend="class_q_custom_plot_1a36f0fa1317325dc7b7efea615ee2de1f">setBackgroundScaled</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">
                <title>void QCustomPlot::setAntialiasedElements (const QCP::AntialiasedElements &amp;antialiasedElements)</title> <emphasis></emphasis>
                
<para>Sets which elements are forcibly drawn antialiased as an <emphasis>or</emphasis> combination of <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c">QCP::AntialiasedElement</link>.</para>

<para>This overrides the antialiasing settings for whole element groups, normally controlled with the <emphasis>setAntialiasing</emphasis> function on the individual elements. If an element is neither specified in <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements</link> nor in <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">setNotAntialiasedElements</link>, the antialiasing setting on each individual element instance is used.</para>

<para>For example, if <emphasis>antialiasedElements</emphasis> contains <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0ca4145e4251b0cf2dbedabeea0a38f84f6">QCP::aePlottables</link>, all plottables will be drawn antialiased, no matter what the specific <link linkend="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581">QCPAbstractPlottable::setAntialiased</link> value was set to.</para>

<para>if an element in <emphasis>antialiasedElements</emphasis> is already set in <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">setNotAntialiasedElements</link>, it is removed from there.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">setNotAntialiasedElements</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1aeef813bcf7efab8e765f9f87ec454691">
                <title>void QCustomPlot::setAntialiasedElement (QCP::AntialiasedElement antialiasedElement, bool enabled=true)</title> <emphasis></emphasis>
                
<para>Sets whether the specified <emphasis>antialiasedElement</emphasis> is forcibly drawn antialiased.</para>

<para>See <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements</link> for details.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1afc657938a707c890e449ae89203a076d">setNotAntialiasedElement</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">
                <title>void QCustomPlot::setNotAntialiasedElements (const QCP::AntialiasedElements &amp;notAntialiasedElements)</title> <emphasis></emphasis>
                
<para>Sets which elements are forcibly drawn not antialiased as an <emphasis>or</emphasis> combination of <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c">QCP::AntialiasedElement</link>.</para>

<para>This overrides the antialiasing settings for whole element groups, normally controlled with the <emphasis>setAntialiasing</emphasis> function on the individual elements. If an element is neither specified in <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements</link> nor in <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">setNotAntialiasedElements</link>, the antialiasing setting on each individual element instance is used.</para>

<para>For example, if <emphasis>notAntialiasedElements</emphasis> contains <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0ca4145e4251b0cf2dbedabeea0a38f84f6">QCP::aePlottables</link>, no plottables will be drawn antialiased, no matter what the specific <link linkend="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581">QCPAbstractPlottable::setAntialiased</link> value was set to.</para>

<para>if an element in <emphasis>notAntialiasedElements</emphasis> is already set in <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements</link>, it is removed from there.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1afc657938a707c890e449ae89203a076d">
                <title>void QCustomPlot::setNotAntialiasedElement (QCP::AntialiasedElement notAntialiasedElement, bool enabled=true)</title> <emphasis></emphasis>
                
<para>Sets whether the specified <emphasis>notAntialiasedElement</emphasis> is forcibly drawn not antialiased.</para>

<para>See <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">setNotAntialiasedElements</link> for details.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1aeef813bcf7efab8e765f9f87ec454691">setAntialiasedElement</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ad8858410c2db47b7104040a3aa61c3fc">
                <title>void QCustomPlot::setAutoAddPlottableToLegend (bool on)</title> <emphasis></emphasis>
                
<para>If set to true, adding a plottable (e.g. a graph) to the <link linkend="class_q_custom_plot">QCustomPlot</link> automatically also adds the plottable to the legend (<link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">QCustomPlot::legend</link>).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">addGraph</link>, <link linkend="class_q_c_p_legend_1a3ab274de52d2951faea45a6d975e6b3f">QCPLegend::addItem</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">
                <title>void QCustomPlot::setInteractions (const QCP::Interactions &amp;interactions)</title> <emphasis></emphasis>
                
<para>Sets the possible interactions of this <link linkend="class_q_custom_plot">QCustomPlot</link> as an or-combination of <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037">QCP::Interaction</link> enums. There are the following types of interactions:</para>

<para><emphasis role="bold">Axis range manipulation</emphasis> is controlled via <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18">QCP::iRangeDrag</link> and <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14">QCP::iRangeZoom</link>. When the respective interaction is enabled, the user may drag axes ranges and zoom with the mouse wheel. For details how to control which axes the user may drag/zoom and in what orientations, see <link linkend="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418">QCPAxisRect::setRangeDrag</link>, <link linkend="class_q_c_p_axis_rect_1a7960a9d222f1c31d558b064b60f86a31">QCPAxisRect::setRangeZoom</link>, <link linkend="class_q_c_p_axis_rect_1a648cce336bd99daac4a5ca3e5743775d">QCPAxisRect::setRangeDragAxes</link>, <link linkend="class_q_c_p_axis_rect_1a9442cca2aa358405f39a64d51eca13d2">QCPAxisRect::setRangeZoomAxes</link>.</para>

<para><emphasis role="bold">Plottable data selection</emphasis> is controlled by <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a67148c8227b4155eca49135fc274c7ec">QCP::iSelectPlottables</link>. If <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a67148c8227b4155eca49135fc274c7ec">QCP::iSelectPlottables</link> is set, the user may select plottables (graphs, curves, bars,...) and their data by clicking on them or in their vicinity (<link linkend="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93">setSelectionTolerance</link>). Whether the user can actually select a plottable and its data can further be restricted with the <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">QCPAbstractPlottable::setSelectable</link> method on the specific plottable. For details, see the special page about the data selection mechanism. To retrieve a list of all currently selected plottables, call <link linkend="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">selectedPlottables</link>. If you&apos;re only interested in QCPGraphs, you may use the convenience function <link linkend="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06">selectedGraphs</link>.</para>

<para><emphasis role="bold">Item selection</emphasis> is controlled by <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aea2f7c105d674e76d9b187b02ef29260">QCP::iSelectItems</link>. If <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aea2f7c105d674e76d9b187b02ef29260">QCP::iSelectItems</link> is set, the user may select items (<link linkend="class_q_c_p_item_line">QCPItemLine</link>, <link linkend="class_q_c_p_item_text">QCPItemText</link>,...) by clicking on them or in their vicinity. To find out whether a specific item is selected, call <link linkend="class_q_c_p_abstract_item_1aa069fba320a13639f119f82ad29ead96">QCPAbstractItem::selected()</link>. To retrieve a list of all currently selected items, call <link linkend="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba">selectedItems</link>.</para>

<para><emphasis role="bold">Axis selection</emphasis> is controlled with <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037ad6644ac55bef621645326e9dd7469caa">QCP::iSelectAxes</link>. If <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037ad6644ac55bef621645326e9dd7469caa">QCP::iSelectAxes</link> is set, the user may select parts of the axes by clicking on them. What parts exactly (e.g. Axis base line, tick labels, axis label) are selectable can be controlled via <link linkend="class_q_c_p_axis_1a513f9b9e326c505d9bec54880031b085">QCPAxis::setSelectableParts</link> for each axis. To retrieve a list of all axes that currently contain selected parts, call <link linkend="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe">selectedAxes</link>. Which parts of an axis are selected, can be retrieved with <link linkend="class_q_c_p_axis_1a893e8d6cfed9267eb2b793cb1d2b4dce">QCPAxis::selectedParts()</link>.</para>

<para><emphasis role="bold">Legend selection</emphasis> is controlled with <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a269c9af298e257d1108edec0432b5513">QCP::iSelectLegend</link>. If this is set, the user may select the legend itself or individual items by clicking on them. What parts exactly are selectable can be controlled via <link linkend="class_q_c_p_legend_1a9ce60aa8bbd89f62ae4fa83ac6c60110">QCPLegend::setSelectableParts</link>. To find out whether the legend or any of its child items are selected, check the value of <link linkend="class_q_c_p_legend_1a3efbf879f6936ec337690985e567dc6f">QCPLegend::selectedParts</link>. To find out which child items are selected, call <link linkend="class_q_c_p_legend_1ac7d9e567d5c551e09cd9bcc4306c5532">QCPLegend::selectedItems</link>.</para>

<para><emphasis role="bold">All other selectable elements</emphasis> The selection of all other selectable objects (e.g. <link linkend="class_q_c_p_text_element">QCPTextElement</link>, or your own layerable subclasses) is controlled with <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037af67a50bc26147a13b551b3a625374949">QCP::iSelectOther</link>. If set, the user may select those objects by clicking on them. To find out which are currently selected, you need to check their selected state explicitly.</para>

<para>If the selection state has changed by user interaction, the <link linkend="class_q_custom_plot_1a500c64a109bc773c973ad274f2fa4190">selectionChangedByUser</link> signal is emitted. Each selectable object additionally emits an individual selectionChanged signal whenever their selection state has changed, i.e. not only by user interaction.</para>

<para>To allow multiple objects to be selected by holding the selection modifier (<link linkend="class_q_custom_plot_1a8fc96e3b5138a06759a2a90c166df516">setMultiSelectModifier</link>), set the flag <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aef673112c5067c3cf4cfddb62da7265d">QCP::iMultiSelect</link>.</para>

<para><formalpara><title>Note: </title>

<para>In addition to the selection mechanism presented here, <link linkend="class_q_custom_plot">QCustomPlot</link> always emits corresponding signals, when an object is clicked or double clicked. see <link linkend="class_q_custom_plot_1af5fe78b8bc9e4e96df921612837fd4fd">plottableClick</link> and <link linkend="class_q_custom_plot_1a86a3ab7263c9c4e008e70d6c5fce9fbd">plottableDoubleClick</link> for example.</para>
</formalpara>
<formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a422bf1bc6d56dac75a3d805d9a65902c">setInteraction</link>, <link linkend="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93">setSelectionTolerance</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a422bf1bc6d56dac75a3d805d9a65902c">
                <title>void QCustomPlot::setInteraction (const QCP::Interaction &amp;interaction, bool enabled=true)</title> <emphasis></emphasis>
                
<para>Sets the single <emphasis>interaction</emphasis> of this <link linkend="class_q_custom_plot">QCustomPlot</link> to <emphasis>enabled</emphasis>.</para>

<para>For details about the interaction system, see <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93">
                <title>void QCustomPlot::setSelectionTolerance (int pixels)</title> <emphasis></emphasis>
                
<para>Sets the tolerance that is used to decide whether a click selects an object (e.g. a plottable) or not.</para>

<para>If the user clicks in the vicinity of the line of e.g. a <link linkend="class_q_c_p_graph">QCPGraph</link>, it&apos;s only regarded as a potential selection when the minimum distance between the click position and the graph line is smaller than <emphasis>pixels</emphasis>. Objects that are defined by an area (e.g. <link linkend="class_q_c_p_bars">QCPBars</link>) only react to clicks directly inside the area and ignore this selection tolerance. In other words, it only has meaning for parts of objects that are too thin to exactly hit with a click and thus need such a tolerance.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">QCPLayerable::selectTest</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a775bdcb6329d44701aeaa6135b0e5265">
                <title>void QCustomPlot::setNoAntialiasingOnDrag (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether antialiasing is disabled for this <link linkend="class_q_custom_plot">QCustomPlot</link> while the user is dragging axes ranges. If many objects, especially plottables, are drawn antialiased, this greatly improves performance during dragging. Thus it creates a more responsive user experience. As soon as the user stops dragging, the last replot is done with normal antialiasing, to restore high image quality.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements</link>, <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">setNotAntialiasedElements</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d">
                <title>void QCustomPlot::setPlottingHints (const QCP::PlottingHints &amp;hints)</title> <emphasis></emphasis>
                
<para>Sets the plotting hints for this <link linkend="class_q_custom_plot">QCustomPlot</link> instance as an <emphasis>or</emphasis> combination of <link linkend="namespace_q_c_p_1a5400e5fcb9528d92002ddb938c1f4ef4">QCP::PlottingHint</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9">setPlottingHint</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9">
                <title>void QCustomPlot::setPlottingHint (QCP::PlottingHint hint, bool enabled=true)</title> <emphasis></emphasis>
                
<para>Sets the specified plotting <emphasis>hint</emphasis> to <emphasis>enabled</emphasis>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a94a33cbdadbbac5934843508bcfc210d">setPlottingHints</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a8fc96e3b5138a06759a2a90c166df516">
                <title>void QCustomPlot::setMultiSelectModifier (Qt::KeyboardModifier modifier)</title> <emphasis></emphasis>
                
<para>Sets the keyboard modifier that will be recognized as multi-select-modifier.</para>

<para>If <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037aef673112c5067c3cf4cfddb62da7265d">QCP::iMultiSelect</link> is specified in <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, the user may select multiple objects (or data points) by clicking on them one after the other while holding down <emphasis>modifier</emphasis>.</para>

<para>By default the multi-select-modifier is set to Qt::ControlModifier.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb">
                <title>void QCustomPlot::setSelectionRectMode (QCP::SelectionRectMode mode)</title> <emphasis></emphasis>
                
<para>Sets how <link linkend="class_q_custom_plot">QCustomPlot</link> processes mouse click-and-drag interactions by the user.</para>

<para>If <emphasis>mode</emphasis> is <link linkend="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1">QCP::srmNone</link>, the mouse drag is forwarded to the underlying objects. For example, <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> may process a mouse drag by dragging axis ranges, see <link linkend="class_q_c_p_axis_rect_1ae6aef2f7211ba6097c925dcd26008418">QCPAxisRect::setRangeDrag</link>. If <emphasis>mode</emphasis> is not <link linkend="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1">QCP::srmNone</link>, the current selection rect (<link linkend="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd">selectionRect</link>) becomes activated and allows e.g. rect zooming and data point selection.</para>

<para>If you wish to provide your user both with axis range dragging and data selection/range zooming, use this method to switch between the modes just before the interaction is processed, e.g. in reaction to the <link linkend="class_q_custom_plot_1aca75bf9afb5dd19349c375de2a87a051">mousePress</link> or <link linkend="class_q_custom_plot_1a742ca4f94688bed2a685fd8a56ce5704">mouseMove</link> signals. For example you could check whether the user is holding a certain keyboard modifier, and then decide which <emphasis>mode</emphasis> shall be set.</para>

<para>If a selection rect interaction is currently active, and <emphasis>mode</emphasis> is set to <link linkend="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1">QCP::srmNone</link>, the interaction is canceled (<link linkend="class_q_c_p_selection_rect_1af67bc58f4f5ce9a4dc420b9c42de235a">QCPSelectionRect::cancel</link>). Switching between any of the other modes will keep the selection rect active. Upon completion of the interaction, the behaviour is as defined by the currently set <emphasis>mode</emphasis>, not the mode that was set when the interaction started.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33">setSelectionRect</link>, <link linkend="class_q_c_p_selection_rect">QCPSelectionRect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a0c09f96df15faa4799ad7051bb16cf33">
                <title>void QCustomPlot::setSelectionRect (QCPSelectionRect *selectionRect)</title> <emphasis></emphasis>
                
<para>Sets the <link linkend="class_q_c_p_selection_rect">QCPSelectionRect</link> instance that <link linkend="class_q_custom_plot">QCustomPlot</link> will use if <emphasis>mode</emphasis> is not <link linkend="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa9032f170490d67240a6c68c2638ffab1">QCP::srmNone</link> and the user performs a click-and-drag interaction. <link linkend="class_q_custom_plot">QCustomPlot</link> takes ownership of the passed <emphasis>selectionRect</emphasis>. It can be accessed later via <link linkend="class_q_custom_plot_1ad7df2bcbba307e644db383b449e31efd">selectionRect</link>.</para>

<para>This method is useful if you wish to replace the default <link linkend="class_q_c_p_selection_rect">QCPSelectionRect</link> instance with an instance of a <link linkend="class_q_c_p_selection_rect">QCPSelectionRect</link> subclass, to introduce custom behaviour of the selection rect.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb">setSelectionRectMode</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a7db1adc09016329f3aef7c60da935789">
                <title>void QCustomPlot::setOpenGl (bool enabled, int multisampling=16)</title> <emphasis></emphasis>
                
<para><formalpara><title>Warning: </title>

<para>This is still an experimental feature and its performance depends on the system that it runs on. Having multiple <link linkend="class_q_custom_plot">QCustomPlot</link> widgets in one application with enabled OpenGL rendering might cause context conflicts on some systems.</para>
</formalpara>
This method allows to enable OpenGL plot rendering, for increased plotting performance of graphically demanding plots (thick lines, translucent fills, etc.).</para>

<para>If <emphasis>enabled</emphasis> is set to true, <link linkend="class_q_custom_plot">QCustomPlot</link> will try to initialize OpenGL and, if successful, continue plotting with hardware acceleration. The parameter <emphasis>multisampling</emphasis> controls how many samples will be used per pixel, it essentially controls the antialiasing quality. If <emphasis>multisampling</emphasis> is set too high for the current graphics hardware, the maximum allowed value will be used.</para>

<para>You can test whether switching to OpenGL rendering was successful by checking whether the according getter <emphasis><link linkend="class_q_custom_plot_1abe5556ac80dc0140fd57f2b2f94a1f0e">QCustomPlot::openGl()</link></emphasis> returns true. If the OpenGL initialization fails, rendering continues with the regular software rasterizer, and an according qDebug output is generated.</para>

<para>If switching to OpenGL was successful, this method disables label caching (<link linkend="class_q_custom_plot_1a3b7c97bb6c16464e9e15190c07abe9a9">setPlottingHint(QCP::phCacheLabels, false)</link>) and turns on <link linkend="class_q_custom_plot">QCustomPlot</link>&apos;s antialiasing override for all elements (<link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">setAntialiasedElements(QCP::aeAll)</link>), leading to a higher quality output. The antialiasing override allows for pixel-grid aligned drawing in the OpenGL paint device. As stated before, in OpenGL rendering the actual antialiasing of the plot is controlled with <emphasis>multisampling</emphasis>. If <emphasis>enabled</emphasis> is set to false, the antialiasing/label caching settings are restored to what they were before OpenGL was enabled, if they weren&apos;t altered in the meantime.</para>

<para><formalpara><title>Note: </title>

<para>OpenGL support is only enabled if <link linkend="class_q_custom_plot">QCustomPlot</link> is compiled with the macro <computeroutput>QCUSTOMPLOT_USE_OPENGL</computeroutput> defined. This define must be set before including the <link linkend="class_q_custom_plot">QCustomPlot</link> header both during compilation of the <link linkend="class_q_custom_plot">QCustomPlot</link> library as well as when compiling your application. It is best to just include the line <computeroutput>DEFINES += QCUSTOMPLOT_USE_OPENGL</computeroutput> in the respective qmake project files. </para>
<simplesect/>
<para>If you are using a Qt version before 5.0, you must also add the module &quot;opengl&quot; to your <computeroutput>QT</computeroutput> variable in the qmake project files. For Qt versions 5.0 and higher, <link linkend="class_q_custom_plot">QCustomPlot</link> switches to a newer OpenGL interface which is already in the &quot;gui&quot; module. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f">
                <title>QCPAbstractPlottable * QCustomPlot::plottable (int index)</title> <emphasis></emphasis>
                
<para>Returns the plottable with <emphasis>index</emphasis>. If the index is invalid, returns 0.</para>

<para>There is an overloaded version of this function with no parameter which returns the last added plottable, see <link linkend="class_q_custom_plot_1adea38bdc660da9412ba69fb939031567">QCustomPlot::plottable()</link></para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4">plottableCount</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1adea38bdc660da9412ba69fb939031567">
                <title>QCPAbstractPlottable * QCustomPlot::plottable ()</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Returns the last plottable that was added to the plot. If there are no plottables in the plot, returns 0.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4">plottableCount</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">
                <title>bool QCustomPlot::removePlottable (QCPAbstractPlottable *plottable)</title> <emphasis></emphasis>
                
<para>Removes the specified plottable from the plot and deletes it. If necessary, the corresponding legend item is also removed from the default legend (<link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">QCustomPlot::legend</link>).</para>

<para>Returns true on success.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a9a409bb3201878adb7ffba1c89c4e004">clearPlottables</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1afc210e0021480f8119bccf37839dbcc8">
                <title>bool QCustomPlot::removePlottable (int index)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Removes and deletes the plottable by its <emphasis>index</emphasis>. </para>

            </section>
            <section xml:id="class_q_custom_plot_1a9a409bb3201878adb7ffba1c89c4e004">
                <title>int QCustomPlot::clearPlottables ()</title> <emphasis></emphasis>
                
<para>Removes all plottables from the plot and deletes them. Corresponding legend items are also removed from the default legend (<link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">QCustomPlot::legend</link>).</para>

<para>Returns the number of plottables removed.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">removePlottable</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a5f4f15991c14bf9ad659bb2a19dfbed4">
                <title>int QCustomPlot::plottableCount () const</title> <emphasis></emphasis>
                
<para>Returns the number of currently existing plottables in the plot</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f">plottable</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">
                <title>QList&lt; QCPAbstractPlottable * &gt; QCustomPlot::selectedPlottables () const</title> <emphasis></emphasis>
                
<para>Returns a list of the selected plottables. If no plottables are currently selected, the list is empty.</para>

<para>There is a convenience function if you&apos;re only interested in selected graphs, see <link linkend="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06">selectedGraphs</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">QCPAbstractPlottable::setSelectable</link>, <link linkend="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436">QCPAbstractPlottable::setSelection</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1acddbbd8b16dd633f0d94e5a736fbd8cf">
                <title>QCPAbstractPlottable * QCustomPlot::plottableAt (const QPointF &amp;pos, bool onlySelectable=false) const</title> <emphasis></emphasis>
                
<para>Returns the plottable at the pixel position <emphasis>pos</emphasis>. Plottables that only consist of single lines (like graphs) have a tolerance band around them, see <link linkend="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93">setSelectionTolerance</link>. If multiple plottables come into consideration, the one closest to <emphasis>pos</emphasis> is returned.</para>

<para>If <emphasis>onlySelectable</emphasis> is true, only plottables that are selectable (<link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">QCPAbstractPlottable::setSelectable</link>) are considered.</para>

<para>If there is no plottable at <emphasis>pos</emphasis>, the return value is 0.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ac08578e0e6c059c83a8d340ba0038e8e">itemAt</link>, <link linkend="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c">layoutElementAt</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a72cefbfbb9e699940e37be605bd9c51e">
                <title>bool QCustomPlot::hasPlottable (QCPAbstractPlottable *plottable) const</title> <emphasis></emphasis>
                
<para>Returns whether this <link linkend="class_q_custom_plot">QCustomPlot</link> instance contains the <emphasis>plottable</emphasis>. </para>

            </section>
            <section xml:id="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6">
                <title>QCPGraph * QCustomPlot::graph (int index) const</title> <emphasis></emphasis>
                
<para>Returns the graph with <emphasis>index</emphasis>. If the index is invalid, returns 0.</para>

<para>There is an overloaded version of this function with no parameter which returns the last created graph, see <link linkend="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6">QCustomPlot::graph()</link></para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90">graphCount</link>, <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">addGraph</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1aac190865a67f19af3fdf2136774997af">
                <title>QCPGraph * QCustomPlot::graph () const</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Returns the last graph, that was created with <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">addGraph</link>. If there are no graphs in the plot, returns 0.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90">graphCount</link>, <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">addGraph</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">
                <title>QCPGraph * QCustomPlot::addGraph (QCPAxis *keyAxis=0, QCPAxis *valueAxis=0)</title> <emphasis></emphasis>
                
<para>Creates a new graph inside the plot. If <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> are left unspecified (0), the bottom (xAxis) is used as key and the left (yAxis) is used as value axis. If specified, <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in this <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para><emphasis>keyAxis</emphasis> will be used as key axis (typically &quot;x&quot;) and <emphasis>valueAxis</emphasis> as value axis (typically &quot;y&quot;) for the graph.</para>

<para>Returns a pointer to the newly created graph, or 0 if adding the graph failed.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6">graph</link>, <link linkend="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90">graphCount</link>, <link linkend="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713">removeGraph</link>, <link linkend="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa">clearGraphs</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713">
                <title>bool QCustomPlot::removeGraph (QCPGraph *graph)</title> <emphasis></emphasis>
                
<para>Removes the specified <emphasis>graph</emphasis> from the plot and deletes it. If necessary, the corresponding legend item is also removed from the default legend (<link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">QCustomPlot::legend</link>). If any other graphs in the plot have a channel fill set towards the removed graph, the channel fill property of those graphs is reset to zero (no channel fill).</para>

<para>Returns true on success.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa">clearGraphs</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a9554b3d2d5b10c0f884bd4010b6c192c">
                <title>bool QCustomPlot::removeGraph (int index)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Removes and deletes the graph by its <emphasis>index</emphasis>. </para>

            </section>
            <section xml:id="class_q_custom_plot_1ab0f3abff2d2f7df3668b5836f39207fa">
                <title>int QCustomPlot::clearGraphs ()</title> <emphasis></emphasis>
                
<para>Removes all graphs from the plot and deletes them. Corresponding legend items are also removed from the default legend (<link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">QCustomPlot::legend</link>).</para>

<para>Returns the number of graphs removed.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a903561be895fb6528a770d66ac5e6713">removeGraph</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a5e1787cdde868c4d3790f9ebc8207d90">
                <title>int QCustomPlot::graphCount () const</title> <emphasis></emphasis>
                
<para>Returns the number of currently existing graphs in the plot</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a6ecae130f684b25276fb47bd3a5875c6">graph</link>, <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">addGraph</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ad3547aded026d8a9ae6ef13a69080d06">
                <title>QList&lt; QCPGraph * &gt; QCustomPlot::selectedGraphs () const</title> <emphasis></emphasis>
                
<para>Returns a list of the selected graphs. If no graphs are currently selected, the list is empty.</para>

<para>If you are not only interested in selected graphs but other plottables like <link linkend="class_q_c_p_curve">QCPCurve</link>, <link linkend="class_q_c_p_bars">QCPBars</link>, etc., use <link linkend="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">selectedPlottables</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">selectedPlottables</link>, <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">QCPAbstractPlottable::setSelectable</link>, <link linkend="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436">QCPAbstractPlottable::setSelection</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239">
                <title>QCPAbstractItem * QCustomPlot::item (int index) const</title> <emphasis></emphasis>
                
<para>Returns the item with <emphasis>index</emphasis>. If the index is invalid, returns 0.</para>

<para>There is an overloaded version of this function with no parameter which returns the last added item, see <link linkend="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239">QCustomPlot::item()</link></para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2">itemCount</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a12eb2a283cf10a8a9176c01c0443e83e">
                <title>QCPAbstractItem * QCustomPlot::item () const</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Returns the last item that was added to this plot. If there are no items in the plot, returns 0.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2">itemCount</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ae04446557292551e8fb6e2c106e1848d">
                <title>bool QCustomPlot::removeItem (QCPAbstractItem *item)</title> <emphasis></emphasis>
                
<para>Removes the specified item from the plot and deletes it.</para>

<para>Returns true on success.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1abdfd07d4f0591d0cf967f85013fd3645">clearItems</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1abcfdda3d601c0441cab136137d715dea">
                <title>bool QCustomPlot::removeItem (int index)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Removes and deletes the item by its <emphasis>index</emphasis>. </para>

            </section>
            <section xml:id="class_q_custom_plot_1abdfd07d4f0591d0cf967f85013fd3645">
                <title>int QCustomPlot::clearItems ()</title> <emphasis></emphasis>
                
<para>Removes all items from the plot and deletes them.</para>

<para>Returns the number of items removed.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ae04446557292551e8fb6e2c106e1848d">removeItem</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a16025daf0341f9362be3080e404424c2">
                <title>int QCustomPlot::itemCount () const</title> <emphasis></emphasis>
                
<para>Returns the number of currently existing items in the plot</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239">item</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba">
                <title>QList&lt; QCPAbstractItem * &gt; QCustomPlot::selectedItems () const</title> <emphasis></emphasis>
                
<para>Returns a list of the selected items. If no items are currently selected, the list is empty.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2">QCPAbstractItem::setSelectable</link>, <link linkend="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378">QCPAbstractItem::setSelected</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ac08578e0e6c059c83a8d340ba0038e8e">
                <title>QCPAbstractItem * QCustomPlot::itemAt (const QPointF &amp;pos, bool onlySelectable=false) const</title> <emphasis></emphasis>
                
<para>Returns the item at the pixel position <emphasis>pos</emphasis>. Items that only consist of single lines (e.g. <link linkend="class_q_c_p_item_line">QCPItemLine</link> or <link linkend="class_q_c_p_item_curve">QCPItemCurve</link>) have a tolerance band around them, see <link linkend="class_q_custom_plot_1a4dc31241d7b09680950e19e5f971ed93">setSelectionTolerance</link>. If multiple items come into consideration, the one closest to <emphasis>pos</emphasis> is returned.</para>

<para>If <emphasis>onlySelectable</emphasis> is true, only items that are selectable (<link linkend="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2">QCPAbstractItem::setSelectable</link>) are considered.</para>

<para>If there is no item at <emphasis>pos</emphasis>, the return value is 0.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1acddbbd8b16dd633f0d94e5a736fbd8cf">plottableAt</link>, <link linkend="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c">layoutElementAt</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1af0b57f35646079f93fa6161a65b36109">
                <title>bool QCustomPlot::hasItem (QCPAbstractItem *item) const</title> <emphasis></emphasis>
                
<para>Returns whether this <link linkend="class_q_custom_plot">QCustomPlot</link> contains the <emphasis>item</emphasis>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ac042f2e78edd228ccf2f26b7fe215239">item</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159">
                <title>QCPLayer * QCustomPlot::layer (const QString &amp;name) const</title> <emphasis></emphasis>
                
<para>Returns the layer with the specified <emphasis>name</emphasis>. If there is no layer with the specified name, 0 is returned.</para>

<para>Layer names are case-sensitive.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link>, <link linkend="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94">removeLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1acbb570f4c24306e7c2324d40bfe157c2">
                <title>QCPLayer * QCustomPlot::layer (int index) const</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Returns the layer by <emphasis>index</emphasis>. If the index is invalid, 0 is returned.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link>, <link linkend="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94">removeLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a0421d647f420b0b4c57aec1708857af5">
                <title>QCPLayer * QCustomPlot::currentLayer () const</title> <emphasis></emphasis>
                
<para>Returns the layer that is set as current layer (see <link linkend="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852">setCurrentLayer</link>). </para>

            </section>
            <section xml:id="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852">
                <title>bool QCustomPlot::setCurrentLayer (const QString &amp;name)</title> <emphasis></emphasis>
                
<para>Sets the layer with the specified <emphasis>name</emphasis> to be the current layer. All layerables (<link linkend="class_q_c_p_layerable">QCPLayerable</link>), e.g. plottables and items, are created on the current layer.</para>

<para>Returns true on success, i.e. if there is a layer with the specified <emphasis>name</emphasis> in the <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para>Layer names are case-sensitive.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link>, <link linkend="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94">removeLayer</link>, <link linkend="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54">QCPLayerable::setLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a23a4d3cadad1a0063c5fe19aac5659e6">
                <title>bool QCustomPlot::setCurrentLayer (QCPLayer *layer)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Sets the provided <emphasis>layer</emphasis> to be the current layer.</para>

<para>Returns true on success, i.e. when <emphasis>layer</emphasis> is a valid layer in the <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link>, <link linkend="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94">removeLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1afa45d61e65292026f4c58c9c88c2cef0">
                <title>int QCustomPlot::layerCount () const</title> <emphasis></emphasis>
                
<para>Returns the number of currently existing layers in the plot</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159">layer</link>, <link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">
                <title>bool QCustomPlot::addLayer (const QString &amp;name, QCPLayer *otherLayer=0, LayerInsertMode insertMode=limAbove)</title> <emphasis></emphasis>
                
<para>Adds a new layer to this <link linkend="class_q_custom_plot">QCustomPlot</link> instance. The new layer will have the name <emphasis>name</emphasis>, which must be unique. Depending on <emphasis>insertMode</emphasis>, it is positioned either below or above <emphasis>otherLayer</emphasis>.</para>

<para>Returns true on success, i.e. if there is no other layer named <emphasis>name</emphasis> and <emphasis>otherLayer</emphasis> is a valid layer inside this <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para>If <emphasis>otherLayer</emphasis> is 0, the highest layer in the <link linkend="class_q_custom_plot">QCustomPlot</link> will be used.</para>

<para>For an explanation of what layers are in <link linkend="class_q_custom_plot">QCustomPlot</link>, see the documentation of <link linkend="class_q_c_p_layer">QCPLayer</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159">layer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link>, <link linkend="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94">removeLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a40f75e342c5eaab6a86066a42a0e2a94">
                <title>bool QCustomPlot::removeLayer (QCPLayer *layer)</title> <emphasis></emphasis>
                
<para>Removes the specified <emphasis>layer</emphasis> and returns true on success.</para>

<para>All layerables (e.g. plottables and items) on the removed layer will be moved to the layer below <emphasis>layer</emphasis>. If <emphasis>layer</emphasis> is the bottom layer, the layerables are moved to the layer above. In both cases, the total rendering order of all layerables in the <link linkend="class_q_custom_plot">QCustomPlot</link> is preserved.</para>

<para>If <emphasis>layer</emphasis> is the current layer (<link linkend="class_q_custom_plot_1a73a6dc47c653bb6f8f030abca5a11852">setCurrentLayer</link>), the layer below (or above, if bottom layer) becomes the new current layer.</para>

<para>It is not possible to remove the last layer of the plot.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159">layer</link>, <link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">
                <title>bool QCustomPlot::moveLayer (QCPLayer *layer, QCPLayer *otherLayer, LayerInsertMode insertMode=limAbove)</title> <emphasis></emphasis>
                
<para>Moves the specified <emphasis>layer</emphasis> either above or below <emphasis>otherLayer</emphasis>. Whether it&apos;s placed above or below is controlled with <emphasis>insertMode</emphasis>.</para>

<para>Returns true on success, i.e. when both <emphasis>layer</emphasis> and <emphasis>otherLayer</emphasis> are valid layers in the <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a0a96244e7773b242ef23c32b7bdfb159">layer</link>, <link linkend="class_q_custom_plot_1ad5255393df078448bb6ac83fa5db5f52">addLayer</link>, <link linkend="class_q_custom_plot_1ae896140beff19424e9e9e02d6e331104">moveLayer</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6">
                <title>int QCustomPlot::axisRectCount () const</title> <emphasis></emphasis>
                
<para>Returns the number of axis rects in the plot.</para>

<para>All axis rects can be accessed via <link linkend="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9">QCustomPlot::axisRect()</link>.</para>

<para>Initially, only one axis rect exists in the plot.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9">axisRect</link>, <link linkend="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe">axisRects</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9">
                <title>QCPAxisRect * QCustomPlot::axisRect (int index=0) const</title> <emphasis></emphasis>
                
<para>Returns the axis rect with <emphasis>index</emphasis>.</para>

<para>Initially, only one axis rect (with index 0) exists in the plot. If multiple axis rects were added, all of them may be accessed with this function in a linear fashion (even when they are nested in a layout hierarchy or inside other axis rects via <link linkend="class_q_c_p_axis_rect_1a949f803466619924c7018df4b511ae10">QCPAxisRect::insetLayout</link>).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6">axisRectCount</link>, <link linkend="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe">axisRects</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a12af771429e2d7e313c8c5d5fca068fe">
                <title>QList&lt; QCPAxisRect * &gt; QCustomPlot::axisRects () const</title> <emphasis></emphasis>
                
<para>Returns all axis rects in the plot.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a8f85940aaac50efb466287d9d2d04ec6">axisRectCount</link>, <link linkend="class_q_custom_plot_1ae5eefcb5f6ca26689b1fd4f6e25b42f9">axisRect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c">
                <title>QCPLayoutElement * QCustomPlot::layoutElementAt (const QPointF &amp;pos) const</title> <emphasis></emphasis>
                
<para>Returns the layout element at pixel position <emphasis>pos</emphasis>. If there is no element at that position, returns 0.</para>

<para>Only visible elements are used. If <link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPLayoutElement::setVisible</link> on the element itself or on any of its parent elements is set to false, it will not be considered.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ac08578e0e6c059c83a8d340ba0038e8e">itemAt</link>, <link linkend="class_q_custom_plot_1acddbbd8b16dd633f0d94e5a736fbd8cf">plottableAt</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a4a08842fc3e9ba6bed83aa410c5c5ba5">
                <title>QCPAxisRect * QCustomPlot::axisRectAt (const QPointF &amp;pos) const</title> <emphasis></emphasis>
                
<para>Returns the layout element of type <link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> at pixel position <emphasis>pos</emphasis>. This method ignores other layout elements even if they are visually in front of the axis rect (e.g. a <link linkend="class_q_c_p_legend">QCPLegend</link>). If there is no axis rect at that position, returns 0.</para>

<para>Only visible axis rects are used. If <link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPLayoutElement::setVisible</link> on the axis rect itself or on any of its parent elements is set to false, it will not be considered.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1afaa1d304e0287d140fd238e90889ef3c">layoutElementAt</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ad86528f2cee6c7e446dea4a6e8839935">
                <title>void QCustomPlot::rescaleAxes (bool onlyVisiblePlottables=false)</title> <emphasis></emphasis>
                
<para>Rescales the axes such that all plottables (like graphs) in the plot are fully visible.</para>

<para>if <emphasis>onlyVisiblePlottables</emphasis> is set to true, only the plottables that have their visibility set to true (<link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPLayerable::setVisible</link>), will be used to rescale the axes.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">QCPAbstractPlottable::rescaleAxes</link>, <link linkend="class_q_c_p_axis_1a499345f02ebce4b23d8ccec96e58daa9">QCPAxis::rescale</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe">
                <title>QList&lt; QCPAxis * &gt; QCustomPlot::selectedAxes () const</title> <emphasis></emphasis>
                
<para>Returns the axes that currently have selected parts, i.e. whose selection state is not <link linkend="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115fae0df8123a5528d5ccf87cb7794f971ea">QCPAxis::spNone</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">selectedPlottables</link>, <link linkend="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4">selectedLegends</link>, <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_c_p_axis_1ab9d7a69277dcbed9119b3c1f25ca19c3">QCPAxis::setSelectedParts</link>, <link linkend="class_q_c_p_axis_1a513f9b9e326c505d9bec54880031b085">QCPAxis::setSelectableParts</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4">
                <title>QList&lt; QCPLegend * &gt; QCustomPlot::selectedLegends () const</title> <emphasis></emphasis>
                
<para>Returns the legends that currently have selected parts, i.e. whose selection state is not <link linkend="class_q_c_p_legend_1a5404de8bc1e4a994ca4ae69e2c7072f1a378201c07d500af7126e3ec91652eed7">QCPLegend::spNone</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">selectedPlottables</link>, <link linkend="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe">selectedAxes</link>, <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_c_p_legend_1a2aee309bb5c2a794b1987f3fc97f8ad8">QCPLegend::setSelectedParts</link>, <link linkend="class_q_c_p_legend_1a9ce60aa8bbd89f62ae4fa83ac6c60110">QCPLegend::setSelectableParts</link>, <link linkend="class_q_c_p_legend_1ac7d9e567d5c551e09cd9bcc4306c5532">QCPLegend::selectedItems</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c">
                <title>void QCustomPlot::deselectAll ()</title> <emphasis></emphasis>
                
<para>Deselects all layerables (plottables, items, axes, legends,...) of the <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para>Since calling this function is not a user interaction, this does not emit the <link linkend="class_q_custom_plot_1a500c64a109bc773c973ad274f2fa4190">selectionChangedByUser</link> signal. The individual selectionChanged signals are emitted though, if the objects were previously selected.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">setInteractions</link>, <link linkend="class_q_custom_plot_1a747faaab57c56891e901a1e97fa4359a">selectedPlottables</link>, <link linkend="class_q_custom_plot_1afda487bcf2d6cf1a57173d82495e29ba">selectedItems</link>, <link linkend="class_q_custom_plot_1a7e6b07792b1cb2c31681596582d14dbe">selectedAxes</link>, <link linkend="class_q_custom_plot_1ac87624ddff1cbf4064781a8e8ae321c4">selectedLegends</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">
                <title>bool QCustomPlot::savePdf (const QString &amp;fileName, int width=0, int height=0, QCP::ExportPen exportPen=QCP::epAllowCosmetic, const QString &amp;pdfCreator=QString(), const QString &amp;pdfTitle=QString())</title> <emphasis></emphasis>
                
<para>Saves a PDF with the vectorized plot to the file <emphasis>fileName</emphasis>. The axis ratio as well as the scale of texts and lines will be derived from the specified <emphasis>width</emphasis> and <emphasis>height</emphasis>. This means, the output will look like the normal on-screen output of a <link linkend="class_q_custom_plot">QCustomPlot</link> widget with the corresponding pixel width and height. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the exported image will have the same dimensions as the <link linkend="class_q_custom_plot">QCustomPlot</link> widget currently has.</para>

<para>Setting <emphasis>exportPen</emphasis> to <link linkend="namespace_q_c_p_1a17844f19e1019693a953e1eb93536d2faae8fcfaafee234ce18558afef83f6a78">QCP::epNoCosmetic</link> allows to disable the use of cosmetic pens when drawing to the PDF file. Cosmetic pens are pens with numerical width 0, which are always drawn as a one pixel wide line, no matter what zoom factor is set in the PDF-Viewer. For more information about cosmetic pens, see the QPainter and QPen documentation.</para>

<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <link linkend="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c">deselectAll</link> before calling this function.</para>

<para>Returns true on success.</para>

<para><formalpara><title>Warning: </title>

<para><itemizedlist>
<listitem>
<para>If you plan on editing the exported PDF file with a vector graphics editor like Inkscape, it is advised to set <emphasis>exportPen</emphasis> to <link linkend="namespace_q_c_p_1a17844f19e1019693a953e1eb93536d2faae8fcfaafee234ce18558afef83f6a78">QCP::epNoCosmetic</link> to avoid losing those cosmetic lines (which might be quite many, because cosmetic pens are the default for e.g. axes and tick marks). </para>
</listitem>
<listitem>
<para>If calling this function inside the constructor of the parent of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget (i.e. the <link linkend="class_main_window">MainWindow</link> constructor, if <link linkend="class_q_custom_plot">QCustomPlot</link> is inside the <link linkend="class_main_window">MainWindow</link>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</listitem>
</itemizedlist>
<emphasis>pdfCreator</emphasis> and <emphasis>pdfTitle</emphasis> may be used to set the according metadata fields in the resulting PDF file.</para>
</formalpara>
<formalpara><title>Note: </title>

<para>On Android systems, this method does nothing and issues an according qDebug warning message. This is also the case if for other reasons the define flag <computeroutput>QT_NO_PRINTER</computeroutput> is set.</para>
</formalpara>
<formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link>, <link linkend="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d">saveBmp</link>, <link linkend="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4">saveJpg</link>, <link linkend="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352">saveRastered</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">
                <title>bool QCustomPlot::savePng (const QString &amp;fileName, int width=0, int height=0, double scale=1.0, int quality=-1, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</title> <emphasis></emphasis>
                
<para>Saves a PNG image file to <emphasis>fileName</emphasis> on disc. The output plot will have the dimensions <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels, multiplied by <emphasis>scale</emphasis>. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the current width and height of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is used instead. Line widths and texts etc. are not scaled up when larger widths/heights are used. If you want that effect, use the <emphasis>scale</emphasis> parameter.</para>

<para>For example, if you set both <emphasis>width</emphasis> and <emphasis>height</emphasis> to 100 and <emphasis>scale</emphasis> to 2, you will end up with an image file of size 200*200 in which all graphical elements are scaled up by factor 2 (line widths, texts, etc.). This scaling is not done by stretching a 100*100 image, the result will have full 200*200 pixel resolution.</para>

<para>If you use a high scaling factor, it is recommended to enable antialiasing for all elements by temporarily setting <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> to <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0caa897c232a0ffc8368e7c100ffc59ef31">QCP::aeAll</link> as this allows <link linkend="class_q_custom_plot">QCustomPlot</link> to place objects with sub-pixel accuracy.</para>

<para>image compression can be controlled with the <emphasis>quality</emphasis> parameter which must be between 0 and 100 or -1 to use the default setting.</para>

<para>The <emphasis>resolution</emphasis> will be written to the image file header and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>

<para>Returns true on success. If this function fails, most likely the PNG format isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>

<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <link linkend="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c">deselectAll</link> before calling this function.</para>

<para>If you want the PNG to have a transparent background, call <link linkend="class_q_custom_plot_1a8ed256cf467bfa7ba1f9feaae62c3bd0">setBackground(const QBrush &amp;brush)</link> with no brush (Qt::NoBrush) or a transparent color (Qt::transparent), before saving.</para>

<para><formalpara><title>Warning: </title>

<para>If calling this function inside the constructor of the parent of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget (i.e. the <link linkend="class_main_window">MainWindow</link> constructor, if <link linkend="class_q_custom_plot">QCustomPlot</link> is inside the <link linkend="class_main_window">MainWindow</link>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</formalpara>
<formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">savePdf</link>, <link linkend="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d">saveBmp</link>, <link linkend="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4">saveJpg</link>, <link linkend="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352">saveRastered</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4">
                <title>bool QCustomPlot::saveJpg (const QString &amp;fileName, int width=0, int height=0, double scale=1.0, int quality=-1, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</title> <emphasis></emphasis>
                
<para>Saves a JPEG image file to <emphasis>fileName</emphasis> on disc. The output plot will have the dimensions <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels, multiplied by <emphasis>scale</emphasis>. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the current width and height of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is used instead. Line widths and texts etc. are not scaled up when larger widths/heights are used. If you want that effect, use the <emphasis>scale</emphasis> parameter.</para>

<para>For example, if you set both <emphasis>width</emphasis> and <emphasis>height</emphasis> to 100 and <emphasis>scale</emphasis> to 2, you will end up with an image file of size 200*200 in which all graphical elements are scaled up by factor 2 (line widths, texts, etc.). This scaling is not done by stretching a 100*100 image, the result will have full 200*200 pixel resolution.</para>

<para>If you use a high scaling factor, it is recommended to enable antialiasing for all elements by temporarily setting <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> to <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0caa897c232a0ffc8368e7c100ffc59ef31">QCP::aeAll</link> as this allows <link linkend="class_q_custom_plot">QCustomPlot</link> to place objects with sub-pixel accuracy.</para>

<para>image compression can be controlled with the <emphasis>quality</emphasis> parameter which must be between 0 and 100 or -1 to use the default setting.</para>

<para>The <emphasis>resolution</emphasis> will be written to the image file header and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>

<para>Returns true on success. If this function fails, most likely the JPEG format isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>

<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <link linkend="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c">deselectAll</link> before calling this function.</para>

<para><formalpara><title>Warning: </title>

<para>If calling this function inside the constructor of the parent of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget (i.e. the <link linkend="class_main_window">MainWindow</link> constructor, if <link linkend="class_q_custom_plot">QCustomPlot</link> is inside the <link linkend="class_main_window">MainWindow</link>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</formalpara>
<formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">savePdf</link>, <link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link>, <link linkend="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d">saveBmp</link>, <link linkend="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352">saveRastered</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d">
                <title>bool QCustomPlot::saveBmp (const QString &amp;fileName, int width=0, int height=0, double scale=1.0, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</title> <emphasis></emphasis>
                
<para>Saves a BMP image file to <emphasis>fileName</emphasis> on disc. The output plot will have the dimensions <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels, multiplied by <emphasis>scale</emphasis>. If either <emphasis>width</emphasis> or <emphasis>height</emphasis> is zero, the current width and height of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is used instead. Line widths and texts etc. are not scaled up when larger widths/heights are used. If you want that effect, use the <emphasis>scale</emphasis> parameter.</para>

<para>For example, if you set both <emphasis>width</emphasis> and <emphasis>height</emphasis> to 100 and <emphasis>scale</emphasis> to 2, you will end up with an image file of size 200*200 in which all graphical elements are scaled up by factor 2 (line widths, texts, etc.). This scaling is not done by stretching a 100*100 image, the result will have full 200*200 pixel resolution.</para>

<para>If you use a high scaling factor, it is recommended to enable antialiasing for all elements by temporarily setting <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> to <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0caa897c232a0ffc8368e7c100ffc59ef31">QCP::aeAll</link> as this allows <link linkend="class_q_custom_plot">QCustomPlot</link> to place objects with sub-pixel accuracy.</para>

<para>The <emphasis>resolution</emphasis> will be written to the image file header and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>

<para>Returns true on success. If this function fails, most likely the BMP format isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>

<para>The objects of the plot will appear in the current selection state. If you don&apos;t want any selected objects to be painted in their selected look, deselect everything with <link linkend="class_q_custom_plot_1a9d4808ab925b003054085246c92a257c">deselectAll</link> before calling this function.</para>

<para><formalpara><title>Warning: </title>

<para>If calling this function inside the constructor of the parent of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget (i.e. the <link linkend="class_main_window">MainWindow</link> constructor, if <link linkend="class_q_custom_plot">QCustomPlot</link> is inside the <link linkend="class_main_window">MainWindow</link>), always provide explicit non-zero widths and heights. If you leave <emphasis>width</emphasis> or <emphasis>height</emphasis> as 0 (default), this function uses the current width and height of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget. However, in Qt, these aren&apos;t defined yet inside the constructor, so you would get an image that has strange widths/heights.</para>
</formalpara>
<formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">savePdf</link>, <link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link>, <link linkend="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4">saveJpg</link>, <link linkend="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352">saveRastered</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352">
                <title>bool QCustomPlot::saveRastered (const QString &amp;fileName, int width, int height, double scale, const char *format, int quality=-1, int resolution=96, QCP::ResolutionUnit resolutionUnit=QCP::ruDotsPerInch)</title> <emphasis></emphasis>
                
<para>Saves the plot to a rastered image file <emphasis>fileName</emphasis> in the image format <emphasis>format</emphasis>. The plot is sized to <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels and scaled with <emphasis>scale</emphasis>. (width 100 and scale 2.0 lead to a full resolution file with width 200.) If the <emphasis>format</emphasis> supports compression, <emphasis>quality</emphasis> may be between 0 and 100 to control it.</para>

<para>Returns true on success. If this function fails, most likely the given <emphasis>format</emphasis> isn&apos;t supported by the system, see Qt docs about QImageWriter::supportedImageFormats().</para>

<para>The <emphasis>resolution</emphasis> will be written to the image file header (if the file format supports this) and has no direct consequence for the quality or the pixel size. However, if opening the image with a tool which respects the metadata, it will be able to scale the image to match either a given size in real units of length (inch, centimeters, etc.), or the target display DPI. You can specify in which units <emphasis>resolution</emphasis> is given, by setting <emphasis>resolutionUnit</emphasis>. The <emphasis>resolution</emphasis> is converted to the format&apos;s expected resolution unit internally.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d">saveBmp</link>, <link linkend="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4">saveJpg</link>, <link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link>, <link linkend="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">savePdf</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe">
                <title>QPixmap QCustomPlot::toPixmap (int width=0, int height=0, double scale=1.0)</title> <emphasis></emphasis>
                
<para>Renders the plot to a pixmap and returns it.</para>

<para>The plot is sized to <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels and scaled with <emphasis>scale</emphasis>. (width 100 and scale 2.0 lead to a full resolution pixmap with width 200.)</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9">toPainter</link>, <link linkend="class_q_custom_plot_1ad7723ce2edfa270632ef42b03a444352">saveRastered</link>, <link linkend="class_q_custom_plot_1ae3a86ed0795670e50afa21759d4fa13d">saveBmp</link>, <link linkend="class_q_custom_plot_1ac92cc9256d12f354b40a4be4600b5fb9">savePng</link>, <link linkend="class_q_custom_plot_1a76f0d278e630a711fa6f48048cfd83e4">saveJpg</link>, <link linkend="class_q_custom_plot_1ad5acd34f6b39c3516887d7e54fec2412">savePdf</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9">
                <title>void QCustomPlot::toPainter (QCPPainter *painter, int width=0, int height=0)</title> <emphasis></emphasis>
                
<para>Renders the plot using the passed <emphasis>painter</emphasis>.</para>

<para>The plot is sized to <emphasis>width</emphasis> and <emphasis>height</emphasis> in pixels. If the <emphasis>painter&apos;s</emphasis> scale is not 1.0, the resulting plot will appear scaled accordingly.</para>

<para><formalpara><title>Note: </title>

<para>If you are restricted to using a QPainter (instead of <link linkend="class_q_c_p_painter">QCPPainter</link>), create a temporary QPicture and open a <link linkend="class_q_c_p_painter">QCPPainter</link> on it. Then call <link linkend="class_q_custom_plot_1a1be68d5c0f1e086d6374d1340a193fb9">toPainter</link> with this <link linkend="class_q_c_p_painter">QCPPainter</link>. After ending the paint operation on the picture, draw it with the QPainter. This will reproduce the painter actions the <link linkend="class_q_c_p_painter">QCPPainter</link> took, with a QPainter.</para>
</formalpara>
<formalpara><title>See also: </title>

<para><link linkend="class_q_custom_plot_1aabb974d71ce96c137dc04eb6eab844fe">toPixmap</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af">
                <title>void QCustomPlot::replot (QCustomPlot::RefreshPriority refreshPriority=QCustomPlot::rpRefreshHint)</title> <emphasis></emphasis>
                
<para>Causes a complete replot into the internal paint buffer(s). Finally, the widget surface is refreshed with the new buffer contents. This is the method that must be called to make changes to the plot, e.g. on the axis ranges or data points of graphs, visible.</para>

<para>The parameter <emphasis>refreshPriority</emphasis> can be used to fine-tune the timing of the replot. For example if your application calls <link linkend="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af">replot</link> very quickly in succession (e.g. multiple independent functions change some aspects of the plot and each wants to make sure the change gets replotted), it is advisable to set <emphasis>refreshPriority</emphasis> to <link linkend="class_q_custom_plot_1a45d61392d13042e712a956d27762aa39a019650c6ddf308f97e811fbfff207a8f">QCustomPlot::rpQueuedReplot</link>. This way, the actual replotting is deferred to the next event loop iteration. Multiple successive calls of <link linkend="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af">replot</link> with this priority will only cause a single replot, avoiding redundant replots and improving performance.</para>

<para>Under a few circumstances, <link linkend="class_q_custom_plot">QCustomPlot</link> causes a replot by itself. Those are resize events of the <link linkend="class_q_custom_plot">QCustomPlot</link> widget and user interactions (object selection and range dragging/zooming).</para>

<para>Before the replot happens, the signal <link linkend="class_q_custom_plot_1a0cd30e29b73efd6afe096e44bc5956f5">beforeReplot</link> is emitted. After the replot, <link linkend="class_q_custom_plot_1a6f4fa624af060bc5919c5f266cf426a0">afterReplot</link> is emitted. It is safe to mutually connect the replot slot with any of those two signals on two QCustomPlots to make them replot synchronously, it won&apos;t cause an infinite recursion.</para>

<para>If a layer is in mode <link linkend="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">QCPLayer::lmBuffered</link> (<link linkend="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b">QCPLayer::setMode</link>), it is also possible to replot only that specific layer via <link linkend="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180">QCPLayer::replot</link>. See the documentation there for details. </para>

            </section>
            <section xml:id="class_q_custom_plot_1a968a01cd4077d63aecde1aef1db057fc">
                <title>QSize QCustomPlot::minimumSizeHint () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ac9d6fe101e082daf756903b11f6e6213">
                <title>QSize QCustomPlot::sizeHint () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a8068b368e5813065ee0f4cf7c6d21330">
                <title>void QCustomPlot::paintEvent (QPaintEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1af5b69dc6a431562ecdd1d0718bcbdf70">
                <title>void QCustomPlot::resizeEvent (QResizeEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a344075e6e80ed6d575c79b81694abb8a">
                <title>void QCustomPlot::mouseDoubleClickEvent (QMouseEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1aac0a7296a6031dc667c01c1abd4ecc6b">
                <title>void QCustomPlot::mousePressEvent (QMouseEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ae7abdc93b26d2ad4632c1ab75ae5b46f">
                <title>void QCustomPlot::mouseMoveEvent (QMouseEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1adc24846f52199e5a9bc35c387a6ce68d">
                <title>void QCustomPlot::mouseReleaseEvent (QMouseEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a7848c9ac8be60bbd8fcea9b53be543c5">
                <title>void QCustomPlot::wheelEvent (QWheelEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ad7a7d878bf050f101a43008e7d8fdb52">
                <title>void QCustomPlot::draw (QCPPainter *painter)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a6e6693e2c249f65437382ffd93405e04">
                <title>void QCustomPlot::updateLayout ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a8b46607021c463c94709d3504951cb47">
                <title>void QCustomPlot::axisRemoved (QCPAxis *axis)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a9d173454555021c9ffd4f675c4d9037a">
                <title>void QCustomPlot::legendRemoved (QCPLegend *legend)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ac10849411e1d0e858ea7f29c8ade364c">
                <title>void QCustomPlot::processRectSelection (QRect rect, QMouseEvent *event)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a5508a207dcc279f316142f96d984bba3">
                <title>void QCustomPlot::processRectZoom (QRect rect, QMouseEvent *event)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ac13c10fff6613e3e80e13c787b010838">
                <title>void QCustomPlot::processPointSelection (QMouseEvent *event)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1aeba7733bb9fadfb5a375b3f40de9e58a">
                <title>bool QCustomPlot::registerPlottable (QCPAbstractPlottable *plottable)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1acfc01230bddaea4f1782e4aa7d130af6">
                <title>bool QCustomPlot::registerGraph (QCPGraph *graph)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1afbd4010b2e3f364c8d512691b2a1640a">
                <title>bool QCustomPlot::registerItem (QCPAbstractItem *item)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a7f1ca67a66d37b6d260a0b93de08f3bd">
                <title>void QCustomPlot::updateLayerIndices () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a12536fa6d5deb34ec620acb5134ca82a">
                <title>QCPLayerable * QCustomPlot::layerableAt (const QPointF &amp;pos, bool onlySelectable, QVariant *selectionDetails=0) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ac9048589e78e7959d27a2c48c253e159">
                <title>QList&lt; QCPLayerable * &gt; QCustomPlot::layerableListAt (const QPointF &amp;pos, bool onlySelectable, QList&lt; QVariant &gt; *selectionDetails=0) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a05dd52438cee4353b18c1e53a439008d">
                <title>void QCustomPlot::drawBackground (QCPPainter *painter)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a2685341f7242c3882f4cc5e379308d71">
                <title>void QCustomPlot::setupPaintBuffers ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1a943b57596a1adf7f0e75c3b50e407ae6">
                <title>QCPAbstractPaintBuffer * QCustomPlot::createPaintBuffer ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1ad452b582348c8e99462d83fe1cd0279b">
                <title>bool QCustomPlot::hasInvalidatedPaintBuffers ()</title> <emphasis></emphasis>
                
<para>This method returns whether any of the paint buffers held by this <link linkend="class_q_custom_plot">QCustomPlot</link> instance are invalidated.</para>

<para>If any buffer is invalidated, a partial replot (<link linkend="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180">QCPLayer::replot</link>) is not allowed and always causes a full replot (<link linkend="class_q_custom_plot_1aa4bfe7d70dbe67e81d877819b75ab9af">QCustomPlot::replot</link>) of all layers. This is the case when for example the layer order has changed, new layers were added, layers were removed, or layer modes were changed (<link linkend="class_q_c_p_layer_1a938d57b04f4e4c23cedf1711f983919b">QCPLayer::setMode</link>).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_paint_buffer_1ae4c7dc70dfc66be2879ce297b2b3d67f">QCPAbstractPaintBuffer::setInvalidated</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_custom_plot_1a8954c4667c51070ff4e9b02d858fd190">
                <title>bool QCustomPlot::setupOpenGl ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_custom_plot_1aaa3073362074581a7b5905726b4a0067">
                <title>void QCustomPlot::freeOpenGl ()</title> <emphasis></emphasis>
                
            </section>
</section>
