<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_item_tracer">
<title>QCPItemTracer class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPItemTracer</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_item_tracer__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPItemTracer</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_item_tracer__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500">TracerStyle</link> {
<link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500aac27462c79146225bfa8fba24d2ee8a4">tsNone</link>,
<link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500a3323fb04017146e4885e080a459472fa">tsPlus</link>,
<link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500af562ec81ac3ba99e26ef8540cf1ec16f">tsCrosshair</link>,
<link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500ae2252c28f4842880d71e9f94e69de94e">tsCircle</link>,
<link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500a4ed5f01f2c5fd86d980366d79f481b9b">tsSquare</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Atributos PÃºblicos</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPItemPosition *const position</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Atributos Protegidos</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen mPen</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen mSelectedPen</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush mBrush</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush mSelectedBrush</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mSize</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>TracerStyle mStyle</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPGraph * mGraph</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mGraphKey</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mInterpolating</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mClipToAxisRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPAxisRect &gt; mClipAxisRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPItemPosition * &gt; mPositions</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPItemAnchor * &gt; mAnchors</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mSelectable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mSelected</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mVisible</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCustomPlot * mParentPlot</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPLayerable &gt; mParentLayerable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayer * mLayer</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mAntialiased</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_item_tracer_1adc5ca846eeac323db4aa1fc4081e36be">QCPItemTracer</link> (
<link linkend="class_q_custom_plot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_item_tracer_1a43686565a9b70815915618636b9bdf0f">~QCPItemTracer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen <link linkend="class_q_c_p_item_tracer_1a789cdc627868f5a4a0956816072571c9">pen</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen <link linkend="class_q_c_p_item_tracer_1ad231a97bac99e01778618d1a5720b17d">selectedPen</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush <link linkend="class_q_c_p_item_tracer_1a6dd4660e70f58bb00390bcda56be568d">brush</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush <link linkend="class_q_c_p_item_tracer_1ae3e48270b4a6ec20f7a9e1f63e778243">selectedBrush</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_item_tracer_1a4e42d7b49f293273a74a49a2457856e2">size</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500">TracerStyle</link> <link linkend="class_q_c_p_item_tracer_1afdaee32c9ccc9c14502b28d3d86bf5ed">style</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_graph">QCPGraph</link> * <link linkend="class_q_c_p_item_tracer_1ac6526e3e1fff79894f034823461b138a">graph</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_item_tracer_1ac39a0791109588d11bb97cd643da2470">graphKey</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_item_tracer_1ae9ab6d72e0a35e1769c0b5a9b58181f2">interpolating</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1af8048636fc1ef0152e51809b008df2ca">setPen</link> (
const QPen &amp; pen)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1ae1bf70db7f13f928660168cd3e5069f3">setSelectedPen</link> (
const QPen &amp; pen)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1a2c303f7470a30084daa201ed556b3c36">setBrush</link> (
const QBrush &amp; brush)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1a0f55c084980a7a312af859d3e7b558ef">setSelectedBrush</link> (
const QBrush &amp; brush)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1ae47fe0617f5fef5fdb766999569be10a">setSize</link> (
double size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1a41a2ac4f1acd7897b4e2a2579c03204e">setStyle</link> (
<link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500">TracerStyle</link> style)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1af5886f4ded8dd68cb4f3388f390790c0">setGraph</link> (
<link linkend="class_q_c_p_graph">QCPGraph</link> * graph)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link> (
double key)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1a6c244a9d1175bef12b50afafd4f5fcd2">setInterpolating</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_item_tracer_1a9fd955fea40e977d66f3a9fd5765aec4">selectTest</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_item_tracer_1a5b90296109e36384aedbc8908a670413">updatePosition</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_item_1a42715ad5f3d7fca6854025fa5636f436">clipToAxisRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> * <link linkend="class_q_c_p_abstract_item_1ae162314efd3fe1a6d4df11da1d275d52">clipAxisRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_item_1ae29aa489767352b40c4aaa7ea50c5582">selectable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_item_1aa069fba320a13639f119f82ad29ead96">selected</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06">setClipToAxisRect</link> (
bool clip)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347">setClipAxisRect</link> (
<link linkend="class_q_c_p_axis_rect">QCPAxisRect</link> * rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2">setSelectable</link> (
bool selectable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378">setSelected</link> (
bool selected)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_item_position">QCPItemPosition</link> * &gt; <link linkend="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454">positions</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="class_q_c_p_item_anchor">QCPItemAnchor</link> * &gt; <link linkend="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659">anchors</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_item_position">QCPItemPosition</link> * <link linkend="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d">position</link> (
const QString &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_item_anchor">QCPItemAnchor</link> * <link linkend="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb">anchor</link> (
const QString &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_item_1a84914f4516f9b38ef0bd89eafe3dbda7">hasAnchor</link> (
const QString &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70">visible</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_custom_plot">QCustomPlot</link> * <link linkend="class_q_c_p_layerable_1a473edb813a4c1929d6b6a8fe3ff3faf7">parentPlot</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layerable">QCPLayerable</link> * <link linkend="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858">parentLayerable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_layer">QCPLayer</link> * <link linkend="class_q_c_p_layerable_1a5ff4862e8c784c9f5986dbc1533ba2a4">layer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709">antialiased</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">setVisible</link> (
bool on)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT bool <link linkend="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54">setLayer</link> (
<link linkend="class_q_c_p_layer">QCPLayer</link> * layer)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083">setLayer</link> (
const QString &amp; layerName)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581">setAntialiased</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_item_tracer_1a11f187ffea436434f3b5cfc387811967">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen <link linkend="class_q_c_p_item_tracer_1abffdcf64d0f84f7b41bd4af07d144642">mainPen</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush <link linkend="class_q_c_p_item_tracer_1a94f81c54197577e86c53a60cf39155cd">mainBrush</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037">QCP::Interaction</link> <link linkend="class_q_c_p_abstract_item_1aceb5f99c361cf023c7cbe7339ea29571">selectionCategory</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QRect <link linkend="class_q_c_p_abstract_item_1a6ad60000f29afe11035e1f791dcbd45a">clipRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_item_1a5579ce9ec7cad202499886b042448b10">applyDefaultAntialiasingHint</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17">selectEvent</link> (
QMouseEvent * event, bool additive, const QVariant &amp; details, bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_item_1af9093798cb07a861dcc73f93ca16c0c1">deselectEvent</link> (
bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QPointF <link linkend="class_q_c_p_abstract_item_1ada5bad4e1196c4fc0d0d12328e24b8f2">anchorPixelPosition</link> (
int anchorId)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_abstract_item_1a7dfc2007e36d09b8b5c988a9f06d6a7e">rectDistance</link> (
const QRectF &amp; rect, const QPointF &amp; pos, bool filledRect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_item_position">QCPItemPosition</link> * <link linkend="class_q_c_p_abstract_item_1a75036d39c4d4e2e1a7dd145fff915d32">createPosition</link> (
const QString &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_item_anchor">QCPItemAnchor</link> * <link linkend="class_q_c_p_abstract_item_1af3fc92527802078ca395138748b629a7">createAnchor</link> (
const QString &amp; name, int anchorId)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382">parentPlotInitialized</link> (
<link linkend="class_q_custom_plot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link> (
QMouseEvent * event, const QVariant &amp; details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link> (
QMouseEvent * event, const QPointF &amp; startPos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link> (
QMouseEvent * event, const QPointF &amp; startPos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> (
QMouseEvent * event, const QVariant &amp; details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link> (
QWheelEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc">initializeParentPlot</link> (
<link linkend="class_q_custom_plot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a">setParentLayerable</link> (
<link linkend="class_q_c_p_layerable">QCPLayerable</link> * parentLayerable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4">moveToLayer</link> (
<link linkend="class_q_c_p_layer">QCPLayer</link> * layer, bool prepend)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b">applyAntialiasingHint</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, bool localAntialiased, <link linkend="namespace_q_c_p_1ae55dbe315d41fe80f29ba88100843a0c">QCP::AntialiasedElement</link> overrideElement)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>Item that sticks to <link linkend="class_q_c_p_graph">QCPGraph</link> data points. </para>
    </simplesect>
        <simplesect>
            <title>DescriÃ§Ã£o detalhada</title>

<para> The tracer can be connected with a <link linkend="class_q_c_p_graph">QCPGraph</link> via <link linkend="class_q_c_p_item_tracer_1af5886f4ded8dd68cb4f3388f390790c0">setGraph</link>. Then it will automatically adopt the coordinate axes of the graph and update its <emphasis>position</emphasis> to be on the graph&apos;s data. This means the key stays controllable via <link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link>, but the value will follow the graph data. If a <link linkend="class_q_c_p_graph">QCPGraph</link> is connected, note that setting the coordinates of the tracer item directly via <emphasis>position</emphasis> will have no effect because they will be overriden in the next redraw (this is when the coordinate update happens).</para>

<para>If the specified key in <link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link> is outside the key bounds of the graph, the tracer will stay at the corresponding end of the graph.</para>

<para>With <link linkend="class_q_c_p_item_tracer_1a6c244a9d1175bef12b50afafd4f5fcd2">setInterpolating</link> you may specify whether the tracer may only stay exactly on data points or whether it interpolates data points linearly, if given a key that lies between two data points of the graph.</para>

<para>The tracer has different visual styles, see <link linkend="class_q_c_p_item_tracer_1a41a2ac4f1acd7897b4e2a2579c03204e">setStyle</link>. It is also possible to make the tracer have no own visual appearance (set the style to <link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500aac27462c79146225bfa8fba24d2ee8a4">tsNone</link>), and just connect other item positions to the tracer <emphasis>position</emphasis> (used as an anchor) via <link linkend="class_q_c_p_item_position_1ac094d67a95d2dceafa0d50b9db3a7e51">QCPItemPosition::setParentAnchor</link>.</para>

<para><formalpara><title>ObservaÃ§Ã£o: </title>

<para>The tracer position is only automatically updated upon redraws. So when the data of the graph changes and immediately afterwards (without a redraw) the position coordinates of the tracer are retrieved, they will not reflect the updated data of the graph. In this case <link linkend="class_q_c_p_item_tracer_1a5b90296109e36384aedbc8908a670413">updatePosition</link> must be called manually, prior to reading the tracer coordinates. </para>
</formalpara>
</para>
                <para>Definition at line 6512 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500">
               <title>enum TracerStyle </title>
               
<para>The different visual appearances a tracer item can have. Some styles size may be controlled with <link linkend="class_q_c_p_item_tracer_1ae47fe0617f5fef5fdb766999569be10a">setSize</link>.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1a41a2ac4f1acd7897b4e2a2579c03204e">setStyle</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumeradores:</title>
                    <variablelist>
                        <varlistentry xml:id="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500aac27462c79146225bfa8fba24d2ee8a4">
                            <term>tsNone</term>
                            <listitem>
                                <para>The tracer is not visible.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500a3323fb04017146e4885e080a459472fa">
                            <term>tsPlus</term>
                            <listitem>
                                <para>A plus shaped crosshair with limited size.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500af562ec81ac3ba99e26ef8540cf1ec16f">
                            <term>tsCrosshair</term>
                            <listitem>
                                <para>A plus shaped crosshair which spans the complete axis rect.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500ae2252c28f4842880d71e9f94e69de94e">
                            <term>tsCircle</term>
                            <listitem>
                                <para>A circle.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500a4ed5f01f2c5fd86d980366d79f481b9b">
                            <term>tsSquare</term>
                            <listitem>
                                <para>A square.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 6531 of file qcustomplot.h
                    <computeroutput><literallayout>
{
tsNone, 
tsPlus, 
tsCrosshair, 
tsCircle, 
tsSquare, 
}TracerStyle;
                    </literallayout></computeroutput>
                </para>
            </section>
        <section>
            <title>Atributos</title>
        </section>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="class_q_c_p_item_tracer_1adc5ca846eeac323db4aa1fc4081e36be">
                <title>QCPItemTracer::QCPItemTracer (QCustomPlot *parentPlot)</title> <emphasis></emphasis>
                
<para>Creates a tracer item and sets default values.</para>

<para>The created item is automatically registered with <emphasis>parentPlot</emphasis>. This <link linkend="class_q_custom_plot">QCustomPlot</link> instance takes ownership of the item, so do not delete it manually but use <link linkend="class_q_custom_plot_1ae04446557292551e8fb6e2c106e1848d">QCustomPlot::removeItem()</link> instead. </para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a43686565a9b70815915618636b9bdf0f">
                <title>QCPItemTracer::~QCPItemTracer ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1a789cdc627868f5a4a0956816072571c9">
                <title>QPen QCPItemTracer::pen () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1ad231a97bac99e01778618d1a5720b17d">
                <title>QPen QCPItemTracer::selectedPen () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1a6dd4660e70f58bb00390bcda56be568d">
                <title>QBrush QCPItemTracer::brush () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1ae3e48270b4a6ec20f7a9e1f63e778243">
                <title>QBrush QCPItemTracer::selectedBrush () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1a4e42d7b49f293273a74a49a2457856e2">
                <title>double QCPItemTracer::size () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1afdaee32c9ccc9c14502b28d3d86bf5ed">
                <title>TracerStyle QCPItemTracer::style () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1ac6526e3e1fff79894f034823461b138a">
                <title>QCPGraph* QCPItemTracer::graph () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1ac39a0791109588d11bb97cd643da2470">
                <title>double QCPItemTracer::graphKey () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1ae9ab6d72e0a35e1769c0b5a9b58181f2">
                <title>bool QCPItemTracer::interpolating () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1af8048636fc1ef0152e51809b008df2ca">
                <title>void QCPItemTracer::setPen (const QPen &amp;pen)</title> <emphasis></emphasis>
                
<para>Sets the pen that will be used to draw the line of the tracer</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1ae1bf70db7f13f928660168cd3e5069f3">setSelectedPen</link>, <link linkend="class_q_c_p_item_tracer_1a2c303f7470a30084daa201ed556b3c36">setBrush</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1ae1bf70db7f13f928660168cd3e5069f3">
                <title>void QCPItemTracer::setSelectedPen (const QPen &amp;pen)</title> <emphasis></emphasis>
                
<para>Sets the pen that will be used to draw the line of the tracer when selected</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1af8048636fc1ef0152e51809b008df2ca">setPen</link>, <link linkend="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378">setSelected</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a2c303f7470a30084daa201ed556b3c36">
                <title>void QCPItemTracer::setBrush (const QBrush &amp;brush)</title> <emphasis></emphasis>
                
<para>Sets the brush that will be used to draw any fills of the tracer</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1a0f55c084980a7a312af859d3e7b558ef">setSelectedBrush</link>, <link linkend="class_q_c_p_item_tracer_1af8048636fc1ef0152e51809b008df2ca">setPen</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a0f55c084980a7a312af859d3e7b558ef">
                <title>void QCPItemTracer::setSelectedBrush (const QBrush &amp;brush)</title> <emphasis></emphasis>
                
<para>Sets the brush that will be used to draw any fills of the tracer, when selected.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1a2c303f7470a30084daa201ed556b3c36">setBrush</link>, <link linkend="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378">setSelected</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1ae47fe0617f5fef5fdb766999569be10a">
                <title>void QCPItemTracer::setSize (double size)</title> <emphasis></emphasis>
                
<para>Sets the size of the tracer in pixels, if the style supports setting a size (e.g. <link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500a4ed5f01f2c5fd86d980366d79f481b9b">tsSquare</link> does, <link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500af562ec81ac3ba99e26ef8540cf1ec16f">tsCrosshair</link> does not). </para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a41a2ac4f1acd7897b4e2a2579c03204e">
                <title>void QCPItemTracer::setStyle (TracerStyle style)</title> <emphasis></emphasis>
                
<para>Sets the style/visual appearance of the tracer.</para>

<para>If you only want to use the tracer <emphasis>position</emphasis> as an anchor for other items, set <emphasis>style</emphasis> to <link linkend="class_q_c_p_item_tracer_1a2f05ddb13978036f902ca3ab47076500aac27462c79146225bfa8fba24d2ee8a4">tsNone</link>. </para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1af5886f4ded8dd68cb4f3388f390790c0">
                <title>void QCPItemTracer::setGraph (QCPGraph *graph)</title> <emphasis></emphasis>
                
<para>Sets the <link linkend="class_q_c_p_graph">QCPGraph</link> this tracer sticks to. The tracer <emphasis>position</emphasis> will be set to type <link linkend="class_q_c_p_item_position_1aad9936c22bf43e3d358552f6e86dbdc8ad5ffb8dc99ad73263f7010c77342294c">QCPItemPosition::ptPlotCoords</link> and the axes will be set to the axes of <emphasis>graph</emphasis>.</para>

<para>To free the tracer from any graph, set <emphasis>graph</emphasis> to 0. The tracer <emphasis>position</emphasis> can then be placed freely like any other item position. This is the state the tracer will assume when its graph gets deleted while still attached to it.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">
                <title>void QCPItemTracer::setGraphKey (double key)</title> <emphasis></emphasis>
                
<para>Sets the key of the graph&apos;s data point the tracer will be positioned at. This is the only free coordinate of a tracer when attached to a graph.</para>

<para>Depending on <link linkend="class_q_c_p_item_tracer_1a6c244a9d1175bef12b50afafd4f5fcd2">setInterpolating</link>, the tracer will be either positioned on the data point closest to <emphasis>key</emphasis>, or will stay exactly at <emphasis>key</emphasis> and interpolate the value linearly.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1af5886f4ded8dd68cb4f3388f390790c0">setGraph</link>, <link linkend="class_q_c_p_item_tracer_1a6c244a9d1175bef12b50afafd4f5fcd2">setInterpolating</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a6c244a9d1175bef12b50afafd4f5fcd2">
                <title>void QCPItemTracer::setInterpolating (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether the value of the graph&apos;s data points shall be interpolated, when positioning the tracer.</para>

<para>If <emphasis>enabled</emphasis> is set to false and a key is given with <link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link>, the tracer is placed on the data point of the graph which is closest to the key, but which is not necessarily exactly there. If <emphasis>enabled</emphasis> is true, the tracer will be positioned exactly at the specified key, and the appropriate value will be interpolated from the graph&apos;s data points linearly.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_item_tracer_1af5886f4ded8dd68cb4f3388f390790c0">setGraph</link>, <link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a9fd955fea40e977d66f3a9fd5765aec4">
                <title>double QCPItemTracer::selectTest (const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This function is used to decide whether a click hits a layerable object or not.</para>

<para><emphasis>pos</emphasis> is a point in pixel coordinates on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface. This function returns the shortest pixel distance of this point to the object. If the object is either invisible or the distance couldn&apos;t be determined, -1.0 is returned. Further, if <emphasis>onlySelectable</emphasis> is true and the object is not selectable, -1.0 is returned, too.</para>

<para>If the object is represented not by single lines but by an area like a <link linkend="class_q_c_p_item_text">QCPItemText</link> or the bars of a <link linkend="class_q_c_p_bars">QCPBars</link> plottable, a click inside the area should also be considered a hit. In these cases this function thus returns a constant value greater zero but still below the parent plot&apos;s selection tolerance. (typically the selectionTolerance multiplied by 0.99).</para>

<para>Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i.e. closer than 0.99*selectionTolerance).</para>

<para>The actual setting of the selection state is not done by this function. This is handled by the parent <link linkend="class_q_custom_plot">QCustomPlot</link> when the mouseReleaseEvent occurs, and the finally selected object is notified via the <link linkend="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17">selectEvent</link>/<link linkend="class_q_c_p_abstract_item_1af9093798cb07a861dcc73f93ca16c0c1">deselectEvent</link> methods.</para>

<para><emphasis>details</emphasis> is an optional output parameter. Every layerable subclass may place any information in <emphasis>details</emphasis>. This information will be passed to <link linkend="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17">selectEvent</link> when the parent <link linkend="class_q_custom_plot">QCustomPlot</link> decides on the basis of this selectTest call, that the object was successfully selected. The subsequent call to <link linkend="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17">selectEvent</link> will carry the <emphasis>details</emphasis>. This is useful for multi-part objects (like <link linkend="class_q_c_p_axis">QCPAxis</link>). This way, a possibly complex calculation to decide which part was clicked is only done once in <link linkend="class_q_c_p_item_tracer_1a9fd955fea40e977d66f3a9fd5765aec4">selectTest</link>. The result (i.e. the actually clicked part) can then be placed in <emphasis>details</emphasis>. So in the subsequent <link linkend="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17">selectEvent</link>, the decision which part was selected doesn&apos;t have to be done a second time for a single selection operation.</para>

<para>You may pass 0 as <emphasis>details</emphasis> to indicate that you are not interested in those selection details.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17">selectEvent</link>, <link linkend="class_q_c_p_abstract_item_1af9093798cb07a861dcc73f93ca16c0c1">deselectEvent</link>, <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link>, <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a5b90296109e36384aedbc8908a670413">
                <title>void QCPItemTracer::updatePosition ()</title> <emphasis></emphasis>
                
<para>If the tracer is connected with a graph (<link linkend="class_q_c_p_item_tracer_1af5886f4ded8dd68cb4f3388f390790c0">setGraph</link>), this function updates the tracer&apos;s <emphasis>position</emphasis> to reside on the graph data, depending on the configured key (<link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link>).</para>

<para>It is called automatically on every redraw and normally doesn&apos;t need to be called manually. One exception is when you want to read the tracer coordinates via <emphasis>position</emphasis> and are not sure that the graph&apos;s data (or the tracer key with <link linkend="class_q_c_p_item_tracer_1a6840143b42f3b685cedf7c6d83a704c8">setGraphKey</link>) hasn&apos;t changed since the last redraw. In that situation, call this function before accessing <emphasis>position</emphasis>, to make sure you don&apos;t get out-of-date coordinates.</para>

<para>If there is no graph set on this tracer, this function does nothing. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a42715ad5f3d7fca6854025fa5636f436">
                <title>bool QCPAbstractItem::clipToAxisRect () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1ae162314efd3fe1a6d4df11da1d275d52">
                <title>QCPAxisRect * QCPAbstractItem::clipAxisRect () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1ae29aa489767352b40c4aaa7ea50c5582">
                <title>bool QCPAbstractItem::selectable () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1aa069fba320a13639f119f82ad29ead96">
                <title>bool QCPAbstractItem::selected () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06">
                <title>void QCPAbstractItem::setClipToAxisRect (bool clip)</title> <emphasis></emphasis>
                
<para>Sets whether the item shall be clipped to an axis rect or whether it shall be visible on the entire <link linkend="class_q_custom_plot">QCustomPlot</link>. The axis rect can be set with <link linkend="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347">setClipAxisRect</link>.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347">setClipAxisRect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a7dc75fcbcd10206fe0b75d757ea7a347">
                <title>void QCPAbstractItem::setClipAxisRect (QCPAxisRect *rect)</title> <emphasis></emphasis>
                
<para>Sets the clip axis rect. It defines the rect that will be used to clip the item when <link linkend="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06">setClipToAxisRect</link> is set to true.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a39e05b9d4176b9accafc746d16ca6a06">setClipToAxisRect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2">
                <title>void QCPAbstractItem::setSelectable (bool selectable)</title> <emphasis></emphasis>
                
<para>Sets whether the user can (de-)select this item by clicking on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface. (When <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> contains QCustomPlot::iSelectItems.)</para>

<para>However, even when <emphasis>selectable</emphasis> was set to false, it is possible to set the selection manually, by calling <link linkend="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378">setSelected</link>.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link>, <link linkend="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378">setSelected</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a203de94ad586cc44d16c9565f49d3378">
                <title>void QCPAbstractItem::setSelected (bool selected)</title> <emphasis></emphasis>
                
<para>Sets whether this item is selected or not. When selected, it might use a different visual appearance (e.g. pen and brush), this depends on the specific item though.</para>

<para>The entire selection mechanism for items is handled automatically when <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> contains QCustomPlot::iSelectItems. You only need to call this function when you wish to change the selection state manually.</para>

<para>This function can change the selection state even when <link linkend="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2">setSelectable</link> was set to false.</para>

<para>emits the <link linkend="class_q_c_p_abstract_item_1aa5cffb034fc65dbb91c77e02c1c14251">selectionChanged</link> signal when <emphasis>selected</emphasis> is different from the previous selection state.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a8a8e32a55bc478b849756a78c2d87fd2">setSelectable</link>, <link linkend="class_q_c_p_abstract_item_1ae41d0349d68bb802c49104afd100ba2a">selectTest</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454">
                <title>QList&lt; QCPItemPosition * &gt; QCPAbstractItem::positions () const</title> <emphasis></emphasis>
                
<para>Returns all positions of the item in a list.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659">anchors</link>, <link linkend="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d">position</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659">
                <title>QList&lt; QCPItemAnchor * &gt; QCPAbstractItem::anchors () const</title> <emphasis></emphasis>
                
<para>Returns all anchors of the item in a list. Note that since a position (<link linkend="class_q_c_p_item_position">QCPItemPosition</link>) is always also an anchor, the list will also contain the positions of this item.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454">positions</link>, <link linkend="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb">anchor</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d">
                <title>QCPItemPosition * QCPAbstractItem::position (const QString &amp;name) const</title> <emphasis></emphasis>
                
<para>Returns the <link linkend="class_q_c_p_item_position">QCPItemPosition</link> with the specified <emphasis>name</emphasis>. If this item doesn&apos;t have a position by that name, returns 0.</para>

<para>This function provides an alternative way to access item positions. Normally, you access positions direcly by their member pointers (which typically have the same variable name as <emphasis>name</emphasis>).</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a709f655ac3f7f22d452714134662b454">positions</link>, <link linkend="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb">anchor</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb">
                <title>QCPItemAnchor * QCPAbstractItem::anchor (const QString &amp;name) const</title> <emphasis></emphasis>
                
<para>Returns the <link linkend="class_q_c_p_item_anchor">QCPItemAnchor</link> with the specified <emphasis>name</emphasis>. If this item doesn&apos;t have an anchor by that name, returns 0.</para>

<para>This function provides an alternative way to access item anchors. Normally, you access anchors direcly by their member pointers (which typically have the same variable name as <emphasis>name</emphasis>).</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a81d1ecfea3368b836cf9675a0045e659">anchors</link>, <link linkend="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d">position</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_item_1a84914f4516f9b38ef0bd89eafe3dbda7">
                <title>bool QCPAbstractItem::hasAnchor (const QString &amp;name) const</title> <emphasis></emphasis>
                
<para>Returns whether this item has an anchor with the specified <emphasis>name</emphasis>.</para>

<para>Note that you can check for positions with this function, too. This is because every position is also an anchor (<link linkend="class_q_c_p_item_position">QCPItemPosition</link> inherits from <link linkend="class_q_c_p_item_anchor">QCPItemAnchor</link>).</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_abstract_item_1a139c255ea8831642fac91748e29a5adb">anchor</link>, <link linkend="class_q_c_p_abstract_item_1a2589c3d298f9a576d77d9addb440a18d">position</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70">
                <title>bool QCPLayerable::visible () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a473edb813a4c1929d6b6a8fe3ff3faf7">
                <title>QCustomPlot* QCPLayerable::parentPlot () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858">
                <title>QCPLayerable * QCPLayerable::parentLayerable () const</title> <emphasis></emphasis>
                
<para>Returns the parent layerable of this layerable. The parent layerable is used to provide visibility hierarchies in conjunction with the method <link linkend="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link>. This way, layerables only get drawn if their parent layerables are visible, too.</para>

<para>Note that a parent layerable is not necessarily also the QObject parent for memory management. Further, a layerable doesn&apos;t always have a parent layerable, so this function may return 0.</para>

<para>A parent layerable is set implicitly when placed inside layout elements and doesn&apos;t need to be set manually by the user. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a5ff4862e8c784c9f5986dbc1533ba2a4">
                <title>QCPLayer* QCPLayerable::layer () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709">
                <title>bool QCPLayerable::antialiased () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8">
                <title>void QCPLayerable::setVisible (bool on)</title> <emphasis></emphasis>
                
<para>Sets the visibility of this layerable object. If an object is not visible, it will not be drawn on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface, and user interaction with it (e.g. click and selection) is not possible. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54">
                <title>bool QCPLayerable::setLayer (QCPLayer *layer)</title> <emphasis></emphasis>
                
<para>Sets the <emphasis>layer</emphasis> of this layerable object. The object will be placed on top of the other objects already on <emphasis>layer</emphasis>.</para>

<para>If <emphasis>layer</emphasis> is 0, this layerable will not be on any layer and thus not appear in the plot (or interact/receive events).</para>

<para>Returns true if the layer of this layerable was successfully changed to <emphasis>layer</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083">
                <title>bool QCPLayerable::setLayer (const QString &amp;layerName)</title> <emphasis></emphasis>
                
<para>Esse Ã© um mÃ©todo provido por conveniÃªncia. Ele difere do mÃ©todo acima apenas na lista de argumentos que devem ser utilizados. Sets the layer of this layerable object by name</para>

<para>Returns true on success, i.e. if <emphasis>layerName</emphasis> is a valid layer name. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581">
                <title>void QCPLayerable::setAntialiased (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether this object will be drawn antialiased or not.</para>

<para>Note that antialiasing settings may be overridden by <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> and <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">QCustomPlot::setNotAntialiasedElements</link>. </para>

            </section>
            <section xml:id="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">
                <title>bool QCPLayerable::realVisibility () const</title> <emphasis></emphasis>
                
<para>Returns whether this layerable is visible, taking the visibility of the layerable parent and the visibility of this layerable&apos;s layer into account. This is the method that is consulted to decide whether a layerable shall be drawn or not.</para>

<para>If this layerable has a direct layerable parent (usually set via hierarchies implemented in subclasses, like in the case of <link linkend="class_q_c_p_layout_element">QCPLayoutElement</link>), this function returns true only if this layerable has its visibility set to true and the parent layerable&apos;s <link linkend="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link> returns true. </para>

            </section>
            <section xml:id="class_q_c_p_item_tracer_1a11f187ffea436434f3b5cfc387811967">
                <title>void QCPItemTracer::draw (QCPPainter *painter) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1abffdcf64d0f84f7b41bd4af07d144642">
                <title>QPen QCPItemTracer::mainPen () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_item_tracer_1a94f81c54197577e86c53a60cf39155cd">
                <title>QBrush QCPItemTracer::mainBrush () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1aceb5f99c361cf023c7cbe7339ea29571">
                <title>QCP::Interaction QCPAbstractItem::selectionCategory () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1a6ad60000f29afe11035e1f791dcbd45a">
                <title>QRect QCPAbstractItem::clipRect () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1a5579ce9ec7cad202499886b042448b10">
                <title>void QCPAbstractItem::applyDefaultAntialiasingHint (QCPPainter *painter) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1aa4b969c58797f39c9c0b6c07c7869d17">
                <title>void QCPAbstractItem::selectEvent (QMouseEvent *event, bool additive, const QVariant &amp;details, bool *selectionStateChanged) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1af9093798cb07a861dcc73f93ca16c0c1">
                <title>void QCPAbstractItem::deselectEvent (bool *selectionStateChanged) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1ada5bad4e1196c4fc0d0d12328e24b8f2">
                <title>QPointF QCPAbstractItem::anchorPixelPosition (int anchorId) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1a7dfc2007e36d09b8b5c988a9f06d6a7e">
                <title>double QCPAbstractItem::rectDistance (const QRectF &amp;rect, const QPointF &amp;pos, bool filledRect) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1a75036d39c4d4e2e1a7dd145fff915d32">
                <title>QCPItemPosition * QCPAbstractItem::createPosition (const QString &amp;name)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_item_1af3fc92527802078ca395138748b629a7">
                <title>QCPItemAnchor * QCPAbstractItem::createAnchor (const QString &amp;name, int anchorId)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382">
                <title>void QCPLayerable::parentPlotInitialized (QCustomPlot *parentPlot)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">
                <title>void QCPLayerable::mousePressEvent (QMouseEvent *event, const QVariant &amp;details)</title> <emphasis></emphasis>
                
<para>This event gets called when the user presses a mouse button while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>. For example, One-dimensional plottables like <link linkend="class_q_c_p_graph">QCPGraph</link> or <link linkend="class_q_c_p_bars">QCPBars</link> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <link linkend="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f">QCPAxis::SelectablePart</link> in the case of axes).</para>

<para><link linkend="class_q_custom_plot">QCustomPlot</link> uses an event propagation system that works the same as Qt&apos;s system. If your layerable doesn&apos;t reimplement the <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link> or explicitly calls <computeroutput>event-&gt;ignore()</computeroutput> in its reimplementation, the event will be propagated to the next layerable in the stacking order.</para>

<para>Once a layerable has accepted the <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, it is considered the mouse grabber and will receive all following calls to <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link> or <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>

<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link>, <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">
                <title>void QCPLayerable::mouseMoveEvent (QMouseEvent *event, const QPointF &amp;startPos)</title> <emphasis></emphasis>
                
<para>This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link> occured, that started the mouse interaction.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">
                <title>void QCPLayerable::mouseReleaseEvent (QMouseEvent *event, const QPointF &amp;startPos)</title> <emphasis></emphasis>
                
<para>This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link> occured, that started the mouse interaction.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">
                <title>void QCPLayerable::mouseDoubleClickEvent (QMouseEvent *event, const QVariant &amp;details)</title> <emphasis></emphasis>
                
<para>This event gets called when the user presses the mouse button a second time in a double-click, while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>.</para>

<para>The <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> is called instead of the second <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>. So in the case of a double-click, the event succession is <emphasis>pressEvent &#8211; releaseEvent &#8211; doubleClickEvent &#8211; releaseEvent</emphasis>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>. For example, One-dimensional plottables like <link linkend="class_q_c_p_graph">QCPGraph</link> or <link linkend="class_q_c_p_bars">QCPBars</link> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <link linkend="class_q_c_p_axis_1abee4c7a54c468b1385dfce2c898b115f">QCPAxis::SelectablePart</link> in the case of axes).</para>

<para>Similarly to <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, once a layerable has accepted the <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, it is considered the mouse grabber and will receive all following calls to <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link> and <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>

<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link>, <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">
                <title>void QCPLayerable::wheelEvent (QWheelEvent *event)</title> <emphasis></emphasis>
                
<para>This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="class_q_c_p_layerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="class_q_custom_plot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>.</para>

<para>The <computeroutput>event-&gt;delta()</computeroutput> indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making <computeroutput>event-&gt;delta()</computeroutput> larger. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja tambÃ©m: </title>

<para><link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link>, <link linkend="class_q_c_p_layerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link>, <link linkend="class_q_c_p_layerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc">
                <title>void QCPLayerable::initializeParentPlot (QCustomPlot *parentPlot)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a">
                <title>void QCPLayerable::setParentLayerable (QCPLayerable *parentLayerable)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4">
                <title>bool QCPLayerable::moveToLayer (QCPLayer *layer, bool prepend)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b">
                <title>void QCPLayerable::applyAntialiasingHint (QCPPainter *painter, bool localAntialiased, QCP::AntialiasedElement overrideElement) const</title> <emphasis></emphasis>
                
            </section>
</section>
