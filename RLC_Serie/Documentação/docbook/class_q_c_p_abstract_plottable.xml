<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_abstract_plottable">
<title>QCPAbstractPlottable class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPAbstractPlottable</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_abstract_plottable__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPAbstractPlottable</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_abstract_plottable__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Protected Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QString mName</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mAntialiasedFill</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mAntialiasedScatters</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen mPen</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush mBrush</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPAxis &gt; mKeyAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPAxis &gt; mValueAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::SelectionType mSelectable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPDataSelection mSelection</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPSelectionDecorator * mSelectionDecorator</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a">QCPAbstractPlottable</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * keyAxis, <link linkend="class_q_c_p_axis">QCPAxis</link> * valueAxis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_abstract_plottable_1a88112bcbe9eb995b1190ad7591f2d0b5">~QCPAbstractPlottable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QString <link linkend="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0">name</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9">antialiasedFill</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2">antialiasedScatters</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPen <link linkend="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3">pen</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QBrush <link linkend="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826">brush</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis">QCPAxis</link> * <link linkend="class_q_c_p_abstract_plottable_1a2cdd6f0dd5e9a979037f86b4000d9cfe">keyAxis</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_axis">QCPAxis</link> * <link linkend="class_q_c_p_abstract_plottable_1af47809a644a68ffd955fb30b01fb4f2f">valueAxis</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038">QCP::SelectionType</link> <link linkend="class_q_c_p_abstract_plottable_1a016653741033bd332d1d4c3c725cc284">selectable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4">selected</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_data_selection">QCPDataSelection</link> <link linkend="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f">selection</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_selection_decorator">QCPSelectionDecorator</link> * <link linkend="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e">selectionDecorator</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f">setName</link> (
const QString &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536">setAntialiasedFill</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02">setAntialiasedScatters</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7">setPen</link> (
const QPen &amp; pen)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74">setBrush</link> (
const QBrush &amp; brush)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920">setKeyAxis</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * axis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb">setValueAxis</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * axis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">setSelectable</link> (
<link linkend="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038">QCP::SelectionType</link> selectable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436">setSelection</link> (
<link linkend="class_q_c_p_data_selection">QCPDataSelection</link> selection)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9">setSelectionDecorator</link> (
<link linkend="class_q_c_p_selection_decorator">QCPSelectionDecorator</link> * decorator)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_abstract_plottable_1a38efe9641d972992a3d44204bc80ec1d">selectTest</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_plottable_interface1_d">QCPPlottableInterface1D</link> * <link linkend="class_q_c_p_abstract_plottable_1a81fd9fd5c4f429c074785e2eb238a8e7">interface1D</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_abstract_plottable_1a4da16d3cd4b509e1104a9b0275623c96">getKeyRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_abstract_plottable_1a4de773988b21ed090fddd27c6a3a3dcb">getValueRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain, const <link linkend="class_q_c_p_range">QCPRange</link> &amp; inKeyRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93">coordsToPixels</link> (
double key, double value, double &amp; x, double &amp; y)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const QPointF <link linkend="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708">coordsToPixels</link> (
double key, double value)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd">pixelsToCoords</link> (
double x, double y, double &amp; key, double &amp; value)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69">pixelsToCoords</link> (
const QPointF &amp; pixelPos, double &amp; key, double &amp; value)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link> (
bool onlyEnlarge)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308">rescaleKeyAxis</link> (
bool onlyEnlarge)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e">rescaleValueAxis</link> (
bool onlyEnlarge, bool inKeyRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f">addToLegend</link> (
<link linkend="class_q_c_p_legend">QCPLegend</link> * legend)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5">addToLegend</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20">removeFromLegend</link> (
<link linkend="class_q_c_p_legend">QCPLegend</link> * legend)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c">removeFromLegend</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QRect <link linkend="class_q_c_p_abstract_plottable_1a635cee3effc07ad421414c76fd83548c">clipRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037">QCP::Interaction</link> <link linkend="class_q_c_p_abstract_plottable_1af80ad8531642e786b6f4fad551c203c4">selectionCategory</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1ac032077fb0db93d6faa3273d02363398">applyDefaultAntialiasingHint</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link> (
QMouseEvent * event, bool additive, const QVariant &amp; details, bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e">deselectEvent</link> (
bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_plottable_1a9a450783fd9ed539e589999fd390cdf7">drawLegendIcon</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, const QRectF &amp; rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed">applyFillAntialiasingHint</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9">applyScattersAntialiasingHint</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>The abstract base class for all data representing objects in a plot. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>It defines a very basic interface like name, pen, brush, visibility etc. Since this class is abstract, it can&apos;t be instantiated. Use one of the subclasses or create a subclass yourself to create new ways of displaying data (see &quot;Creating own plottables&quot; below). Plottables that display one-dimensional data (i.e. data points have a single key dimension and one or multiple values at each key) are based off of the template subclass <link linkend="class_q_c_p_abstract_plottable1_d">QCPAbstractPlottable1D</link>, see details there.</para>

<para>All further specifics are in the subclasses, for example: <itemizedlist>
<listitem>
<para>A normal graph with possibly a line and/or scatter points <link linkend="class_q_c_p_graph">QCPGraph</link> (typically created with <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">QCustomPlot::addGraph</link>) </para>
</listitem>
<listitem>
<para>A parametric curve: <link linkend="class_q_c_p_curve">QCPCurve</link> </para>
</listitem>
<listitem>
<para>A bar chart: <link linkend="class_q_c_p_bars">QCPBars</link> </para>
</listitem>
<listitem>
<para>A statistical box plot: <link linkend="class_q_c_p_statistical_box">QCPStatisticalBox</link> </para>
</listitem>
<listitem>
<para>A color encoded two-dimensional map: <link linkend="class_q_c_p_color_map">QCPColorMap</link> </para>
</listitem>
<listitem>
<para>An OHLC/Candlestick chart: <link linkend="class_q_c_p_financial">QCPFinancial</link></para>
</listitem>
</itemizedlist>
</para>
<section xml:id="class_q_c_p_abstract_plottable_1plottables-subclassing">
<title>Creating own plottables</title>

<para>Subclassing directly from <link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> is only recommended if you wish to display two-dimensional data like <link linkend="class_q_c_p_color_map">QCPColorMap</link>, i.e. two logical key dimensions and one (or more) data dimensions. If you want to display data with only one logical key dimension, you should rather derive from <link linkend="class_q_c_p_abstract_plottable1_d">QCPAbstractPlottable1D</link>.</para>

<para>If subclassing <link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> directly, these are the pure virtual functions you must implement: <itemizedlist>
<listitem>
<para><link linkend="class_q_c_p_abstract_plottable_1a38efe9641d972992a3d44204bc80ec1d">selectTest</link> </para>
</listitem>
<listitem>
<para><link linkend="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3">draw</link> </para>
</listitem>
<listitem>
<para><link linkend="class_q_c_p_abstract_plottable_1a9a450783fd9ed539e589999fd390cdf7">drawLegendIcon</link> </para>
</listitem>
<listitem>
<para><link linkend="class_q_c_p_abstract_plottable_1a4da16d3cd4b509e1104a9b0275623c96">getKeyRange</link> </para>
</listitem>
<listitem>
<para><link linkend="class_q_c_p_abstract_plottable_1a4de773988b21ed090fddd27c6a3a3dcb">getValueRange</link></para>
</listitem>
</itemizedlist>
See the documentation of those functions for what they need to do.</para>

<para>For drawing your plot, you can use the <link linkend="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93">coordsToPixels</link> functions to translate a point in plot coordinates to pixel coordinates. This function is quite convenient, because it takes the orientation of the key and value axes into account for you (x and y are swapped when the key axis is vertical and the value axis horizontal). If you are worried about performance (i.e. you need to translate many points in a loop like <link linkend="class_q_c_p_graph">QCPGraph</link>), you can directly use <link linkend="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4">QCPAxis::coordToPixel</link>. However, you must then take care about the orientation of the axis yourself.</para>

<para>Here are some important members you inherit from <link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link>: <table frame="all">
    <title></title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
    <tbody>
<row>
<entry>
<para><link linkend="class_q_custom_plot">QCustomPlot</link> *<emphasis role="bold">mParentPlot</emphasis>  </para>
</entry><entry>
<para>A pointer to the parent <link linkend="class_q_custom_plot">QCustomPlot</link> instance. The parent plot is inferred from the axes that are passed in the constructor. </para>
</entry></row>
<row>
<entry>
<para>QString <emphasis role="bold">mName</emphasis>  </para>
</entry><entry>
<para>The name of the plottable. </para>
</entry></row>
<row>
<entry>
<para>QPen <emphasis role="bold">mPen</emphasis>  </para>
</entry><entry>
<para>The generic pen of the plottable. You should use this pen for the most prominent data representing lines in the plottable (e.g <link linkend="class_q_c_p_graph">QCPGraph</link> uses this pen for its graph lines and scatters) </para>
</entry></row>
<row>
<entry>
<para>QBrush <emphasis role="bold">mBrush</emphasis>  </para>
</entry><entry>
<para>The generic brush of the plottable. You should use this brush for the most prominent fillable structures in the plottable (e.g. <link linkend="class_q_c_p_graph">QCPGraph</link> uses this brush to control filling under the graph) </para>
</entry></row>
<row>
<entry>
<para>QPointer&lt;<link linkend="class_q_c_p_axis">QCPAxis</link>&gt; <emphasis role="bold">mKeyAxis</emphasis>, <emphasis role="bold">mValueAxis</emphasis>  </para>
</entry><entry>
<para>The key and value axes this plottable is attached to. Call their <link linkend="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4">QCPAxis::coordToPixel</link> functions to translate coordinates to pixels in either the key or value dimension. Make sure to check whether the pointer is null before using it. If one of the axes is null, don&apos;t draw the plottable. </para>
</entry></row>
<row>
<entry>
<para><link linkend="class_q_c_p_selection_decorator">QCPSelectionDecorator</link> <emphasis role="bold">mSelectionDecorator</emphasis>  </para>
</entry><entry>
<para>The currently set selection decorator which specifies how selected data of the plottable shall be drawn and decorated. When drawing your data, you must consult this decorator for the appropriate pen/brush before drawing unselected/selected data segments. Finally, you should call its <link linkend="class_q_c_p_selection_decorator_1a4f8eb49e277063845391e803ae23054a">QCPSelectionDecorator::drawDecoration</link> method at the end of your <link linkend="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3">draw</link> implementation. </para>
</entry></row>
<row>
<entry>
<para><link linkend="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038">QCP::SelectionType</link> <emphasis role="bold">mSelectable</emphasis>  </para>
</entry><entry>
<para>In which composition, if at all, this plottable&apos;s data may be selected. Enforcing this setting on the data selection is done by <link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> automatically. </para>
</entry></row>
<row>
<entry>
<para><link linkend="class_q_c_p_data_selection">QCPDataSelection</link> <emphasis role="bold">mSelection</emphasis>  </para>
</entry><entry>
<para>Holds the current selection state of the plottable&apos;s data, i.e. the selected data ranges (<link linkend="class_q_c_p_data_range">QCPDataRange</link>).  </para>
</entry></row>
    </tbody>
    </tgroup>
</table>
</para>
</section>
                <para>Definition at line 3288 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a">
                <title>QCPAbstractPlottable::QCPAbstractPlottable (QCPAxis *keyAxis, QCPAxis *valueAxis)</title> <emphasis></emphasis>
                
<para>Constructs an abstract plottable which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <link linkend="class_q_custom_plot">QCustomPlot</link> instance and have perpendicular orientations. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>

<para>Since <link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link> is an abstract class that defines the basic interface to plottables, it can&apos;t be directly instantiated.</para>

<para>You probably want one of the subclasses like <link linkend="class_q_c_p_graph">QCPGraph</link> or <link linkend="class_q_c_p_curve">QCPCurve</link> instead. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a88112bcbe9eb995b1190ad7591f2d0b5">
                <title>QCPAbstractPlottable::~QCPAbstractPlottable ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0">
                <title>QString QCPAbstractPlottable::name () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9">
                <title>bool QCPAbstractPlottable::antialiasedFill () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2">
                <title>bool QCPAbstractPlottable::antialiasedScatters () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3">
                <title>QPen QCPAbstractPlottable::pen () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826">
                <title>QBrush QCPAbstractPlottable::brush () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a2cdd6f0dd5e9a979037f86b4000d9cfe">
                <title>QCPAxis* QCPAbstractPlottable::keyAxis () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1af47809a644a68ffd955fb30b01fb4f2f">
                <title>QCPAxis* QCPAbstractPlottable::valueAxis () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a016653741033bd332d1d4c3c725cc284">
                <title>QCP::SelectionType QCPAbstractPlottable::selectable () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4">
                <title>bool QCPAbstractPlottable::selected () const</title> <emphasis></emphasis>
                
<para>Returns true if there are any data points of the plottable currently selected. Use <link linkend="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f">selection</link> to retrieve the current <link linkend="class_q_c_p_data_selection">QCPDataSelection</link>. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a040bf09f41d456284cfd39cc37aa068f">
                <title>QCPDataSelection QCPAbstractPlottable::selection () const</title> <emphasis></emphasis>
                
<para>Returns a <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> encompassing all the data points that are currently selected on this plottable.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4">selected</link>, <link linkend="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436">setSelection</link>, <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">setSelectable</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e">
                <title>QCPSelectionDecorator * QCPAbstractPlottable::selectionDecorator () const</title> <emphasis></emphasis>
                
<para>Provides access to the selection decorator of this plottable. The selection decorator controls how selected data ranges are drawn (e.g. their pen color and fill), see <link linkend="class_q_c_p_selection_decorator">QCPSelectionDecorator</link> for details.</para>

<para>If you wish to use an own <link linkend="class_q_c_p_selection_decorator">QCPSelectionDecorator</link> subclass, pass an instance of it to <link linkend="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9">setSelectionDecorator</link>. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f">
                <title>void QCPAbstractPlottable::setName (const QString &amp;name)</title> <emphasis></emphasis>
                
<para>The name is the textual representation of this plottable as it is displayed in the legend (<link linkend="class_q_c_p_legend">QCPLegend</link>). It may contain any UTF-8 characters, including newlines. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536">
                <title>void QCPAbstractPlottable::setAntialiasedFill (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether fills of this plottable are drawn antialiased or not.</para>

<para>Note that this setting may be overridden by <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> and <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">QCustomPlot::setNotAntialiasedElements</link>. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02">
                <title>void QCPAbstractPlottable::setAntialiasedScatters (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether the scatter symbols of this plottable are drawn antialiased or not.</para>

<para>Note that this setting may be overridden by <link linkend="class_q_custom_plot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> and <link linkend="class_q_custom_plot_1ae10d685b5eabea2999fb8775ca173c24">QCustomPlot::setNotAntialiasedElements</link>. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7">
                <title>void QCPAbstractPlottable::setPen (const QPen &amp;pen)</title> <emphasis></emphasis>
                
<para>The pen is used to draw basic lines that make up the plottable representation in the plot.</para>

<para>For example, the <link linkend="class_q_c_p_graph">QCPGraph</link> subclass draws its graph lines with this pen.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74">setBrush</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74">
                <title>void QCPAbstractPlottable::setBrush (const QBrush &amp;brush)</title> <emphasis></emphasis>
                
<para>The brush is used to draw basic fills of the plottable representation in the plot. The Fill can be a color, gradient or texture, see the usage of QBrush.</para>

<para>For example, the <link linkend="class_q_c_p_graph">QCPGraph</link> subclass draws the fill under the graph with this brush, when it&apos;s not set to Qt::NoBrush.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7">setPen</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920">
                <title>void QCPAbstractPlottable::setKeyAxis (QCPAxis *axis)</title> <emphasis></emphasis>
                
<para>The key axis of a plottable can be set to any axis of a <link linkend="class_q_custom_plot">QCustomPlot</link>, as long as it is orthogonal to the plottable&apos;s value axis. This function performs no checks to make sure this is the case. The typical mathematical choice is to use the x-axis (<link linkend="class_q_custom_plot_1a9a79cd0158a4c7f30cbc702f0fd800e4">QCustomPlot::xAxis</link>) as key axis and the y-axis (<link linkend="class_q_custom_plot_1af6fea5679725b152c14facd920b19367">QCustomPlot::yAxis</link>) as value axis.</para>

<para>Normally, the key and value axes are set in the constructor of the plottable (or <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">QCustomPlot::addGraph</link> when working with QCPGraphs through the dedicated graph interface).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb">setValueAxis</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb">
                <title>void QCPAbstractPlottable::setValueAxis (QCPAxis *axis)</title> <emphasis></emphasis>
                
<para>The value axis of a plottable can be set to any axis of a <link linkend="class_q_custom_plot">QCustomPlot</link>, as long as it is orthogonal to the plottable&apos;s key axis. This function performs no checks to make sure this is the case. The typical mathematical choice is to use the x-axis (<link linkend="class_q_custom_plot_1a9a79cd0158a4c7f30cbc702f0fd800e4">QCustomPlot::xAxis</link>) as key axis and the y-axis (<link linkend="class_q_custom_plot_1af6fea5679725b152c14facd920b19367">QCustomPlot::yAxis</link>) as value axis.</para>

<para>Normally, the key and value axes are set in the constructor of the plottable (or <link linkend="class_q_custom_plot_1a6fb2873d35a8a8089842d81a70a54167">QCustomPlot::addGraph</link> when working with QCPGraphs through the dedicated graph interface).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920">setKeyAxis</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">
                <title>void QCPAbstractPlottable::setSelectable (QCP::SelectionType selectable)</title> <emphasis></emphasis>
                
<para>Sets whether and to which granularity this plottable can be selected.</para>

<para>A selection can happen by clicking on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface (When <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> contains <link linkend="namespace_q_c_p_1a2ad6bb6281c7c2d593d4277b44c2b037a67148c8227b4155eca49135fc274c7ec">QCP::iSelectPlottables</link>), by dragging a selection rect (When <link linkend="class_q_custom_plot_1a810ef958ebe84db661c7288b526c0deb">QCustomPlot::setSelectionRectMode</link> is <link linkend="namespace_q_c_p_1ac9aa4d6d81ac76b094f9af9ad2d3aacfa62c286e8da283a0cbb88ecac2f3f7506">QCP::srmSelect</link>), or programmatically by calling <link linkend="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436">setSelection</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436">setSelection</link>, <link linkend="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038">QCP::SelectionType</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a219bc5403a9d85d3129165ec3f5ae436">
                <title>void QCPAbstractPlottable::setSelection (QCPDataSelection selection)</title> <emphasis></emphasis>
                
<para>Sets which data ranges of this plottable are selected. Selected data ranges are drawn differently (e.g. color) in the plot. This can be controlled via the selection decorator (see <link linkend="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e">selectionDecorator</link>).</para>

<para>The entire selection mechanism for plottables is handled automatically when <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> contains iSelectPlottables. You only need to call this function when you wish to change the selection state programmatically.</para>

<para>Using <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">setSelectable</link> you can further specify for each plottable whether and to which granularity it is selectable. If <emphasis>selection</emphasis> is not compatible with the current <link linkend="namespace_q_c_p_1ac6cb9db26a564b27feda362a438db038">QCP::SelectionType</link> set via <link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">setSelectable</link>, the resulting selection will be adjusted accordingly (see <link linkend="class_q_c_p_data_selection_1a17b84d852911531d229f4a76aa239a75">QCPDataSelection::enforceType</link>).</para>

<para>emits the <link linkend="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9">selectionChanged</link> signal when <emphasis>selected</emphasis> is different from the previous selection state.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1ac238d6e910f976f1f30d41c2bca44ac3">setSelectable</link>, <link linkend="class_q_c_p_abstract_plottable_1a38efe9641d972992a3d44204bc80ec1d">selectTest</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a20e266ad646f8c4a7e4631040510e5d9">
                <title>void QCPAbstractPlottable::setSelectionDecorator (QCPSelectionDecorator *decorator)</title> <emphasis></emphasis>
                
<para>Use this method to set an own <link linkend="class_q_c_p_selection_decorator">QCPSelectionDecorator</link> (subclass) instance. This allows you to customize the visual representation of selected data ranges further than by using the default <link linkend="class_q_c_p_selection_decorator">QCPSelectionDecorator</link>.</para>

<para>The plottable takes ownership of the <emphasis>decorator</emphasis>.</para>

<para>The currently set decorator can be accessed via <link linkend="class_q_c_p_abstract_plottable_1a7861518e47ca0c6a0c386032c2db075e">selectionDecorator</link>. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a38efe9641d972992a3d44204bc80ec1d">
                <title>virtual double QCPAbstractPlottable::selectTest (const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const =0</title> <emphasis></emphasis>
                
<para>This function is used to decide whether a click hits a layerable object or not.</para>

<para><emphasis>pos</emphasis> is a point in pixel coordinates on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface. This function returns the shortest pixel distance of this point to the object. If the object is either invisible or the distance couldn&apos;t be determined, -1.0 is returned. Further, if <emphasis>onlySelectable</emphasis> is true and the object is not selectable, -1.0 is returned, too.</para>

<para>If the object is represented not by single lines but by an area like a <link linkend="class_q_c_p_item_text">QCPItemText</link> or the bars of a <link linkend="class_q_c_p_bars">QCPBars</link> plottable, a click inside the area should also be considered a hit. In these cases this function thus returns a constant value greater zero but still below the parent plot&apos;s selection tolerance. (typically the selectionTolerance multiplied by 0.99).</para>

<para>Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i.e. closer than 0.99*selectionTolerance).</para>

<para>The actual setting of the selection state is not done by this function. This is handled by the parent <link linkend="class_q_custom_plot">QCustomPlot</link> when the mouseReleaseEvent occurs, and the finally selected object is notified via the <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link>/<link linkend="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e">deselectEvent</link> methods.</para>

<para><emphasis>details</emphasis> is an optional output parameter. Every layerable subclass may place any information in <emphasis>details</emphasis>. This information will be passed to <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link> when the parent <link linkend="class_q_custom_plot">QCustomPlot</link> decides on the basis of this selectTest call, that the object was successfully selected. The subsequent call to <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link> will carry the <emphasis>details</emphasis>. This is useful for multi-part objects (like <link linkend="class_q_c_p_axis">QCPAxis</link>). This way, a possibly complex calculation to decide which part was clicked is only done once in <link linkend="class_q_c_p_abstract_plottable_1a38efe9641d972992a3d44204bc80ec1d">selectTest</link>. The result (i.e. the actually clicked part) can then be placed in <emphasis>details</emphasis>. So in the subsequent <link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link>, the decision which part was selected doesn&apos;t have to be done a second time for a single selection operation.</para>

<para>You may pass 0 as <emphasis>details</emphasis> to indicate that you are not interested in those selection details.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">selectEvent</link>, <link linkend="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e">deselectEvent</link>, <link linkend="class_q_c_p_layerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="class_q_c_p_layerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link>, <link linkend="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a81fd9fd5c4f429c074785e2eb238a8e7">
                <title>QCPPlottableInterface1D * QCPAbstractPlottable::interface1D ()</title> <emphasis></emphasis>
                
<para>If this plottable is a one-dimensional plottable, i.e. it implements the <link linkend="class_q_c_p_plottable_interface1_d">QCPPlottableInterface1D</link>, returns the <emphasis>this</emphasis> pointer with that type. Otherwise (e.g. in the case of a <link linkend="class_q_c_p_color_map">QCPColorMap</link>) returns zero.</para>

<para>You can use this method to gain read access to data coordinates while holding a pointer to the abstract base class only. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a4da16d3cd4b509e1104a9b0275623c96">
                <title>QCPRange QCPAbstractPlottable::getKeyRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const =0</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that all data in this plottable span in the key axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_abstract_plottable_1a4de773988b21ed090fddd27c6a3a3dcb">getValueRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a4de773988b21ed090fddd27c6a3a3dcb">
                <title>QCPRange QCPAbstractPlottable::getValueRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange()) const =0</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that the data points in the specified key range (<emphasis>inKeyRange</emphasis>) span in the value axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><link linkend="class_q_c_p_range">QCPRange()</link></computeroutput>), all data points are considered, without any restriction on the keys.</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_abstract_plottable_1a4da16d3cd4b509e1104a9b0275623c96">getKeyRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93">
                <title>void QCPAbstractPlottable::coordsToPixels (double key, double value, double &amp;x, double &amp;y) const</title> <emphasis></emphasis>
                
<para>Convenience function for transforming a key/value pair to pixels on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface, taking the orientations of the axes associated with this plottable into account (e.g. whether key represents x or y).</para>

<para><emphasis>key</emphasis> and <emphasis>value</emphasis> are transformed to the coodinates in pixels and are written to <emphasis>x</emphasis> and <emphasis>y</emphasis>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd">pixelsToCoords</link>, <link linkend="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4">QCPAxis::coordToPixel</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708">
                <title>const QPointF QCPAbstractPlottable::coordsToPixels (double key, double value) const</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Transforms the given <emphasis>key</emphasis> and <emphasis>value</emphasis> to pixel coordinates and returns them in a QPointF. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd">
                <title>void QCPAbstractPlottable::pixelsToCoords (double x, double y, double &amp;key, double &amp;value) const</title> <emphasis></emphasis>
                
<para>Convenience function for transforming a x/y pixel pair on the <link linkend="class_q_custom_plot">QCustomPlot</link> surface to plot coordinates, taking the orientations of the axes associated with this plottable into account (e.g. whether key represents x or y).</para>

<para><emphasis>x</emphasis> and <emphasis>y</emphasis> are transformed to the plot coodinates and are written to <emphasis>key</emphasis> and <emphasis>value</emphasis>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93">coordsToPixels</link>, <link linkend="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4">QCPAxis::coordToPixel</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69">
                <title>void QCPAbstractPlottable::pixelsToCoords (const QPointF &amp;pixelPos, double &amp;key, double &amp;value) const</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Returns the pixel input <emphasis>pixelPos</emphasis> as plot coordinates <emphasis>key</emphasis> and <emphasis>value</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">
                <title>void QCPAbstractPlottable::rescaleAxes (bool onlyEnlarge=false) const</title> <emphasis></emphasis>
                
<para>Rescales the key and value axes associated with this plottable to contain all displayed data, so the whole plottable is visible. If the scaling of an axis is logarithmic, rescaleAxes will make sure not to rescale to an illegal range i.e. a range containing different signs and/or zero. Instead it will stay in the current sign domain and ignore all parts of the plottable that lie outside of that domain.</para>

<para><emphasis>onlyEnlarge</emphasis> makes sure the ranges are only expanded, never reduced. So it&apos;s possible to show multiple plottables in their entirety by multiple calls to rescaleAxes where the first call has <emphasis>onlyEnlarge</emphasis> set to false (the default), and all subsequent set to true.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308">rescaleKeyAxis</link>, <link linkend="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e">rescaleValueAxis</link>, <link linkend="class_q_custom_plot_1ad86528f2cee6c7e446dea4a6e8839935">QCustomPlot::rescaleAxes</link>, <link linkend="class_q_c_p_axis_1a499345f02ebce4b23d8ccec96e58daa9">QCPAxis::rescale</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308">
                <title>void QCPAbstractPlottable::rescaleKeyAxis (bool onlyEnlarge=false) const</title> <emphasis></emphasis>
                
<para>Rescales the key axis of the plottable so the whole plottable is visible.</para>

<para>See <link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link> for detailed behaviour. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a714eaf36b12434cd71846215504db82e">
                <title>void QCPAbstractPlottable::rescaleValueAxis (bool onlyEnlarge=false, bool inKeyRange=false) const</title> <emphasis></emphasis>
                
<para>Rescales the value axis of the plottable so the whole plottable is visible. If <emphasis>inKeyRange</emphasis> is set to true, only the data points which are in the currently visible key axis range are considered.</para>

<para>Returns true if the axis was actually scaled. This might not be the case if this plottable has an invalid range, e.g. because it has no data points.</para>

<para>See <link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link> for detailed behaviour. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f">
                <title>bool QCPAbstractPlottable::addToLegend (QCPLegend *legend)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds this plottable to the specified <emphasis>legend</emphasis>.</para>

<para>Creates a <link linkend="class_q_c_p_plottable_legend_item">QCPPlottableLegendItem</link> which is inserted into the legend. Returns true on success, i.e. when the legend exists and a legend item associated with this plottable isn&apos;t already in the legend.</para>

<para>If the plottable needs a more specialized representation in the legend, you can create a corresponding subclass of <link linkend="class_q_c_p_plottable_legend_item">QCPPlottableLegendItem</link> and add it to the legend manually instead of calling this method.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20">removeFromLegend</link>, <link linkend="class_q_c_p_legend_1a3ab274de52d2951faea45a6d975e6b3f">QCPLegend::addItem</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5">
                <title>bool QCPAbstractPlottable::addToLegend ()</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds this plottable to the legend of the parent <link linkend="class_q_custom_plot">QCustomPlot</link> (<link linkend="class_q_custom_plot_1a4eadcd237dc6a09938b68b16877fa6af">QCustomPlot::legend</link>).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20">removeFromLegend</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a3cc235007e2343a65ad4f463767e0e20">
                <title>bool QCPAbstractPlottable::removeFromLegend (QCPLegend *legend) const</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Removes the plottable from the specifed <emphasis>legend</emphasis>. This means the <link linkend="class_q_c_p_plottable_legend_item">QCPPlottableLegendItem</link> that is associated with this plottable is removed.</para>

<para>Returns true on success, i.e. if the legend exists and a legend item associated with this plottable was found and removed.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f">addToLegend</link>, <link linkend="class_q_c_p_legend_1ac91595c3eaa746fe6321d2eb952c63bb">QCPLegend::removeItem</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c">
                <title>bool QCPAbstractPlottable::removeFromLegend () const</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Removes the plottable from the legend of the parent <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1aa64e93cb5b606d8110d2cc0a349bb30f">addToLegend</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a635cee3effc07ad421414c76fd83548c">
                <title>QRect QCPAbstractPlottable::clipRect () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a453f676a5cee7bf846c5f0fa05ea84b3">
                <title>virtual void QCPAbstractPlottable::draw (QCPPainter *painter) Q_DECL_OVERRIDE=0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1af80ad8531642e786b6f4fad551c203c4">
                <title>QCP::Interaction QCPAbstractPlottable::selectionCategory () const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ac032077fb0db93d6faa3273d02363398">
                <title>void QCPAbstractPlottable::applyDefaultAntialiasingHint (QCPPainter *painter) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a2d488568cf16600dd81fa23d7d439829">
                <title>void QCPAbstractPlottable::selectEvent (QMouseEvent *event, bool additive, const QVariant &amp;details, bool *selectionStateChanged) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a9b104d9da4f38f934363945c313bf82e">
                <title>void QCPAbstractPlottable::deselectEvent (bool *selectionStateChanged) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a9a450783fd9ed539e589999fd390cdf7">
                <title>void QCPAbstractPlottable::drawLegendIcon (QCPPainter *painter, const QRectF &amp;rect) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed">
                <title>void QCPAbstractPlottable::applyFillAntialiasingHint (QCPPainter *painter) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9">
                <title>void QCPAbstractPlottable::applyScattersAntialiasingHint (QCPPainter *painter) const</title> <emphasis></emphasis>
                
            </section>
</section>
