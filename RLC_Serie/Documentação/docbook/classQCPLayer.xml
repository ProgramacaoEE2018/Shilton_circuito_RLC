<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="classQCPLayer">
<title>QCPLayer class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPLayer</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classQCPLayer__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPLayer</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classQCPLayer__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7c">LayerMode</link> {
<link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce">lmLogical</link>,
<link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">lmBuffered</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Atributos Protegidos</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCustomPlot * mParentPlot</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QString mName</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mIndex</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; QCPLayerable * &gt; mChildren</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mVisible</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>LayerMode mMode</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QWeakPointer&lt; QCPAbstractPaintBuffer &gt; mPaintBuffer</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classQCPLayer_1a5d0657fc86d624e5efbe930ef21af718">QCPLayer</link> (
<link linkend="classQCustomPlot">QCustomPlot</link> * parentPlot, const QString &amp; layerName)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="classQCPLayer_1afc1a8940f8e34c9f25ead9dfd4828cae">~QCPLayer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCustomPlot">QCustomPlot</link> * <link linkend="classQCPLayer_1a5520019787482e13857ebe631c27c3fa">parentPlot</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QString <link linkend="classQCPLayer_1a37806f662b50b588fb1029a14fc5ef50">name</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="classQCPLayer_1ad322905c4700dcc7ceba63e011c730d2">index</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="classQCPLayerable">QCPLayerable</link> * &gt; <link linkend="classQCPLayer_1a183b90941fc78f0b136edd77c5fb6966">children</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPLayer_1ad1cc2d6b32d2abb33c7f449b964e068c">visible</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7c">LayerMode</link> <link linkend="classQCPLayer_1a44ae50b011b19f3dd46a38d8e2e2c1b6">mode</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayer_1ac07671f74edf6884b51a82afb2c19516">setVisible</link> (
bool visible)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayer_1a938d57b04f4e4c23cedf1711f983919b">setMode</link> (
<link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7c">LayerMode</link> mode)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayer_1adefd53b6db02f470151c416f42e37180">replot</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayer_1ab831a99c8d30b15ec4533ca341e8813b">draw</link> (
<link linkend="classQCPPainter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayer_1a4a8e0a86f31462299e7fc8e8158dd2c6">drawToPaintBuffer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayer_1a57ce5e49364aa9122276d5df3b4a0ddc">addChild</link> (
<link linkend="classQCPLayerable">QCPLayerable</link> * layerable, bool prepend)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayer_1ac2f64ac7761650582d968d86670ef362">removeChild</link> (
<link linkend="classQCPLayerable">QCPLayerable</link> * layerable)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>A layer that may contain objects, to control the rendering order. </para>
    </simplesect>
        <simplesect>
            <title>Descrição detalhada</title>

<para>The Layering system of <link linkend="classQCustomPlot">QCustomPlot</link> is the mechanism to control the rendering order of the elements inside the plot.</para>

<para>It is based on the two classes <link linkend="classQCPLayer">QCPLayer</link> and <link linkend="classQCPLayerable">QCPLayerable</link>. <link linkend="classQCustomPlot">QCustomPlot</link> holds an ordered list of one or more instances of <link linkend="classQCPLayer">QCPLayer</link> (see <link linkend="classQCustomPlot_1ad5255393df078448bb6ac83fa5db5f52">QCustomPlot::addLayer</link>, <link linkend="classQCustomPlot_1a0a96244e7773b242ef23c32b7bdfb159">QCustomPlot::layer</link>, <link linkend="classQCustomPlot_1ae896140beff19424e9e9e02d6e331104">QCustomPlot::moveLayer</link>, etc.). When replotting, <link linkend="classQCustomPlot">QCustomPlot</link> goes through the list of layers bottom to top and successively draws the layerables of the layers into the paint buffer(s).</para>

<para>A <link linkend="classQCPLayer">QCPLayer</link> contains an ordered list of <link linkend="classQCPLayerable">QCPLayerable</link> instances. <link linkend="classQCPLayerable">QCPLayerable</link> is an abstract base class from which almost all visible objects derive, like axes, grids, graphs, items, etc.</para>
<section xml:id="classQCPLayer_1qcplayer-defaultlayers">
<title>Default layers</title>

<para>Initially, <link linkend="classQCustomPlot">QCustomPlot</link> has six layers: &quot;background&quot;, &quot;grid&quot;, &quot;main&quot;, &quot;axes&quot;, &quot;legend&quot; and &quot;overlay&quot; (in that order). On top is the &quot;overlay&quot; layer, which only contains the <link linkend="classQCustomPlot">QCustomPlot</link>&apos;s selection rect (<link linkend="classQCustomPlot_1ad7df2bcbba307e644db383b449e31efd">QCustomPlot::selectionRect</link>). The next two layers &quot;axes&quot; and &quot;legend&quot; contain the default axes and legend, so they will be drawn above plottables. In the middle, there is the &quot;main&quot; layer. It is initially empty and set as the current layer (see <link linkend="classQCustomPlot_1a73a6dc47c653bb6f8f030abca5a11852">QCustomPlot::setCurrentLayer</link>). This means, all new plottables, items etc. are created on this layer by default. Then comes the &quot;grid&quot; layer which contains the <link linkend="classQCPGrid">QCPGrid</link> instances (which belong tightly to <link linkend="classQCPAxis">QCPAxis</link>, see <link linkend="classQCPAxis_1a63f1dd2df663680d2a8d06c19592dd63">QCPAxis::grid</link>). The Axis rect background shall be drawn behind everything else, thus the default <link linkend="classQCPAxisRect">QCPAxisRect</link> instance is placed on the &quot;background&quot; layer. Of course, the layer affiliation of the individual objects can be changed as required (<link linkend="classQCPLayerable_1ab0d0da6d2de45a118886d2c8e16d5a54">QCPLayerable::setLayer</link>).</para>
</section>
<section xml:id="classQCPLayer_1qcplayer-ordering">
<title>Controlling the rendering order via layers</title>

<para>Controlling the ordering of layerables in the plot is easy: Create a new layer in the position you want the layerable to be in, e.g. above &quot;main&quot;, with <link linkend="classQCustomPlot_1ad5255393df078448bb6ac83fa5db5f52">QCustomPlot::addLayer</link>. Then set the current layer with <link linkend="classQCustomPlot_1a73a6dc47c653bb6f8f030abca5a11852">QCustomPlot::setCurrentLayer</link> to that new layer and finally create the objects normally. They will be placed on the new layer automatically, due to the current layer setting. Alternatively you could have also ignored the current layer setting and just moved the objects with <link linkend="classQCPLayerable_1ab0d0da6d2de45a118886d2c8e16d5a54">QCPLayerable::setLayer</link> to the desired layer after creating them.</para>

<para>It is also possible to move whole layers. For example, If you want the grid to be shown in front of all plottables/items on the &quot;main&quot; layer, just move it above &quot;main&quot; with <link linkend="classQCustomPlot_1ae896140beff19424e9e9e02d6e331104">QCustomPlot::moveLayer</link>.</para>

<para>The rendering order within one layer is simply by order of creation or insertion. The item created last (or added last to the layer), is drawn on top of all other objects on that layer.</para>

<para>When a layer is deleted, the objects on it are not deleted with it, but fall on the layer below the deleted layer, see <link linkend="classQCustomPlot_1a40f75e342c5eaab6a86066a42a0e2a94">QCustomPlot::removeLayer</link>.</para>
</section>
<section xml:id="classQCPLayer_1qcplayer-buffering">
<title>Replotting only a specific layer</title>

<para>If the layer mode (<link linkend="classQCPLayer_1a938d57b04f4e4c23cedf1711f983919b">setMode</link>) is set to <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">lmBuffered</link>, you can replot only this specific layer by calling <link linkend="classQCPLayer_1adefd53b6db02f470151c416f42e37180">replot</link>. In certain situations this can provide better replot performance, compared with a full replot of all layers. Upon creation of a new layer, the layer mode is initialized to <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce">lmLogical</link>. The only layer that is set to <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">lmBuffered</link> in a new <link linkend="classQCustomPlot">QCustomPlot</link> instance is the &quot;overlay&quot; layer, containing the selection rect. </para>
</section>
                <para>Definition at line 624 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7c">
               <title>enum LayerMode </title>
               
<para>Defines the different rendering modes of a layer. Depending on the mode, certain layers can be replotted individually, without the need to replot (possibly complex) layerables on other layers.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayer_1a938d57b04f4e4c23cedf1711f983919b">setMode</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumeradores:</title>
                    <variablelist>
                        <varlistentry xml:id="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce">
                            <term>lmLogical</term>
                            <listitem>
                                <para>Layer is used only for rendering order, and shares paint buffer with all other adjacent logical layers.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">
                            <term>lmBuffered</term>
                            <listitem>
                                <para>Layer has its own paint buffer and may be replotted individually (see \ref replot).</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 643 of file qcustomplot.h
                    <computeroutput><literallayout>
{
lmLogical, 
lmBuffered, 
}LayerMode;
                    </literallayout></computeroutput>
                </para>
            </section>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="classQCPLayer_1a5d0657fc86d624e5efbe930ef21af718">
                <title>QCPLayer::QCPLayer (QCustomPlot *parentPlot, const QString &amp;layerName)</title> <emphasis></emphasis>
                
<para>Creates a new <link linkend="classQCPLayer">QCPLayer</link> instance.</para>

<para>Normally you shouldn&apos;t directly instantiate layers, use <link linkend="classQCustomPlot_1ad5255393df078448bb6ac83fa5db5f52">QCustomPlot::addLayer</link> instead.</para>

<para><formalpara><title>Aviso: </title>

<para>It is not checked that <emphasis>layerName</emphasis> is actually a unique layer name in <emphasis>parentPlot</emphasis>. This check is only performed by <link linkend="classQCustomPlot_1ad5255393df078448bb6ac83fa5db5f52">QCustomPlot::addLayer</link>. </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayer_1afc1a8940f8e34c9f25ead9dfd4828cae">
                <title>QCPLayer::~QCPLayer ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1a5520019787482e13857ebe631c27c3fa">
                <title>QCustomPlot* QCPLayer::parentPlot () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1a37806f662b50b588fb1029a14fc5ef50">
                <title>QString QCPLayer::name () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1ad322905c4700dcc7ceba63e011c730d2">
                <title>int QCPLayer::index () const</title> <emphasis></emphasis>
                
<para>Returns the index this layer has in the <link linkend="classQCustomPlot">QCustomPlot</link>. The index is the integer number by which this layer can be accessed via <link linkend="classQCustomPlot_1a0a96244e7773b242ef23c32b7bdfb159">QCustomPlot::layer</link>.</para>

<para>Layers with higher indices will be drawn above layers with lower indices. </para>

            </section>
            <section xml:id="classQCPLayer_1a183b90941fc78f0b136edd77c5fb6966">
                <title>QList&lt; QCPLayerable * &gt; QCPLayer::children () const</title> <emphasis></emphasis>
                
<para>Returns a list of all layerables on this layer. The order corresponds to the rendering order: layerables with higher indices are drawn above layerables with lower indices. </para>

            </section>
            <section xml:id="classQCPLayer_1ad1cc2d6b32d2abb33c7f449b964e068c">
                <title>bool QCPLayer::visible () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1a44ae50b011b19f3dd46a38d8e2e2c1b6">
                <title>LayerMode QCPLayer::mode () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1ac07671f74edf6884b51a82afb2c19516">
                <title>void QCPLayer::setVisible (bool visible)</title> <emphasis></emphasis>
                
<para>Sets whether this layer is visible or not. If <emphasis>visible</emphasis> is set to false, all layerables on this layer will be invisible.</para>

<para>This function doesn&apos;t change the visibility property of the layerables (<link linkend="classQCPLayerable_1a3bed99ddc396b48ce3ebfdc0418744f8">QCPLayerable::setVisible</link>), but the <link linkend="classQCPLayerable_1ab054e88f15d485defcb95e7376f119e7">QCPLayerable::realVisibility</link> of each layerable takes the visibility of the parent layer into account. </para>

            </section>
            <section xml:id="classQCPLayer_1a938d57b04f4e4c23cedf1711f983919b">
                <title>void QCPLayer::setMode (LayerMode mode)</title> <emphasis></emphasis>
                
<para>Sets the rendering mode of this layer.</para>

<para>If <emphasis>mode</emphasis> is set to <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">lmBuffered</link> for a layer, it will be given a dedicated paint buffer by the parent <link linkend="classQCustomPlot">QCustomPlot</link> instance. This means it may be replotted individually by calling <link linkend="classQCPLayer_1adefd53b6db02f470151c416f42e37180">QCPLayer::replot</link>, without needing to replot all other layers.</para>

<para>Layers which are set to <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce">lmLogical</link> (the default) are used only to define the rendering order and can&apos;t be replotted individually.</para>

<para>Note that each layer which is set to <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">lmBuffered</link> requires additional paint buffers for the layers below, above and for the layer itself. This increases the memory consumption and (slightly) decreases the repainting speed because multiple paint buffers need to be joined. So you should carefully choose which layers benefit from having their own paint buffer. A typical example would be a layer which contains certain layerables (e.g. items) that need to be changed and thus replotted regularly, while all other layerables on other layers stay static. By default, only the topmost layer called &quot;overlay&quot; is in mode <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">lmBuffered</link>, and contains the selection rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayer_1adefd53b6db02f470151c416f42e37180">replot</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayer_1adefd53b6db02f470151c416f42e37180">
                <title>void QCPLayer::replot ()</title> <emphasis></emphasis>
                
<para>If the layer mode (<link linkend="classQCPLayer_1a938d57b04f4e4c23cedf1711f983919b">setMode</link>) is set to <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">lmBuffered</link>, this method allows replotting only the layerables on this specific layer, without the need to replot all other layers (as a call to <link linkend="classQCustomPlot_1aa4bfe7d70dbe67e81d877819b75ab9af">QCustomPlot::replot</link> would do).</para>

<para>If the layer mode is <link linkend="classQCPLayer_1a67dcfc1590be2a1f2227c5a39bb59c7ca02eb5e9a4cb7f1baf1e2b6b99e3b87ce">lmLogical</link> however, this method simply calls <link linkend="classQCustomPlot_1aa4bfe7d70dbe67e81d877819b75ab9af">QCustomPlot::replot</link> on the parent <link linkend="classQCustomPlot">QCustomPlot</link> instance.</para>

<para><link linkend="classQCustomPlot">QCustomPlot</link> also makes sure to replot all layers instead of only this one, if the layer ordering has changed since the last full replot and the other paint buffers were thus invalidated.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayer_1ab831a99c8d30b15ec4533ca341e8813b">draw</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayer_1ab831a99c8d30b15ec4533ca341e8813b">
                <title>void QCPLayer::draw (QCPPainter *painter)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1a4a8e0a86f31462299e7fc8e8158dd2c6">
                <title>void QCPLayer::drawToPaintBuffer ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1a57ce5e49364aa9122276d5df3b4a0ddc">
                <title>void QCPLayer::addChild (QCPLayerable *layerable, bool prepend)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayer_1ac2f64ac7761650582d968d86670ef362">
                <title>void QCPLayer::removeChild (QCPLayerable *layerable)</title> <emphasis></emphasis>
                
            </section>
</section>
