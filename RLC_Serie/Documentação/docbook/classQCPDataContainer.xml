<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="classQCPDataContainer">
<title>QCPDataContainer class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPDataContainer</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classQCPDataContainer__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPDataContainer</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classQCPDataContainer__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>DataType</declname>
        <defname>DataType</defname>
      </param>
    </templateparamlist>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>typedef QVector&lt; DataType &gt;::<link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link>  <link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>typedef QVector&lt; DataType &gt;::<link linkend="classQCPDataContainer_1a1bb453c3ae37d1ee5268878acb3a9d29">iterator</link>  <link linkend="classQCPDataContainer_1a1bb453c3ae37d1ee5268878acb3a9d29">iterator</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Atributos Protegidos</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mAutoSqueeze</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QVector&lt; DataType &gt; mData</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mPreallocSize</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mPreallocIteration</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classQCPDataContainer_1af86c0c63719f92c360ff67cc06c6fe6f">QCPDataContainer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="classQCPDataContainer_1a8e9b262c739672e13472d0d45b720258">size</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPDataContainer_1a7bdebfccd2f9f84bf032882f9d6b00a8">isEmpty</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPDataContainer_1a64f0f1621ca46de2352eaf87476db9b1">autoSqueeze</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a233f866760a78950d2a393c1a4bc54b5">setAutoSqueeze</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1ae7042bd534fc3ce7befa2ce3f790b5bf">set</link> (
const <link linkend="classQCPDataContainer">QCPDataContainer</link>&lt; DataType &gt; &amp; data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1aff99fffbb26597a354c4bc8312596ab2">set</link> (
const QVector&lt; DataType &gt; &amp; data, bool alreadySorted)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a42b98bd994307ccd163a43d576f91ad9">add</link> (
const <link linkend="classQCPDataContainer">QCPDataContainer</link>&lt; DataType &gt; &amp; data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a51d2a4c9ce4baf5e950b767d26673972">add</link> (
const QVector&lt; DataType &gt; &amp; data, bool alreadySorted)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a715e8e9972466804954a2f8fbd5288b7">add</link> (
const DataType &amp; data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1aa7f74cbce304b0369e1626c3798e1eda">removeBefore</link> (
double sortKey)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1abbe5d87ffc10b5aeffa5bb42cf03aa3c">removeAfter</link> (
double sortKey)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link> (
double sortKeyFrom, double sortKeyTo)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a2dbded7f0732bacf9db48fdfbbb620bc">remove</link> (
double sortKey)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a7e2b29736c6fd761649bda1a54ba967f">clear</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a75da92e33063b63d6da5014683591d45">sort</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a82fcc511def22287fc62579d0706387c">squeeze</link> (
bool preAllocation, bool postAllocation)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link> <link linkend="classQCPDataContainer_1a49d7622999e2de67fa2331626a3159aa">constBegin</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link> <link linkend="classQCPDataContainer_1aa7f7cf239b85b1a28de3d675cc5b3da1">constEnd</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataContainer_1a1bb453c3ae37d1ee5268878acb3a9d29">iterator</link> <link linkend="classQCPDataContainer_1a80032518413ab8f418f7c81182fd06cb">begin</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataContainer_1a1bb453c3ae37d1ee5268878acb3a9d29">iterator</link> <link linkend="classQCPDataContainer_1acf66dfad83fe041380f5e0491e7676f2">end</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link> <link linkend="classQCPDataContainer_1a2ad8a5399072d99a242d3a6d2d7e278a">findBegin</link> (
double sortKey, bool expandedRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link> <link linkend="classQCPDataContainer_1afb8b8f23cc2b7234a793a25ce79fe48f">findEnd</link> (
double sortKey, bool expandedRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link> <link linkend="classQCPDataContainer_1ae90c7457a052b223539906e6bddc0a92">at</link> (
int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPRange">QCPRange</link> <link linkend="classQCPDataContainer_1aba6e1a93c21ccc56a432b4a02c9d0ed2">keyRange</link> (
bool &amp; foundRange, <link linkend="namespaceQCP_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> signDomain)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPRange">QCPRange</link> <link linkend="classQCPDataContainer_1a35a102dc2424d1228fc374d9313efbe9">valueRange</link> (
bool &amp; foundRange, <link linkend="namespaceQCP_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> signDomain, const <link linkend="classQCPRange">QCPRange</link> &amp; inKeyRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPDataRange">QCPDataRange</link> <link linkend="classQCPDataContainer_1aece90eeb2ba8d3c46d3d94023630fbc7">dataRange</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1aa1b36f5ae86a5a5a0b92141d3a0945c4">limitIteratorsToDataRange</link> (
<link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link> &amp; begin, <link linkend="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">const_iterator</link> &amp; end, const <link linkend="classQCPDataRange">QCPDataRange</link> &amp; dataRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1aae8cdb2bcc3b900ec22f26df3e7d67c7">preallocateGrow</link> (
int minimumPreallocSize)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPDataContainer_1a83c25ac14be1c920df85e797ee75c982">performAutoSqueeze</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPDataContainer_1a74c5e06728cb6fa778a25d9ec0c4bd36">qcpLessThanSortKey</link> (
const DataType &amp; a, const DataType &amp; b)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>The generic data container for one-dimensional plottables. </para>
    </simplesect>
        <simplesect>
            <title>Descrição detalhada</title>

<para>This class template provides a fast container for data storage of one-dimensional data. The data type is specified as template parameter (called <emphasis>DataType</emphasis> in the following) and must provide some methods as described in the <link linkend="classQCPDataContainer_1qcpdatacontainer-datatype">next section</link>.</para>

<para>The data is stored in a sorted fashion, which allows very quick lookups by the sorted key as well as retrieval of ranges (see <link linkend="classQCPDataContainer_1a2ad8a5399072d99a242d3a6d2d7e278a">findBegin</link>, <link linkend="classQCPDataContainer_1afb8b8f23cc2b7234a793a25ce79fe48f">findEnd</link>, <link linkend="classQCPDataContainer_1aba6e1a93c21ccc56a432b4a02c9d0ed2">keyRange</link>) using binary search. The container uses a preallocation and a postallocation scheme, such that appending and prepending data (with respect to the sort key) is very fast and minimizes reallocations. If data is added which needs to be inserted between existing keys, the merge usually can be done quickly too, using the fact that existing data is always sorted. The user can further improve performance by specifying that added data is already itself sorted by key, if he can guarantee that this is the case (see for example <link linkend="classQCPDataContainer_1a51d2a4c9ce4baf5e950b767d26673972">add(const QVector&lt;DataType&gt; &amp;data, bool alreadySorted)</link>).</para>

<para>The data can be accessed with the provided const iterators (<link linkend="classQCPDataContainer_1a49d7622999e2de67fa2331626a3159aa">constBegin</link>, <link linkend="classQCPDataContainer_1aa7f7cf239b85b1a28de3d675cc5b3da1">constEnd</link>). If it is necessary to alter existing data in-place, the non-const iterators can be used (<link linkend="classQCPDataContainer_1a80032518413ab8f418f7c81182fd06cb">begin</link>, <link linkend="classQCPDataContainer_1acf66dfad83fe041380f5e0491e7676f2">end</link>). Changing data members that are not the sort key (for most data types called <emphasis>key</emphasis>) is safe from the container&apos;s perspective.</para>

<para>Great care must be taken however if the sort key is modified through the non-const iterators. For performance reasons, the iterators don&apos;t automatically cause a re-sorting upon their manipulation. It is thus the responsibility of the user to leave the container in a sorted state when finished with the data manipulation, before calling any other methods on the container. A complete re-sort (e.g. after finishing all sort key manipulation) can be done by calling <link linkend="classQCPDataContainer_1a75da92e33063b63d6da5014683591d45">sort</link>. Failing to do so can not be detected by the container efficiently and will cause both rendering artifacts and potential data loss.</para>

<para>Implementing one-dimensional plottables that make use of a <link linkend="classQCPDataContainer">QCPDataContainer&lt;T&gt;</link> is usually done by subclassing from <link linkend="classQCPAbstractPlottable1D">QCPAbstractPlottable1D&lt;T&gt;</link>, which introduces an according <emphasis>mDataContainer</emphasis> member and some convenience methods.</para>
<section xml:id="classQCPDataContainer_1qcpdatacontainer-datatype">
<title>Requirements for the DataType template parameter</title>

<para>The template parameter <computeroutput>DataType</computeroutput> is the type of the stored data points. It must be trivially copyable and have the following public methods, preferably inline:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>double sortKey() const</computeroutput>
<literallayout>
</literallayout>
 Returns the member variable of this data point that is the sort key, defining the ordering in the container. Often this variable is simply called <emphasis>key</emphasis>.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para><computeroutput>static DataType fromSortKey(double sortKey)</computeroutput>
<literallayout>
</literallayout>
 Returns a new instance of the data type initialized with its sort key set to <emphasis>sortKey</emphasis>.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para><computeroutput>static bool sortKeyIsMainKey()</computeroutput>
<literallayout>
</literallayout>
 Returns true if the sort key is equal to the main key (see method <computeroutput>mainKey</computeroutput> below). For most plottables this is the case. It is not the case for example for <link linkend="classQCPCurve">QCPCurve</link>, which uses <emphasis>t</emphasis> as sort key and <emphasis>key</emphasis> as main key. This is the reason why <link linkend="classQCPCurve">QCPCurve</link> unlike <link linkend="classQCPGraph">QCPGraph</link> can display parametric curves with loops.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para><computeroutput>double mainKey() const</computeroutput>
<literallayout>
</literallayout>
 Returns the variable of this data point considered the main key. This is commonly the variable that is used as the coordinate of this data point on the key axis of the plottable. This method is used for example when determining the automatic axis rescaling of key axes (<link linkend="classQCPAxis_1a499345f02ebce4b23d8ccec96e58daa9">QCPAxis::rescale</link>).</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para><computeroutput>double mainValue() const</computeroutput>
<literallayout>
</literallayout>
 Returns the variable of this data point considered the main value. This is commonly the variable that is used as the coordinate of this data point on the value axis of the plottable.</para>
</listitem>
</itemizedlist>
<itemizedlist>
<listitem>
<para><computeroutput><link linkend="classQCPRange">QCPRange</link> valueRange() const</computeroutput>
<literallayout>
</literallayout>
 Returns the range this data point spans in the value axis coordinate. If the data is single-valued (e.g. <link linkend="classQCPGraphData">QCPGraphData</link>), this is simply a range with both lower and upper set to the main data point value. However if the data points can represent multiple values at once (e.g <link linkend="classQCPFinancialData">QCPFinancialData</link> with its <emphasis>high</emphasis>, <emphasis>low</emphasis>, <emphasis>open</emphasis> and <emphasis>close</emphasis> values at each <emphasis>key</emphasis>) this method should return the range those values span. This method is used for example when determining the automatic axis rescaling of value axes (<link linkend="classQCPAxis_1a499345f02ebce4b23d8ccec96e58daa9">QCPAxis::rescale</link>). </para>
</listitem>
</itemizedlist>
</para>
</section>
                <para>Definition at line 2405 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="classQCPDataContainer_1ae40a91f5cb0bcac61d727427449b7d15">
                <title>typedef QVector&lt;DataType&gt;::const_iterator QCPDataContainer&lt; DataType &gt;::const_iterator</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPDataContainer_1a1bb453c3ae37d1ee5268878acb3a9d29">
                <title>typedef QVector&lt;DataType&gt;::iterator QCPDataContainer&lt; DataType &gt;::iterator</title> <emphasis></emphasis>
                
            </section>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="classQCPDataContainer_1af86c0c63719f92c360ff67cc06c6fe6f">
                <title>QCPDataContainer&lt; DataType &gt;::QCPDataContainer ()</title> <emphasis></emphasis>
                
<para>Constructs a <link linkend="classQCPDataContainer">QCPDataContainer</link> used for plottable classes that represent a series of key-sorted data </para>

            </section>
            <section xml:id="classQCPDataContainer_1a8e9b262c739672e13472d0d45b720258">
                <title>int QCPDataContainer&lt; DataType &gt;::size () const</title> <emphasis></emphasis>
                
<para>Returns the number of data points in the container. </para>

            </section>
            <section xml:id="classQCPDataContainer_1a7bdebfccd2f9f84bf032882f9d6b00a8">
                <title>bool QCPDataContainer&lt; DataType &gt;::isEmpty () const</title> <emphasis></emphasis>
                
<para>Returns whether this container holds no data points. </para>

            </section>
            <section xml:id="classQCPDataContainer_1a64f0f1621ca46de2352eaf87476db9b1">
                <title>bool QCPDataContainer&lt; DataType &gt;::autoSqueeze () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPDataContainer_1a233f866760a78950d2a393c1a4bc54b5">
                <title>void QCPDataContainer&lt; DataType &gt;::setAutoSqueeze (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether the container automatically decides when to release memory from its post- and preallocation pools when data points are removed. By default this is enabled and for typical applications shouldn&apos;t be changed.</para>

<para>If auto squeeze is disabled, you can manually decide when to release pre-/postallocation with <link linkend="classQCPDataContainer_1a82fcc511def22287fc62579d0706387c">squeeze</link>. </para>

            </section>
            <section xml:id="classQCPDataContainer_1ae7042bd534fc3ce7befa2ce3f790b5bf">
                <title>void QCPDataContainer&lt; DataType &gt;::set (const QCPDataContainer&lt; DataType &gt; &amp;data)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Replaces the current data in this container with the provided <emphasis>data</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1a42b98bd994307ccd163a43d576f91ad9">add</link>, <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1aff99fffbb26597a354c4bc8312596ab2">
                <title>void QCPDataContainer&lt; DataType &gt;::set (const QVector&lt; DataType &gt; &amp;data, bool alreadySorted=false)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Replaces the current data in this container with the provided <emphasis>data</emphasis> </para>

<para>If you can guarantee that the data points in <emphasis>data</emphasis> have ascending order with respect to the DataType&apos;s sort key, set <emphasis>alreadySorted</emphasis> to true to avoid an unnecessary sorting run.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1a42b98bd994307ccd163a43d576f91ad9">add</link>, <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1a42b98bd994307ccd163a43d576f91ad9">
                <title>void QCPDataContainer&lt; DataType &gt;::add (const QCPDataContainer&lt; DataType &gt; &amp;data)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Adds the provided <emphasis>data</emphasis> to the current data in this container.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1ae7042bd534fc3ce7befa2ce3f790b5bf">set</link>, <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1a51d2a4c9ce4baf5e950b767d26673972">
                <title>void QCPDataContainer&lt; DataType &gt;::add (const QVector&lt; DataType &gt; &amp;data, bool alreadySorted=false)</title> <emphasis></emphasis>
                
<para>Adds the provided data points in <emphasis>data</emphasis> to the current data.</para>

<para>If you can guarantee that the data points in <emphasis>data</emphasis> have ascending order with respect to the DataType&apos;s sort key, set <emphasis>alreadySorted</emphasis> to true to avoid an unnecessary sorting run.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1ae7042bd534fc3ce7befa2ce3f790b5bf">set</link>, <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1a715e8e9972466804954a2f8fbd5288b7">
                <title>void QCPDataContainer&lt; DataType &gt;::add (const DataType &amp;data)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Adds the provided single data point to the current data.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1aa7f74cbce304b0369e1626c3798e1eda">
                <title>void QCPDataContainer&lt; DataType &gt;::removeBefore (double sortKey)</title> <emphasis></emphasis>
                
<para>Removes all data points with (sort-)keys smaller than or equal to <emphasis>sortKey</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1abbe5d87ffc10b5aeffa5bb42cf03aa3c">removeAfter</link>, <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link>, <link linkend="classQCPDataContainer_1a7e2b29736c6fd761649bda1a54ba967f">clear</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1abbe5d87ffc10b5aeffa5bb42cf03aa3c">
                <title>void QCPDataContainer&lt; DataType &gt;::removeAfter (double sortKey)</title> <emphasis></emphasis>
                
<para>Removes all data points with (sort-)keys greater than or equal to <emphasis>sortKey</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1aa7f74cbce304b0369e1626c3798e1eda">removeBefore</link>, <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link>, <link linkend="classQCPDataContainer_1a7e2b29736c6fd761649bda1a54ba967f">clear</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">
                <title>void QCPDataContainer&lt; DataType &gt;::remove (double sortKeyFrom, double sortKeyTo)</title> <emphasis></emphasis>
                
<para>Removes all data points with (sort-)keys between <emphasis>sortKeyFrom</emphasis> and <emphasis>sortKeyTo</emphasis>. if <emphasis>sortKeyFrom</emphasis> is greater or equal to <emphasis>sortKeyTo</emphasis>, the function does nothing. To remove a single data point with known (sort-)key, use <link linkend="classQCPDataContainer_1a2dbded7f0732bacf9db48fdfbbb620bc">remove(double sortKey)</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1aa7f74cbce304b0369e1626c3798e1eda">removeBefore</link>, <link linkend="classQCPDataContainer_1abbe5d87ffc10b5aeffa5bb42cf03aa3c">removeAfter</link>, <link linkend="classQCPDataContainer_1a7e2b29736c6fd761649bda1a54ba967f">clear</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1a2dbded7f0732bacf9db48fdfbbb620bc">
                <title>void QCPDataContainer&lt; DataType &gt;::remove (double sortKey)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Removes a single data point at <emphasis>sortKey</emphasis>. If the position is not known with absolute (binary) precision, consider using <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove(double sortKeyFrom, double sortKeyTo)</link> with a small fuzziness interval around the suspected position, depeding on the precision with which the (sort-)key is known.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1aa7f74cbce304b0369e1626c3798e1eda">removeBefore</link>, <link linkend="classQCPDataContainer_1abbe5d87ffc10b5aeffa5bb42cf03aa3c">removeAfter</link>, <link linkend="classQCPDataContainer_1a7e2b29736c6fd761649bda1a54ba967f">clear</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1a7e2b29736c6fd761649bda1a54ba967f">
                <title>void QCPDataContainer&lt; DataType &gt;::clear ()</title> <emphasis></emphasis>
                
<para>Removes all data points.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link>, <link linkend="classQCPDataContainer_1abbe5d87ffc10b5aeffa5bb42cf03aa3c">removeAfter</link>, <link linkend="classQCPDataContainer_1aa7f74cbce304b0369e1626c3798e1eda">removeBefore</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1a75da92e33063b63d6da5014683591d45">
                <title>void QCPDataContainer&lt; DataType &gt;::sort ()</title> <emphasis></emphasis>
                
<para>Re-sorts all data points in the container by their sort key.</para>

<para>When setting, adding or removing points using the <link linkend="classQCPDataContainer">QCPDataContainer</link> interface (<link linkend="classQCPDataContainer_1ae7042bd534fc3ce7befa2ce3f790b5bf">set</link>, <link linkend="classQCPDataContainer_1a42b98bd994307ccd163a43d576f91ad9">add</link>, <link linkend="classQCPDataContainer_1ae5f569a120648b167efa78835f12fd38">remove</link>, etc.), the container makes sure to always stay in a sorted state such that a full resort is never necessary. However, if you choose to directly manipulate the sort key on data points by accessing and modifying it through the non-const iterators (<link linkend="classQCPDataContainer_1a80032518413ab8f418f7c81182fd06cb">begin</link>, <link linkend="classQCPDataContainer_1acf66dfad83fe041380f5e0491e7676f2">end</link>), it is your responsibility to bring the container back into a sorted state before any other methods are called on it. This can be achieved by calling this method immediately after finishing the sort key manipulation. </para>

            </section>
            <section xml:id="classQCPDataContainer_1a82fcc511def22287fc62579d0706387c">
                <title>void QCPDataContainer&lt; DataType &gt;::squeeze (bool preAllocation=true, bool postAllocation=true)</title> <emphasis></emphasis>
                
<para>Frees all unused memory that is currently in the preallocation and postallocation pools.</para>

<para>Note that <link linkend="classQCPDataContainer">QCPDataContainer</link> automatically decides whether squeezing is necessary, if <link linkend="classQCPDataContainer_1a233f866760a78950d2a393c1a4bc54b5">setAutoSqueeze</link> is left enabled. It should thus not be necessary to use this method for typical applications.</para>

<para>The parameters <emphasis>preAllocation</emphasis> and <emphasis>postAllocation</emphasis> control whether pre- and/or post allocation should be freed, respectively. </para>

            </section>
            <section xml:id="classQCPDataContainer_1a49d7622999e2de67fa2331626a3159aa">
                <title>QCPDataContainer::const_iterator QCPDataContainer&lt; DataType &gt;::constBegin () const</title> <emphasis></emphasis>
                
<para>Returns a const iterator to the first data point in this container. </para>

            </section>
            <section xml:id="classQCPDataContainer_1aa7f7cf239b85b1a28de3d675cc5b3da1">
                <title>QCPDataContainer::const_iterator QCPDataContainer&lt; DataType &gt;::constEnd () const</title> <emphasis></emphasis>
                
<para>Returns a const iterator to the element past the last data point in this container. </para>

            </section>
            <section xml:id="classQCPDataContainer_1a80032518413ab8f418f7c81182fd06cb">
                <title>QCPDataContainer::iterator QCPDataContainer&lt; DataType &gt;::begin ()</title> <emphasis></emphasis>
                
<para>Returns a non-const iterator to the first data point in this container.</para>

<para>You can manipulate the data points in-place through the non-const iterators, but great care must be taken when manipulating the sort key of a data point, see <link linkend="classQCPDataContainer_1a75da92e33063b63d6da5014683591d45">sort</link>, or the detailed description of this class. </para>

            </section>
            <section xml:id="classQCPDataContainer_1acf66dfad83fe041380f5e0491e7676f2">
                <title>QCPDataContainer::iterator QCPDataContainer&lt; DataType &gt;::end ()</title> <emphasis></emphasis>
                
<para>Returns a non-const iterator to the element past the last data point in this container.</para>

<para>You can manipulate the data points in-place through the non-const iterators, but great care must be taken when manipulating the sort key of a data point, see <link linkend="classQCPDataContainer_1a75da92e33063b63d6da5014683591d45">sort</link>, or the detailed description of this class. </para>

            </section>
            <section xml:id="classQCPDataContainer_1a2ad8a5399072d99a242d3a6d2d7e278a">
                <title>QCPDataContainer&lt; DataType &gt;::const_iterator QCPDataContainer&lt; DataType &gt;::findBegin (double sortKey, bool expandedRange=true) const</title> <emphasis></emphasis>
                
<para>Returns an iterator to the data point with a (sort-)key that is equal to, just below, or just above <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just below <emphasis>sortKey</emphasis> will be considered, otherwise the one just above.</para>

<para>This can be used in conjunction with <link linkend="classQCPDataContainer_1afb8b8f23cc2b7234a793a25ce79fe48f">findEnd</link> to iterate over data points within a given key range, including or excluding the bounding data points that are just beyond the specified range.</para>

<para>If <emphasis>expandedRange</emphasis> is true but there are no data points below <emphasis>sortKey</emphasis>, <link linkend="classQCPDataContainer_1a49d7622999e2de67fa2331626a3159aa">constBegin</link> is returned.</para>

<para>If the container is empty, returns <link linkend="classQCPDataContainer_1aa7f7cf239b85b1a28de3d675cc5b3da1">constEnd</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1afb8b8f23cc2b7234a793a25ce79fe48f">findEnd</link>, <link linkend="classQCPPlottableInterface1D_1a5b95783271306a4de97be54eac1e7d13">QCPPlottableInterface1D::findBegin</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1afb8b8f23cc2b7234a793a25ce79fe48f">
                <title>QCPDataContainer&lt; DataType &gt;::const_iterator QCPDataContainer&lt; DataType &gt;::findEnd (double sortKey, bool expandedRange=true) const</title> <emphasis></emphasis>
                
<para>Returns an iterator to the element after the data point with a (sort-)key that is equal to, just above or just below <emphasis>sortKey</emphasis>. If <emphasis>expandedRange</emphasis> is true, the data point just above <emphasis>sortKey</emphasis> will be considered, otherwise the one just below.</para>

<para>This can be used in conjunction with <link linkend="classQCPDataContainer_1a2ad8a5399072d99a242d3a6d2d7e278a">findBegin</link> to iterate over data points within a given key range, including the bounding data points that are just below and above the specified range.</para>

<para>If <emphasis>expandedRange</emphasis> is true but there are no data points above <emphasis>sortKey</emphasis>, <link linkend="classQCPDataContainer_1aa7f7cf239b85b1a28de3d675cc5b3da1">constEnd</link> is returned.</para>

<para>If the container is empty, <link linkend="classQCPDataContainer_1aa7f7cf239b85b1a28de3d675cc5b3da1">constEnd</link> is returned.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1a2ad8a5399072d99a242d3a6d2d7e278a">findBegin</link>, <link linkend="classQCPPlottableInterface1D_1a5deced1016bc55a41a2339619045b295">QCPPlottableInterface1D::findEnd</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1ae90c7457a052b223539906e6bddc0a92">
                <title>QCPDataContainer::const_iterator QCPDataContainer&lt; DataType &gt;::at (int index) const</title> <emphasis></emphasis>
                
<para>Returns a const iterator to the element with the specified <emphasis>index</emphasis>. If <emphasis>index</emphasis> points beyond the available elements in this container, returns <link linkend="classQCPDataContainer_1aa7f7cf239b85b1a28de3d675cc5b3da1">constEnd</link>, i.e. an iterator past the last valid element.</para>

<para>You can use this method to easily obtain iterators from a <link linkend="classQCPDataRange">QCPDataRange</link>, see the data selection page for an example. </para>

            </section>
            <section xml:id="classQCPDataContainer_1aba6e1a93c21ccc56a432b4a02c9d0ed2">
                <title>QCPRange QCPDataContainer&lt; DataType &gt;::keyRange (bool &amp;foundRange, QCP::SignDomain signDomain=QCP::sdBoth)</title> <emphasis></emphasis>
                
<para>Returns the range encompassed by the (main-)key coordinate of all data points. The output parameter <emphasis>foundRange</emphasis> indicates whether a sensible range was found. If this is false, you should not use the returned <link linkend="classQCPRange">QCPRange</link> (e.g. the data container is empty or all points have the same key).</para>

<para>Use <emphasis>signDomain</emphasis> to control which sign of the key coordinates should be considered. This is relevant e.g. for logarithmic plots which can mathematically only display one sign domain at a time.</para>

<para>If the DataType reports that its main key is equal to the sort key (<emphasis>sortKeyIsMainKey</emphasis>), as is the case for most plottables, this method uses this fact and finds the range very quickly.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1a35a102dc2424d1228fc374d9313efbe9">valueRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1a35a102dc2424d1228fc374d9313efbe9">
                <title>QCPRange QCPDataContainer&lt; DataType &gt;::valueRange (bool &amp;foundRange, QCP::SignDomain signDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange())</title> <emphasis></emphasis>
                
<para>Returns the range encompassed by the value coordinates of the data points in the specified key range (<emphasis>inKeyRange</emphasis>), using the full <emphasis>DataType::valueRange</emphasis> reported by the data points. The output parameter <emphasis>foundRange</emphasis> indicates whether a sensible range was found. If this is false, you should not use the returned <link linkend="classQCPRange">QCPRange</link> (e.g. the data container is empty or all points have the same value).</para>

<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><link linkend="classQCPRange">QCPRange()</link></computeroutput>), all data points are considered, without any restriction on the keys.</para>

<para>Use <emphasis>signDomain</emphasis> to control which sign of the value coordinates should be considered. This is relevant e.g. for logarithmic plots which can mathematically only display one sign domain at a time.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1aba6e1a93c21ccc56a432b4a02c9d0ed2">keyRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPDataContainer_1aece90eeb2ba8d3c46d3d94023630fbc7">
                <title>QCPDataRange QCPDataContainer&lt; DataType &gt;::dataRange () const</title> <emphasis></emphasis>
                
<para>Returns a <link linkend="classQCPDataRange">QCPDataRange</link> encompassing the entire data set of this container. This means the begin index of the returned range is 0, and the end index is <link linkend="classQCPDataContainer_1a8e9b262c739672e13472d0d45b720258">size</link>. </para>

            </section>
            <section xml:id="classQCPDataContainer_1aa1b36f5ae86a5a5a0b92141d3a0945c4">
                <title>void QCPDataContainer&lt; DataType &gt;::limitIteratorsToDataRange (const_iterator &amp;begin, const_iterator &amp;end, const QCPDataRange &amp;dataRange) const</title> <emphasis></emphasis>
                
<para>Makes sure <emphasis>begin</emphasis> and <emphasis>end</emphasis> mark a data range that is both within the bounds of this data container&apos;s data, as well as within the specified <emphasis>dataRange</emphasis>. The initial range described by the passed iterators <emphasis>begin</emphasis> and <emphasis>end</emphasis> is never expanded, only contracted if necessary.</para>

<para>This function doesn&apos;t require for <emphasis>dataRange</emphasis> to be within the bounds of this data container&apos;s valid range. </para>

            </section>
            <section xml:id="classQCPDataContainer_1aae8cdb2bcc3b900ec22f26df3e7d67c7">
                <title>void QCPDataContainer&lt; DataType &gt;::preallocateGrow (int minimumPreallocSize)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPDataContainer_1a83c25ac14be1c920df85e797ee75c982">
                <title>void QCPDataContainer&lt; DataType &gt;::performAutoSqueeze ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPDataContainer_1a74c5e06728cb6fa778a25d9ec0c4bd36">
                <title>bool qcpLessThanSortKey (const DataType &amp;a, const DataType &amp;b)</title> <emphasis></emphasis>
                
<para>Returns whether the sort key of <emphasis>a</emphasis> is less than the sort key of <emphasis>b</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPDataContainer_1a75da92e33063b63d6da5014683591d45">QCPDataContainer::sort</link> </para>
</formalpara>
</para>

            </section>
</section>
