<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="classQCPColorScale">
<title>QCPColorScale class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPColorScale</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="classQCPColorScale__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Atributos Protegidos</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPAxis::AxisType mType</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPRange mDataRange</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPAxis::ScaleType mDataScaleType</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPColorGradient mGradient</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mBarWidth</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPColorScaleAxisRectPrivate &gt; mAxisRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPAxis &gt; mColorAxis</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayout * mParentLayout</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize mMinimumSize</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize mMaximumSize</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>SizeConstraintRect mSizeConstraintRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect mRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect mOuterRect</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins mMargins</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins mMinimumMargins</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::MarginSides mAutoMargins</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QHash&lt; QCP::MarginSide, QCPMarginGroup * &gt; mMarginGroups</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mVisible</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCustomPlot * mParentPlot</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointer&lt; QCPLayerable &gt; mParentLayerable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPLayer * mLayer</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mAntialiased</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classQCPColorScale_1aa8debce1be38b54287c04d4f584394b4">QCPColorScale</link> (
<link linkend="classQCustomPlot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="classQCPColorScale_1a49d8d2d155c15fa315fdc0427194c9ea">~QCPColorScale</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPAxis">QCPAxis</link> * <link linkend="classQCPColorScale_1a39bdbdb3b212602a5a57f9f3ea444190">axis</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPAxis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link> <link linkend="classQCPColorScale_1a85d7e286fbfc0c04c4b480aff3cb66fb">type</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPRange">QCPRange</link> <link linkend="classQCPColorScale_1a51f5756f99867bd91e570eddefeb1ef4">dataRange</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPAxis_1a36d8e8658dbaa179bf2aeb973db2d6f0">QCPAxis::ScaleType</link> <link linkend="classQCPColorScale_1ad864329d93cbd7396af1b2024db7fcfe">dataScaleType</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPColorGradient">QCPColorGradient</link> <link linkend="classQCPColorScale_1a31d4e3b49461bf6b265eabd028d0f7b2">gradient</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QString <link linkend="classQCPColorScale_1a3dbac1121a90172d62f01ab80b1ad641">label</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="classQCPColorScale_1ae02ab8e4bfaa919577992e73242f491f">barWidth</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPColorScale_1a2a0670492f2a780596ea455ea8496a78">rangeDrag</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPColorScale_1adb4c3ada2b1e5ebbdead3b097064ff0b">rangeZoom</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPColorScale_1a1bf9bdb291927c422dd66b404b206f1f">setType</link> (
<link linkend="classQCPAxis_1ae2bcc1728b382f10f064612b368bc18a">QCPAxis::AxisType</link> type)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link> (
const <link linkend="classQCPRange">QCPRange</link> &amp; dataRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="classQCPColorScale_1aeb6107d67dd7325145b2498abae67fc3">setDataScaleType</link> (
<link linkend="classQCPAxis_1a36d8e8658dbaa179bf2aeb973db2d6f0">QCPAxis::ScaleType</link> scaleType)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT void <link linkend="classQCPColorScale_1a1f29583bb6f1e7f473b62fb712be3940">setGradient</link> (
const <link linkend="classQCPColorGradient">QCPColorGradient</link> &amp; gradient)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPColorScale_1aee124ae8396320cacf8276e9a0fbb8ce">setLabel</link> (
const QString &amp; str)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPColorScale_1ab9dcc0c1cd583477496209b1413bcb99">setBarWidth</link> (
int width)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPColorScale_1a21c51a55e4fd581b6feadca9ee5b38d5">setRangeDrag</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPColorScale_1a96bd60fb6317ad6821841b539c93eeeb">setRangeZoom</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QList&lt; <link linkend="classQCPColorMap">QCPColorMap</link> * &gt; <link linkend="classQCPColorScale_1a556adc6b0216ebc1cc4317c541956d06">colorMaps</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPColorScale_1a425983db4478543924ddbd04ea20a356">rescaleDataRange</link> (
bool onlyVisibleMaps)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPColorScale_1a259dcb6d3053a2cc3c197e9b1191ddbe">update</link> (
<link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374d">UpdatePhase</link> phase)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPLayout">QCPLayout</link> * <link linkend="classQCPLayoutElement_1a4efdcbde9d28f410e5ef166c9d691deb">layout</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect <link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QRect <link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins <link linkend="classQCPLayoutElement_1af4ac9450aa2d60863bf3a8ea0c940c9d">margins</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QMargins <link linkend="classQCPLayoutElement_1a5eae30e28f28d73fd1c56409c011393e">minimumMargins</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCP::MarginSides <link linkend="classQCPLayoutElement_1a2585bc8c5cc70ee712909751a2fc8909">autoMargins</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize <link linkend="classQCPLayoutElement_1a60d4295468a2b57fe91f6f68e20c3993">minimumSize</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize <link linkend="classQCPLayoutElement_1afb9503858d4aa0f3b9f1794b084fb40a">maximumSize</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2a">SizeConstraintRect</link> <link linkend="classQCPLayoutElement_1a66136f121ee3e1c933b748761203cab4">sizeConstraintRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPMarginGroup">QCPMarginGroup</link> * <link linkend="classQCPLayoutElement_1a8af6bcf81e12fe1d6f44490f34522b90">marginGroup</link> (
<link linkend="namespaceQCP_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> side)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QHash&lt; <link linkend="namespaceQCP_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link>, <link linkend="classQCPMarginGroup">QCPMarginGroup</link> * &gt; <link linkend="classQCPLayoutElement_1ac8d1139a81a1625860647e307ae2b733">marginGroups</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link> (
const QRect &amp; rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link> (
const QMargins &amp; margins)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a0a8a17abc16b7923159fcc7608f94673">setMinimumMargins</link> (
const QMargins &amp; margins)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> (
QCP::MarginSides sides)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link> (
const QSize &amp; size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a8e0447614a0bf92de9a7304588c6b96e">setMinimumSize</link> (
int width, int height)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link> (
const QSize &amp; size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a03e0e9c48f230217c529b0819f832d84">setMaximumSize</link> (
int width, int height)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (
<link linkend="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2a">SizeConstraintRect</link> constraintRect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayoutElement_1a516e56f76b6bc100e8e71d329866847d">setMarginGroup</link> (
QCP::MarginSides sides, <link linkend="classQCPMarginGroup">QCPMarginGroup</link> * group)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QSize <link linkend="classQCPLayoutElement_1a46789036c4fcb190fa374f91321d7c09">minimumOuterSizeHint</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QSize <link linkend="classQCPLayoutElement_1ad96efb977a26e360e8a64a4c1e56456d">maximumOuterSizeHint</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QList&lt; <link linkend="classQCPLayoutElement">QCPLayoutElement</link> * &gt; <link linkend="classQCPLayoutElement_1a76dec8cb31e498994a944d7647a43309">elements</link> (
bool recursive)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="classQCPLayoutElement_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPLayerable_1af0297b944b6192b6d67d00bff41b6b70">visible</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCustomPlot">QCustomPlot</link> * <link linkend="classQCPLayerable_1a473edb813a4c1929d6b6a8fe3ff3faf7">parentPlot</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPLayerable">QCPLayerable</link> * <link linkend="classQCPLayerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858">parentLayerable</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="classQCPLayer">QCPLayer</link> * <link linkend="classQCPLayerable_1a5ff4862e8c784c9f5986dbc1533ba2a4">layer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPLayerable_1a71cbd212fde2703cee076e204a475709">antialiased</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayerable_1a3bed99ddc396b48ce3ebfdc0418744f8">setVisible</link> (
bool on)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Q_SLOT bool <link linkend="classQCPLayerable_1ab0d0da6d2de45a118886d2c8e16d5a54">setLayer</link> (
<link linkend="classQCPLayer">QCPLayer</link> * layer)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPLayerable_1ab25a0e7b897993b44447caee0f142083">setLayer</link> (
const QString &amp; layerName)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayerable_1a4fd43e89be4a553ead41652565ff0581">setAntialiased</link> (
bool enabled)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPLayerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPColorScale_1af1b24d24a70f25b65d29f09e413390a8">applyDefaultAntialiasingHint</link> (
<link linkend="classQCPPainter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link> (
QMouseEvent * event, const QVariant &amp; details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPColorScale_1a3b2bd79725aefaf2630fc76e90939442">mouseMoveEvent</link> (
QMouseEvent * event, const QPointF &amp; startPos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPColorScale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0">mouseReleaseEvent</link> (
QMouseEvent * event, const QPointF &amp; startPos)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPColorScale_1a63cf19be184f6670c9495ad3a9a1baeb">wheelEvent</link> (
QWheelEvent * event)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual int <link linkend="classQCPLayoutElement_1a005c9f0fe84bc1591a2cf2c46fd477b4">calculateAutoMargin</link> (
<link linkend="namespaceQCP_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> side)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPLayoutElement_1a765f041a73af0c2de41b41a5a03e31a4">layoutChanged</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPLayoutElement_1ad1c597b1d608cfdd86e7b76819a94cfb">draw</link> (
<link linkend="classQCPPainter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPLayoutElement_1ab4bb5c5a958451f5f153fdce350f13cf">parentPlotInitialized</link> (
<link linkend="classQCustomPlot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="namespaceQCP_1a2ad6bb6281c7c2d593d4277b44c2b037">QCP::Interaction</link> <link linkend="classQCPLayerable_1a908c9edda761886f33893be326dab77d">selectionCategory</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual QRect <link linkend="classQCPLayerable_1acbcfc9ecc75433747b1978a77b1864b3">clipRect</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPLayerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91">selectEvent</link> (
QMouseEvent * event, bool additive, const QVariant &amp; details, bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPLayerable_1ae546370644a5551c76af739afc008bee">deselectEvent</link> (
bool * selectionStateChanged)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> (
QMouseEvent * event, const QVariant &amp; details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc">initializeParentPlot</link> (
<link linkend="classQCustomPlot">QCustomPlot</link> * parentPlot)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayerable_1aa23c893671f1f6744ac235cf2204cf3a">setParentLayerable</link> (
<link linkend="classQCPLayerable">QCPLayerable</link> * parentLayerable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classQCPLayerable_1af94484cfb7cbbddb7de522e9be71d9a4">moveToLayer</link> (
<link linkend="classQCPLayer">QCPLayer</link> * layer, bool prepend)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classQCPLayerable_1acb663e375d2d36dc5c55021ee5a2119b">applyAntialiasingHint</link> (
<link linkend="classQCPPainter">QCPPainter</link> * painter, bool localAntialiased, <link linkend="namespaceQCP_1ae55dbe315d41fe80f29ba88100843a0c">QCP::AntialiasedElement</link> overrideElement)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374d">UpdatePhase</link> {
<link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3">upPreparation</link>,
<link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676">upMargins</link>,
<link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045">upLayout</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2a">SizeConstraintRect</link> {
<link linkend="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c">scrInnerRect</link>,
<link linkend="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d">scrOuterRect</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>A color scale for use with color coding data such as <link linkend="classQCPColorMap">QCPColorMap</link>. </para>
    </simplesect>
        <simplesect>
            <title>Descrição detalhada</title>

<para>This layout element can be placed on the plot to correlate a color gradient with data values. It is usually used in combination with one or multiple <link linkend="classQCPColorMap">QCPColorMaps</link>.</para>

<para></para>

<para>The color scale can be either horizontal or vertical, as shown in the image above. The orientation and the side where the numbers appear is controlled with <link linkend="classQCPColorScale_1a1bf9bdb291927c422dd66b404b206f1f">setType</link>.</para>

<para>Use <link linkend="classQCPColorMap_1aa828921db364fe3c6af4619580ab85fd">QCPColorMap::setColorScale</link> to connect a color map with a color scale. Once they are connected, they share their gradient, data range and data scale type (<link linkend="classQCPColorScale_1a1f29583bb6f1e7f473b62fb712be3940">setGradient</link>, <link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link>, <link linkend="classQCPColorScale_1aeb6107d67dd7325145b2498abae67fc3">setDataScaleType</link>). Multiple color maps may be associated with a single color scale, to make them all synchronize these properties.</para>

<para>To have finer control over the number display and axis behaviour, you can directly access the <link linkend="classQCPColorScale_1a39bdbdb3b212602a5a57f9f3ea444190">axis</link>. See the documentation of <link linkend="classQCPAxis">QCPAxis</link> for details about configuring axes. For example, if you want to change the number of automatically generated ticks, call <literallayout><computeroutput></computeroutput></literallayout> Placing a color scale next to the main axis rect works like with any other layout element: <literallayout><computeroutput></computeroutput></literallayout>In this case we have placed it to the right of the default axis rect, so it wasn&apos;t necessary to call <link linkend="classQCPColorScale_1a1bf9bdb291927c422dd66b404b206f1f">setType</link>, since <link linkend="classQCPAxis_1ae2bcc1728b382f10f064612b368bc18aadf5509f7d29199ef2f263b1dd224b345">QCPAxis::atRight</link> is already the default. The text next to the color scale can be set with <link linkend="classQCPColorScale_1aee124ae8396320cacf8276e9a0fbb8ce">setLabel</link>.</para>

<para>For optimum appearance (like in the image above), it may be desirable to line up the axis rect and the borders of the color scale. Use a <link linkend="classQCPMarginGroup">QCPMarginGroup</link> to achieve this: <literallayout><computeroutput></computeroutput></literallayout> Color scales are initialized with a non-zero minimum top and bottom margin (<link linkend="classQCPLayoutElement_1a0a8a17abc16b7923159fcc7608f94673">setMinimumMargins</link>), because vertical color scales are most common and the minimum top/bottom margin makes sure it keeps some distance to the top/bottom widget border. So if you change to a horizontal color scale by setting <link linkend="classQCPColorScale_1a1bf9bdb291927c422dd66b404b206f1f">setType</link> to <link linkend="classQCPAxis_1ae2bcc1728b382f10f064612b368bc18aa220d68888516b6c3b493d144f1ba438f">QCPAxis::atBottom</link> or <link linkend="classQCPAxis_1ae2bcc1728b382f10f064612b368bc18aac0ece2b680d3f545e701f75af1655977">QCPAxis::atTop</link>, you might want to also change the minimum margins accordingly, e.g. <computeroutput>setMinimumMargins(QMargins(6, 0, 6, 0))</computeroutput>. </para>
                <para>Definition at line 5039 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="classQCPColorScale_1aa8debce1be38b54287c04d4f584394b4">
                <title>QCPColorScale::QCPColorScale (QCustomPlot *parentPlot)</title> <emphasis></emphasis>
                
<para>Constructs a new <link linkend="classQCPColorScale">QCPColorScale</link>. </para>

            </section>
            <section xml:id="classQCPColorScale_1a49d8d2d155c15fa315fdc0427194c9ea">
                <title>QCPColorScale::~QCPColorScale ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1a39bdbdb3b212602a5a57f9f3ea444190">
                <title>QCPAxis * QCPColorScale::axis () const</title> <emphasis></emphasis>
                
<para>Returns the internal <link linkend="classQCPAxis">QCPAxis</link> instance of this color scale. You can access it to alter the appearance and behaviour of the axis. <link linkend="classQCPColorScale">QCPColorScale</link> duplicates some properties in its interface for convenience. Those are <link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link> (<link linkend="classQCPAxis_1aebdfea5d44c3a0ad2b4700cd4d25b641">QCPAxis::setRange</link>), <link linkend="classQCPColorScale_1aeb6107d67dd7325145b2498abae67fc3">setDataScaleType</link> (<link linkend="classQCPAxis_1adef29cae617af4f519f6c40d1a866ca6">QCPAxis::setScaleType</link>), and the method <link linkend="classQCPColorScale_1aee124ae8396320cacf8276e9a0fbb8ce">setLabel</link> (<link linkend="classQCPAxis_1a33bcc382c111c9f31bb0687352a2dea4">QCPAxis::setLabel</link>). As they each are connected, it does not matter whether you use the method on the <link linkend="classQCPColorScale">QCPColorScale</link> or on its <link linkend="classQCPAxis">QCPAxis</link>.</para>

<para>If the type of the color scale is changed with <link linkend="classQCPColorScale_1a1bf9bdb291927c422dd66b404b206f1f">setType</link>, the axis returned by this method will change, too, to either the left, right, bottom or top axis, depending on which type was set. </para>

            </section>
            <section xml:id="classQCPColorScale_1a85d7e286fbfc0c04c4b480aff3cb66fb">
                <title>QCPAxis::AxisType QCPColorScale::type () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1a51f5756f99867bd91e570eddefeb1ef4">
                <title>QCPRange QCPColorScale::dataRange () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1ad864329d93cbd7396af1b2024db7fcfe">
                <title>QCPAxis::ScaleType QCPColorScale::dataScaleType () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1a31d4e3b49461bf6b265eabd028d0f7b2">
                <title>QCPColorGradient QCPColorScale::gradient () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1a3dbac1121a90172d62f01ab80b1ad641">
                <title>QString QCPColorScale::label () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1ae02ab8e4bfaa919577992e73242f491f">
                <title>int QCPColorScale::barWidth () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1a2a0670492f2a780596ea455ea8496a78">
                <title>bool QCPColorScale::rangeDrag () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1adb4c3ada2b1e5ebbdead3b097064ff0b">
                <title>bool QCPColorScale::rangeZoom () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1a1bf9bdb291927c422dd66b404b206f1f">
                <title>void QCPColorScale::setType (QCPAxis::AxisType type)</title> <emphasis></emphasis>
                
<para>Sets at which side of the color scale the axis is placed, and thus also its orientation.</para>

<para>Note that after setting <emphasis>type</emphasis> to a different value, the axis returned by <link linkend="classQCPColorScale_1a39bdbdb3b212602a5a57f9f3ea444190">axis()</link> will be a different one. The new axis will adopt the following properties from the previous axis: The range, scale type, label and ticker (the latter will be shared and not copied). </para>

            </section>
            <section xml:id="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">
                <title>void QCPColorScale::setDataRange (const QCPRange &amp;dataRange)</title> <emphasis></emphasis>
                
<para>Sets the range spanned by the color gradient and that is shown by the axis in the color scale.</para>

<para>It is equivalent to calling <link linkend="classQCPColorMap_1a980b42837821159786a85b4b7dcb8774">QCPColorMap::setDataRange</link> on any of the connected color maps. It is also equivalent to directly accessing the <link linkend="classQCPColorScale_1a39bdbdb3b212602a5a57f9f3ea444190">axis</link> and setting its range with <link linkend="classQCPAxis_1aebdfea5d44c3a0ad2b4700cd4d25b641">QCPAxis::setRange</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1aeb6107d67dd7325145b2498abae67fc3">setDataScaleType</link>, <link linkend="classQCPColorScale_1a1f29583bb6f1e7f473b62fb712be3940">setGradient</link>, <link linkend="classQCPColorScale_1a425983db4478543924ddbd04ea20a356">rescaleDataRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPColorScale_1aeb6107d67dd7325145b2498abae67fc3">
                <title>void QCPColorScale::setDataScaleType (QCPAxis::ScaleType scaleType)</title> <emphasis></emphasis>
                
<para>Sets the scale type of the color scale, i.e. whether values are linearly associated with colors or logarithmically.</para>

<para>It is equivalent to calling <link linkend="classQCPColorMap_1a9d20aa08e3c1f20f22908c45b9c06511">QCPColorMap::setDataScaleType</link> on any of the connected color maps. It is also equivalent to directly accessing the <link linkend="classQCPColorScale_1a39bdbdb3b212602a5a57f9f3ea444190">axis</link> and setting its scale type with <link linkend="classQCPAxis_1adef29cae617af4f519f6c40d1a866ca6">QCPAxis::setScaleType</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link>, <link linkend="classQCPColorScale_1a1f29583bb6f1e7f473b62fb712be3940">setGradient</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPColorScale_1a1f29583bb6f1e7f473b62fb712be3940">
                <title>void QCPColorScale::setGradient (const QCPColorGradient &amp;gradient)</title> <emphasis></emphasis>
                
<para>Sets the color gradient that will be used to represent data values.</para>

<para>It is equivalent to calling <link linkend="classQCPColorMap_1a7313c78360471cead3576341a2c50377">QCPColorMap::setGradient</link> on any of the connected color maps.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link>, <link linkend="classQCPColorScale_1aeb6107d67dd7325145b2498abae67fc3">setDataScaleType</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPColorScale_1aee124ae8396320cacf8276e9a0fbb8ce">
                <title>void QCPColorScale::setLabel (const QString &amp;str)</title> <emphasis></emphasis>
                
<para>Sets the axis label of the color scale. This is equivalent to calling <link linkend="classQCPAxis_1a33bcc382c111c9f31bb0687352a2dea4">QCPAxis::setLabel</link> on the internal <link linkend="classQCPColorScale_1a39bdbdb3b212602a5a57f9f3ea444190">axis</link>. </para>

            </section>
            <section xml:id="classQCPColorScale_1ab9dcc0c1cd583477496209b1413bcb99">
                <title>void QCPColorScale::setBarWidth (int width)</title> <emphasis></emphasis>
                
<para>Sets the width (or height, for horizontal color scales) the bar where the gradient is displayed will have. </para>

            </section>
            <section xml:id="classQCPColorScale_1a21c51a55e4fd581b6feadca9ee5b38d5">
                <title>void QCPColorScale::setRangeDrag (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether the user can drag the data range (<link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link>).</para>

<para>Note that <link linkend="namespaceQCP_1a2ad6bb6281c7c2d593d4277b44c2b037a2c4432b9aceafb94000be8d1b589ef18">QCP::iRangeDrag</link> must be in the <link linkend="classQCustomPlot">QCustomPlot</link>&apos;s interactions (<link linkend="classQCustomPlot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link>) to allow range dragging. </para>

            </section>
            <section xml:id="classQCPColorScale_1a96bd60fb6317ad6821841b539c93eeeb">
                <title>void QCPColorScale::setRangeZoom (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether the user can zoom the data range (<link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link>) by scrolling the mouse wheel.</para>

<para>Note that <link linkend="namespaceQCP_1a2ad6bb6281c7c2d593d4277b44c2b037abee1e94353525a636aeaf0ba32b72e14">QCP::iRangeZoom</link> must be in the <link linkend="classQCustomPlot">QCustomPlot</link>&apos;s interactions (<link linkend="classQCustomPlot_1a5ee1e2f6ae27419deca53e75907c27e5">QCustomPlot::setInteractions</link>) to allow range dragging. </para>

            </section>
            <section xml:id="classQCPColorScale_1a556adc6b0216ebc1cc4317c541956d06">
                <title>QList&lt; QCPColorMap * &gt; QCPColorScale::colorMaps () const</title> <emphasis></emphasis>
                
<para>Returns a list of all the color maps associated with this color scale. </para>

            </section>
            <section xml:id="classQCPColorScale_1a425983db4478543924ddbd04ea20a356">
                <title>void QCPColorScale::rescaleDataRange (bool onlyVisibleMaps)</title> <emphasis></emphasis>
                
<para>Changes the data range such that all color maps associated with this color scale are fully mapped to the gradient in the data dimension.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1abe88633003a26d1e756aa74984587fef">setDataRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPColorScale_1a259dcb6d3053a2cc3c197e9b1191ddbe">
                <title>void QCPColorScale::update (UpdatePhase phase) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Updates the layout element and sub-elements. This function is automatically called before every replot by the parent layout element. It is called multiple times, once for every <link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374d">UpdatePhase</link>. The phases are run through in the order of the enum values. For details about what happens at the different phases, see the documentation of <link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374d">UpdatePhase</link>.</para>

<para>Layout elements that have child elements should call the <link linkend="classQCPColorScale_1a259dcb6d3053a2cc3c197e9b1191ddbe">update</link> method of their child elements, and pass the current <emphasis>phase</emphasis> unchanged.</para>

<para>The default implementation executes the automatic margin mechanism in the <link linkend="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676">upMargins</link> phase. Subclasses should make sure to call the base class implementation. </para>

            </section>
            <section xml:id="classQCPLayoutElement_1a4efdcbde9d28f410e5ef166c9d691deb">
                <title>QCPLayout * QCPLayoutElement::layout () const</title> <emphasis></emphasis>
                
<para>Returns the parent layout of this layout element. </para>

            </section>
            <section xml:id="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">
                <title>QRect QCPLayoutElement::rect () const</title> <emphasis></emphasis>
                
<para>Returns the inner rect of this layout element. The inner rect is the outer rect (<link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>, <link linkend="classQCPLayoutElement_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link>) shrinked by the margins (<link linkend="classQCPLayoutElement_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>, <link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>).</para>

<para>In some cases, the area between outer and inner rect is left blank. In other cases the margin area is used to display peripheral graphics while the main content is in the inner rect. This is where automatic margin calculation becomes interesting because it allows the layout element to adapt the margins to the peripheral graphics it wants to draw. For example, <link linkend="classQCPAxisRect">QCPAxisRect</link> draws the axis labels and tick labels in the margin area, thus needs to adjust the margins (if <link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> is enabled) according to the space required by the labels of the axes.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">
                <title>QRect QCPLayoutElement::outerRect () const</title> <emphasis></emphasis>
                
<para>Returns the outer rect of this layout element. The outer rect is the inner rect expanded by the margins (<link linkend="classQCPLayoutElement_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>, <link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>). The outer rect is used (and set via <link linkend="classQCPLayoutElement_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link>) by the parent <link linkend="classQCPLayout">QCPLayout</link> to control the size of this layout element.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1af4ac9450aa2d60863bf3a8ea0c940c9d">
                <title>QMargins QCPLayoutElement::margins () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a5eae30e28f28d73fd1c56409c011393e">
                <title>QMargins QCPLayoutElement::minimumMargins () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a2585bc8c5cc70ee712909751a2fc8909">
                <title>QCP::MarginSides QCPLayoutElement::autoMargins () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a60d4295468a2b57fe91f6f68e20c3993">
                <title>QSize QCPLayoutElement::minimumSize () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1afb9503858d4aa0f3b9f1794b084fb40a">
                <title>QSize QCPLayoutElement::maximumSize () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a66136f121ee3e1c933b748761203cab4">
                <title>SizeConstraintRect QCPLayoutElement::sizeConstraintRect () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a8af6bcf81e12fe1d6f44490f34522b90">
                <title>QCPMarginGroup* QCPLayoutElement::marginGroup (QCP::MarginSide side) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1ac8d1139a81a1625860647e307ae2b733">
                <title>QHash&lt;QCP::MarginSide, QCPMarginGroup*&gt; QCPLayoutElement::marginGroups () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a38975ea13e36de8e53391ce41d94bc0f">
                <title>void QCPLayoutElement::setOuterRect (const QRect &amp;rect)</title> <emphasis></emphasis>
                
<para>Sets the outer rect of this layout element. If the layout element is inside a layout, the layout sets the position and size of this layout element using this function.</para>

<para>Calling this function externally has no effect, since the layout will overwrite any changes to the outer rect upon the next replot.</para>

<para>The layout element will adapt its inner <link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> by applying the margins inward to the outer rect.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1a8f450b1f3f992ad576fce2c63d8b79cf">
                <title>void QCPLayoutElement::setMargins (const QMargins &amp;margins)</title> <emphasis></emphasis>
                
<para>Sets the margins of this layout element. If <link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> is disabled for some or all sides, this function is used to manually set the margin on those sides. Sides that are still set to be handled automatically are ignored and may have any value in <emphasis>margins</emphasis>.</para>

<para>The margin is the distance between the outer rect (controlled by the parent layout via <link linkend="classQCPLayoutElement_1a38975ea13e36de8e53391ce41d94bc0f">setOuterRect</link>) and the inner <link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> (which usually contains the main content of this layout element).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1a0a8a17abc16b7923159fcc7608f94673">
                <title>void QCPLayoutElement::setMinimumMargins (const QMargins &amp;margins)</title> <emphasis></emphasis>
                
<para>If <link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> is enabled on some or all margins, this function is used to provide minimum values for those margins.</para>

<para>The minimum values are not enforced on margin sides that were set to be under manual control via <link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">
                <title>void QCPLayoutElement::setAutoMargins (QCP::MarginSides sides)</title> <emphasis></emphasis>
                
<para>Sets on which sides the margin shall be calculated automatically. If a side is calculated automatically, a minimum margin value may be provided with <link linkend="classQCPLayoutElement_1a0a8a17abc16b7923159fcc7608f94673">setMinimumMargins</link>. If a side is set to be controlled manually, the value may be specified with <link linkend="classQCPLayoutElement_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>.</para>

<para>Margin sides that are under automatic control may participate in a <link linkend="classQCPMarginGroup">QCPMarginGroup</link> (see <link linkend="classQCPLayoutElement_1a516e56f76b6bc100e8e71d329866847d">setMarginGroup</link>), to synchronize (align) it with other layout elements in the plot.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1a0a8a17abc16b7923159fcc7608f94673">setMinimumMargins</link>, <link linkend="classQCPLayoutElement_1a8f450b1f3f992ad576fce2c63d8b79cf">setMargins</link>, <link linkend="namespaceQCP_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1a5dd29a3c8bc88440c97c06b67be7886b">
                <title>void QCPLayoutElement::setMinimumSize (const QSize &amp;size)</title> <emphasis></emphasis>
                
<para>Sets the minimum size of this layout element. A parent layout tries to respect the <emphasis>size</emphasis> here by changing row/column sizes in the layout accordingly.</para>

<para>If the parent layout size is not sufficient to satisfy all minimum size constraints of its child layout elements, the layout may set a size that is actually smaller than <emphasis>size</emphasis>. <link linkend="classQCustomPlot">QCustomPlot</link> propagates the layout&apos;s size constraints to the outside by setting its own minimum QWidget size accordingly, so violations of <emphasis>size</emphasis> should be exceptions.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="classQCPLayoutElement_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="classQCPLayoutElement_1a8e0447614a0bf92de9a7304588c6b96e">
                <title>void QCPLayoutElement::setMinimumSize (int width, int height)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Sets the minimum size of this layout element.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="classQCPLayoutElement_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="classQCPLayoutElement_1a74eb5280a737ab44833d506db65efd95">
                <title>void QCPLayoutElement::setMaximumSize (const QSize &amp;size)</title> <emphasis></emphasis>
                
<para>Sets the maximum size of this layout element. A parent layout tries to respect the <emphasis>size</emphasis> here by changing row/column sizes in the layout accordingly.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="classQCPLayoutElement_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="classQCPLayoutElement_1a03e0e9c48f230217c529b0819f832d84">
                <title>void QCPLayoutElement::setMaximumSize (int width, int height)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Sets the maximum size of this layout element.</para>

<para>Whether this constraint applies to the inner or the outer rect can be specified with <link linkend="classQCPLayoutElement_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> (see <link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link> and <link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>). </para>

            </section>
            <section xml:id="classQCPLayoutElement_1a361666cdcc6fbfd37344cc44be746b0f">
                <title>void QCPLayoutElement::setSizeConstraintRect (SizeConstraintRect constraintRect)</title> <emphasis></emphasis>
                
<para>Sets to which rect of a layout element the size constraints apply. Size constraints can be set via <link linkend="classQCPLayoutElement_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link> and <link linkend="classQCPLayoutElement_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link>.</para>

<para>The outer rect (<link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) includes the margins (e.g. in the case of a <link linkend="classQCPAxisRect">QCPAxisRect</link> the axis labels), whereas the inner rect (<link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>) does not.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link>, <link linkend="classQCPLayoutElement_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1a516e56f76b6bc100e8e71d329866847d">
                <title>void QCPLayoutElement::setMarginGroup (QCP::MarginSides sides, QCPMarginGroup *group)</title> <emphasis></emphasis>
                
<para>Sets the margin <emphasis>group</emphasis> of the specified margin <emphasis>sides</emphasis>.</para>

<para>Margin groups allow synchronizing specified margins across layout elements, see the documentation of <link linkend="classQCPMarginGroup">QCPMarginGroup</link>.</para>

<para>To unset the margin group of <emphasis>sides</emphasis>, set <emphasis>group</emphasis> to 0.</para>

<para>Note that margin groups only work for margin sides that are set to automatic (<link linkend="classQCPLayoutElement_1accfda49994e3e6d51ed14504abf9d27d">setAutoMargins</link>).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="namespaceQCP_1a7e487e3e2ccb62ab7771065bab7cae54">QCP::MarginSide</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1a46789036c4fcb190fa374f91321d7c09">
                <title>QSize QCPLayoutElement::minimumOuterSizeHint () const</title> <emphasis></emphasis>
                
<para>Returns the suggested minimum size this layout element (the <link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) may be compressed to, if no manual minimum size is set.</para>

<para>if a minimum size (<link linkend="classQCPLayoutElement_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link>) was not set manually, parent layouts use the returned size (usually indirectly through <link linkend="classQCPLayout_1a864fddc84721f186663faf3683f1fa70">QCPLayout::getFinalMinimumOuterSize</link>) to determine the minimum allowed size of this layout element.</para>

<para>A manual minimum size is considered set if it is non-zero.</para>

<para>The default implementation simply returns the sum of the horizontal margins for the width and the sum of the vertical margins for the height. Reimplementations may use their detailed knowledge about the layout element&apos;s content to provide size hints. </para>

            </section>
            <section xml:id="classQCPLayoutElement_1ad96efb977a26e360e8a64a4c1e56456d">
                <title>QSize QCPLayoutElement::maximumOuterSizeHint () const</title> <emphasis></emphasis>
                
<para>Returns the suggested maximum size this layout element (the <link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) may be expanded to, if no manual maximum size is set.</para>

<para>if a maximum size (<link linkend="classQCPLayoutElement_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link>) was not set manually, parent layouts use the returned size (usually indirectly through <link linkend="classQCPLayout_1add49fd6843821a6126914b837ed52e22">QCPLayout::getFinalMaximumOuterSize</link>) to determine the maximum allowed size of this layout element.</para>

<para>A manual maximum size is considered set if it is smaller than Qt&apos;s <computeroutput>QWIDGETSIZE_MAX</computeroutput>.</para>

<para>The default implementation simply returns <computeroutput>QWIDGETSIZE_MAX</computeroutput> for both width and height, implying no suggested maximum size. Reimplementations may use their detailed knowledge about the layout element&apos;s content to provide size hints. </para>

            </section>
            <section xml:id="classQCPLayoutElement_1a76dec8cb31e498994a944d7647a43309">
                <title>QList&lt; QCPLayoutElement * &gt; QCPLayoutElement::elements (bool recursive) const</title> <emphasis></emphasis>
                
<para>Returns a list of all child elements in this layout element. If <emphasis>recursive</emphasis> is true, all sub-child elements are included in the list, too.</para>

<para><formalpara><title>Aviso: </title>

<para>There may be entries with value 0 in the returned list. (For example, <link linkend="classQCPLayoutGrid">QCPLayoutGrid</link> may have empty cells which yield 0 at the respective index.) </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1ae97f483cccedadbf18ea4525ef240ee4">
                <title>double QCPLayoutElement::selectTest (const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Layout elements are sensitive to events inside their outer rect. If <emphasis>pos</emphasis> is within the outer rect, this method returns a value corresponding to 0.99 times the parent plot&apos;s selection tolerance. However, layout elements are not selectable by default. So if <emphasis>onlySelectable</emphasis> is true, -1.0 is returned.</para>

<para>See <link linkend="classQCPLayerable_1a04db8351fefd44cfdb77958e75c6288e">QCPLayerable::selectTest</link> for a general explanation of this virtual method.</para>

<para><link linkend="classQCPLayoutElement">QCPLayoutElement</link> subclasses may reimplement this method to provide more specific selection test behaviour. </para>

            </section>
            <section xml:id="classQCPLayerable_1af0297b944b6192b6d67d00bff41b6b70">
                <title>bool QCPLayerable::visible () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1a473edb813a4c1929d6b6a8fe3ff3faf7">
                <title>QCustomPlot* QCPLayerable::parentPlot () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858">
                <title>QCPLayerable * QCPLayerable::parentLayerable () const</title> <emphasis></emphasis>
                
<para>Returns the parent layerable of this layerable. The parent layerable is used to provide visibility hierarchies in conjunction with the method <link linkend="classQCPLayerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link>. This way, layerables only get drawn if their parent layerables are visible, too.</para>

<para>Note that a parent layerable is not necessarily also the QObject parent for memory management. Further, a layerable doesn&apos;t always have a parent layerable, so this function may return 0.</para>

<para>A parent layerable is set implicitly when placed inside layout elements and doesn&apos;t need to be set manually by the user. </para>

            </section>
            <section xml:id="classQCPLayerable_1a5ff4862e8c784c9f5986dbc1533ba2a4">
                <title>QCPLayer* QCPLayerable::layer () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1a71cbd212fde2703cee076e204a475709">
                <title>bool QCPLayerable::antialiased () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1a3bed99ddc396b48ce3ebfdc0418744f8">
                <title>void QCPLayerable::setVisible (bool on)</title> <emphasis></emphasis>
                
<para>Sets the visibility of this layerable object. If an object is not visible, it will not be drawn on the <link linkend="classQCustomPlot">QCustomPlot</link> surface, and user interaction with it (e.g. click and selection) is not possible. </para>

            </section>
            <section xml:id="classQCPLayerable_1ab0d0da6d2de45a118886d2c8e16d5a54">
                <title>bool QCPLayerable::setLayer (QCPLayer *layer)</title> <emphasis></emphasis>
                
<para>Sets the <emphasis>layer</emphasis> of this layerable object. The object will be placed on top of the other objects already on <emphasis>layer</emphasis>.</para>

<para>If <emphasis>layer</emphasis> is 0, this layerable will not be on any layer and thus not appear in the plot (or interact/receive events).</para>

<para>Returns true if the layer of this layerable was successfully changed to <emphasis>layer</emphasis>. </para>

            </section>
            <section xml:id="classQCPLayerable_1ab25a0e7b897993b44447caee0f142083">
                <title>bool QCPLayerable::setLayer (const QString &amp;layerName)</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados. Sets the layer of this layerable object by name</para>

<para>Returns true on success, i.e. if <emphasis>layerName</emphasis> is a valid layer name. </para>

            </section>
            <section xml:id="classQCPLayerable_1a4fd43e89be4a553ead41652565ff0581">
                <title>void QCPLayerable::setAntialiased (bool enabled)</title> <emphasis></emphasis>
                
<para>Sets whether this object will be drawn antialiased or not.</para>

<para>Note that antialiasing settings may be overridden by <link linkend="classQCustomPlot_1af6f91e5eab1be85f67c556e98c3745e8">QCustomPlot::setAntialiasedElements</link> and <link linkend="classQCustomPlot_1ae10d685b5eabea2999fb8775ca173c24">QCustomPlot::setNotAntialiasedElements</link>. </para>

            </section>
            <section xml:id="classQCPLayerable_1ab054e88f15d485defcb95e7376f119e7">
                <title>bool QCPLayerable::realVisibility () const</title> <emphasis></emphasis>
                
<para>Returns whether this layerable is visible, taking the visibility of the layerable parent and the visibility of this layerable&apos;s layer into account. This is the method that is consulted to decide whether a layerable shall be drawn or not.</para>

<para>If this layerable has a direct layerable parent (usually set via hierarchies implemented in subclasses, like in the case of <link linkend="classQCPLayoutElement">QCPLayoutElement</link>), this function returns true only if this layerable has its visibility set to true and the parent layerable&apos;s <link linkend="classQCPLayerable_1ab054e88f15d485defcb95e7376f119e7">realVisibility</link> returns true. </para>

            </section>
            <section xml:id="classQCPColorScale_1af1b24d24a70f25b65d29f09e413390a8">
                <title>void QCPColorScale::applyDefaultAntialiasingHint (QCPPainter *painter) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">
                <title>void QCPColorScale::mousePressEvent (QMouseEvent *event, const QVariant &amp;details) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user presses a mouse button while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="classQCPLayoutElement_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="classQCustomPlot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <link linkend="classQCPLayoutElement_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link>. For example, One-dimensional plottables like <link linkend="classQCPGraph">QCPGraph</link> or <link linkend="classQCPBars">QCPBars</link> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <link linkend="classQCPDataSelection">QCPDataSelection</link> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <link linkend="classQCPAxis_1abee4c7a54c468b1385dfce2c898b115f">QCPAxis::SelectablePart</link> in the case of axes).</para>

<para><link linkend="classQCustomPlot">QCustomPlot</link> uses an event propagation system that works the same as Qt&apos;s system. If your layerable doesn&apos;t reimplement the <link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link> or explicitly calls <computeroutput>event-&gt;ignore()</computeroutput> in its reimplementation, the event will be propagated to the next layerable in the stacking order.</para>

<para>Once a layerable has accepted the <link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link>, it is considered the mouse grabber and will receive all following calls to <link linkend="classQCPColorScale_1a3b2bd79725aefaf2630fc76e90939442">mouseMoveEvent</link> or <link linkend="classQCPColorScale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0">mouseReleaseEvent</link> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>

<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1a3b2bd79725aefaf2630fc76e90939442">mouseMoveEvent</link>, <link linkend="classQCPColorScale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0">mouseReleaseEvent</link>, <link linkend="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="classQCPColorScale_1a63cf19be184f6670c9495ad3a9a1baeb">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPColorScale_1a3b2bd79725aefaf2630fc76e90939442">
                <title>void QCPColorScale::mouseMoveEvent (QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user moves the mouse while holding a mouse button, after this layerable has become the mouse grabber by accepting the preceding <link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="classQCustomPlot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link> occured, that started the mouse interaction.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link>, <link linkend="classQCPColorScale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0">mouseReleaseEvent</link>, <link linkend="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="classQCPColorScale_1a63cf19be184f6670c9495ad3a9a1baeb">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPColorScale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0">
                <title>void QCPColorScale::mouseReleaseEvent (QMouseEvent *event, const QPointF &amp;startPos) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user releases the mouse button, after this layerable has become the mouse grabber by accepting the preceding <link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="classQCustomPlot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>startPos</emphasis> indicates the position where the initial <link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link> occured, that started the mouse interaction.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link>, <link linkend="classQCPColorScale_1a3b2bd79725aefaf2630fc76e90939442">mouseMoveEvent</link>, <link linkend="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, <link linkend="classQCPColorScale_1a63cf19be184f6670c9495ad3a9a1baeb">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPColorScale_1a63cf19be184f6670c9495ad3a9a1baeb">
                <title>void QCPColorScale::wheelEvent (QWheelEvent *event) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>This event gets called when the user turns the mouse scroll wheel while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="classQCPLayoutElement_1ae97f483cccedadbf18ea4525ef240ee4">selectTest</link>.</para>

<para>The current pixel position of the cursor on the <link linkend="classQCustomPlot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>.</para>

<para>The <computeroutput>event-&gt;delta()</computeroutput> indicates how far the mouse wheel was turned, which is usually +/- 120 for single rotation steps. However, if the mouse wheel is turned rapidly, multiple steps may accumulate to one event, making <computeroutput>event-&gt;delta()</computeroutput> larger. On the other hand, if the wheel has very smooth steps or none at all, the delta may be smaller.</para>

<para>The default implementation does nothing.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPColorScale_1a91f633b97ffcd57fdf8cd814974c20e6">mousePressEvent</link>, <link linkend="classQCPColorScale_1a3b2bd79725aefaf2630fc76e90939442">mouseMoveEvent</link>, <link linkend="classQCPColorScale_1a6a35dd39ab4e5cb2d7b29ebb4d5b61b0">mouseReleaseEvent</link>, <link linkend="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayoutElement_1a005c9f0fe84bc1591a2cf2c46fd477b4">
                <title>int QCPLayoutElement::calculateAutoMargin (QCP::MarginSide side)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a765f041a73af0c2de41b41a5a03e31a4">
                <title>void QCPLayoutElement::layoutChanged ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1ad1c597b1d608cfdd86e7b76819a94cfb">
                <title>virtual void QCPLayoutElement::draw (QCPPainter *painter) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1ab4bb5c5a958451f5f153fdce350f13cf">
                <title>void QCPLayoutElement::parentPlotInitialized (QCustomPlot *parentPlot) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1a908c9edda761886f33893be326dab77d">
                <title>QCP::Interaction QCPLayerable::selectionCategory () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1acbcfc9ecc75433747b1978a77b1864b3">
                <title>QRect QCPLayerable::clipRect () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1a7498c2d0d081cf7cad0fb3bb93aa0e91">
                <title>void QCPLayerable::selectEvent (QMouseEvent *event, bool additive, const QVariant &amp;details, bool *selectionStateChanged)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1ae546370644a5551c76af739afc008bee">
                <title>void QCPLayerable::deselectEvent (bool *selectionStateChanged)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">
                <title>void QCPLayerable::mouseDoubleClickEvent (QMouseEvent *event, const QVariant &amp;details)</title> <emphasis></emphasis>
                
<para>This event gets called when the user presses the mouse button a second time in a double-click, while the cursor is over the layerable. Whether a cursor is over the layerable is decided by a preceding call to <link linkend="classQCPLayerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>.</para>

<para>The <link linkend="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link> is called instead of the second <link linkend="classQCPLayerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>. So in the case of a double-click, the event succession is <emphasis>pressEvent &#8211; releaseEvent &#8211; doubleClickEvent &#8211; releaseEvent</emphasis>.</para>

<para>The current pixel position of the cursor on the <link linkend="classQCustomPlot">QCustomPlot</link> widget is accessible via <computeroutput>event-&gt;pos()</computeroutput>. The parameter <emphasis>details</emphasis> contains layerable-specific details about the hit, which were generated in the previous call to <link linkend="classQCPLayerable_1a04db8351fefd44cfdb77958e75c6288e">selectTest</link>. For example, One-dimensional plottables like <link linkend="classQCPGraph">QCPGraph</link> or <link linkend="classQCPBars">QCPBars</link> convey the clicked data point in the <emphasis>details</emphasis> parameter, as <link linkend="classQCPDataSelection">QCPDataSelection</link> packed as QVariant. Multi-part objects convey the specific <computeroutput>SelectablePart</computeroutput> that was hit (e.g. <link linkend="classQCPAxis_1abee4c7a54c468b1385dfce2c898b115f">QCPAxis::SelectablePart</link> in the case of axes).</para>

<para>Similarly to <link linkend="classQCPLayerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, once a layerable has accepted the <link linkend="classQCPLayerable_1a4171e2e823aca242dd0279f00ed2de81">mouseDoubleClickEvent</link>, it is considered the mouse grabber and will receive all following calls to <link linkend="classQCPLayerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link> and <link linkend="classQCPLayerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link> for this mouse interaction (a &quot;mouse interaction&quot; in this context ends with the release).</para>

<para>The default implementation does nothing except explicitly ignoring the event with <computeroutput>event-&gt;ignore()</computeroutput>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayerable_1af6567604818db90f4fd52822f8bc8376">mousePressEvent</link>, <link linkend="classQCPLayerable_1a9eee1ba47fd69be111059ca3881933e4">mouseMoveEvent</link>, <link linkend="classQCPLayerable_1aa0d79b005686f668622bbe66ac03ba2c">mouseReleaseEvent</link>, <link linkend="classQCPLayerable_1a47dfd7b8fd99c08ca54e09c362b6f022">wheelEvent</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="classQCPLayerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc">
                <title>void QCPLayerable::initializeParentPlot (QCustomPlot *parentPlot)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1aa23c893671f1f6744ac235cf2204cf3a">
                <title>void QCPLayerable::setParentLayerable (QCPLayerable *parentLayerable)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1af94484cfb7cbbddb7de522e9be71d9a4">
                <title>bool QCPLayerable::moveToLayer (QCPLayer *layer, bool prepend)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayerable_1acb663e375d2d36dc5c55021ee5a2119b">
                <title>void QCPLayerable::applyAntialiasingHint (QCPPainter *painter, bool localAntialiased, QCP::AntialiasedElement overrideElement) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374d">
               <title>enum UpdatePhase </title>
               
<para>Defines the phases of the update process, that happens just before a replot. At each phase, <link linkend="classQCPLayoutElement_1a929c2ec62e0e0e1d8418eaa802e2af9b">update</link> is called with the according UpdatePhase value. </para>

               <formalpara>
                    <title>Enumeradores:</title>
                    <variablelist>
                        <varlistentry xml:id="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374dad6119882eba136357c2f627992e527d3">
                            <term>upPreparation</term>
                            <listitem>
                                <para>Phase used for any type of preparation that needs to be done before margin calculation and layout.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374da288cb59a92280e47261a341f2813e676">
                            <term>upMargins</term>
                            <listitem>
                                <para>Phase in which the margins are calculated and set.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="classQCPLayoutElement_1a0d83360e05735735aaf6d7983c56374da5d1ccf5d79967c232c3c511796860045">
                            <term>upLayout</term>
                            <listitem>
                                <para>Final phase in which the layout system places the rects of the elements.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 1197 of file qcustomplot.h
                    <computeroutput><literallayout>
{
upPreparation, 
upMargins, 
upLayout, 
}UpdatePhase;
                    </literallayout></computeroutput>
                </para>
            </section>
            <section xml:id="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2a">
               <title>enum SizeConstraintRect </title>
               
<para>Defines to which rect of a layout element the size constraints that can be set via <link linkend="classQCPLayoutElement_1a5dd29a3c8bc88440c97c06b67be7886b">setMinimumSize</link> and <link linkend="classQCPLayoutElement_1a74eb5280a737ab44833d506db65efd95">setMaximumSize</link> apply. The outer rect (<link linkend="classQCPLayoutElement_1a2a32a12a6161c9dffbadeb9cc585510c">outerRect</link>) includes the margins (e.g. in the case of a <link linkend="classQCPAxisRect">QCPAxisRect</link> the axis labels), whereas the inner rect (<link linkend="classQCPLayoutElement_1a208effccfe2cca4a0eaf9393e60f2dd4">rect</link>) does not.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="classQCPLayoutElement_1a361666cdcc6fbfd37344cc44be746b0f">setSizeConstraintRect</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumeradores:</title>
                    <variablelist>
                        <varlistentry xml:id="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2aa7fa7e25cd23758b9915c64ed9f1be26c">
                            <term>scrInnerRect</term>
                            <listitem>
                                <para>Minimum/Maximum size constraints apply to inner rect.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="classQCPLayoutElement_1a0afb3e5773529e4bd20e448f81be4d2aabe2745b41a6131ed194e13591b08e04d">
                            <term>scrOuterRect</term>
                            <listitem>
                                <para>Minimum/Maximum size constraints apply to outer rect, thus include layout element margins.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 1211 of file qcustomplot.h
                    <computeroutput><literallayout>
{
scrInnerRect, 
scrOuterRect, 
}SizeConstraintRect;
                    </literallayout></computeroutput>
                </para>
            </section>
</section>
