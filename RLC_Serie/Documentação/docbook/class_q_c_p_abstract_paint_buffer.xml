<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_abstract_paint_buffer">
<title>QCPAbstractPaintBuffer class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPAbstractPaintBuffer</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_abstract_paint_buffer__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPAbstractPaintBuffer</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_abstract_paint_buffer__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Atributos Protegidos</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize mSize</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mDevicePixelRatio</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool mInvalidated</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_abstract_paint_buffer_1a3ce532c12f10b81697108835755641e2">QCPAbstractPaintBuffer</link> (
const QSize &amp; size, double devicePixelRatio)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_abstract_paint_buffer_1a50fbb1265814d019a1707f4cb11e20de">~QCPAbstractPaintBuffer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSize <link linkend="class_q_c_p_abstract_paint_buffer_1a3ea8284e547985c5d263f26a6adfa11f">size</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_abstract_paint_buffer_1a76bf771cda945a6c602cf9b7d365d92b">invalidated</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_abstract_paint_buffer_1aac1b981f8c1744036610ff1a6b9461f9">devicePixelRatio</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01">setSize</link> (
const QSize &amp; size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_paint_buffer_1ae4c7dc70dfc66be2879ce297b2b3d67f">setInvalidated</link> (
bool invalidated)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa">setDevicePixelRatio</link> (
double ratio)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_painter">QCPPainter</link> * <link linkend="class_q_c_p_abstract_paint_buffer_1a9e9f29b19c033cf02fb96f1a148463f3">startPainting</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_paint_buffer_1a41b0dc6e7744f19fae09f8532c207dc1">donePainting</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_paint_buffer_1afb998c7525e3ae37d9d2d46c7aaf461a">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_paint_buffer_1a9e253f4541dfc01992b77e8830bd7722">clear</link> (
const QColor &amp; color)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_abstract_paint_buffer_1aee7506a52bd7e5a07c2af27935eb13e7">reallocateBuffer</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>The abstract base class for paint buffers, which define the rendering backend. </para>
    </simplesect>
        <simplesect>
            <title>Descrição detalhada</title>

<para>This abstract base class defines the basic interface that a paint buffer needs to provide in order to be usable by <link linkend="class_q_custom_plot">QCustomPlot</link>.</para>

<para>A paint buffer manages both a surface to draw onto, and the matching paint device. The size of the surface can be changed via <link linkend="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01">setSize</link>. External classes (<link linkend="class_q_custom_plot">QCustomPlot</link> and <link linkend="class_q_c_p_layer">QCPLayer</link>) request a painter via <link linkend="class_q_c_p_abstract_paint_buffer_1a9e9f29b19c033cf02fb96f1a148463f3">startPainting</link> and then perform the draw calls. Once the painting is complete, <link linkend="class_q_c_p_abstract_paint_buffer_1a41b0dc6e7744f19fae09f8532c207dc1">donePainting</link> is called, so the paint buffer implementation can do clean up if necessary. Before rendering a frame, each paint buffer is usually filled with a color using <link linkend="class_q_c_p_abstract_paint_buffer_1a9e253f4541dfc01992b77e8830bd7722">clear</link> (usually the color is <computeroutput>Qt::transparent</computeroutput>), to remove the contents of the previous frame.</para>

<para>The simplest paint buffer implementation is <link linkend="class_q_c_p_paint_buffer_pixmap">QCPPaintBufferPixmap</link> which allows regular software rendering via the raster engine. Hardware accelerated rendering via pixel buffers and frame buffer objects is provided by QCPPaintBufferGlPbuffer and QCPPaintBufferGlFbo. They are used automatically if <link linkend="class_q_custom_plot_1a7db1adc09016329f3aef7c60da935789">QCustomPlot::setOpenGl</link> is enabled. </para>
                <para>Definition at line 516 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a3ce532c12f10b81697108835755641e2">
                <title>QCPAbstractPaintBuffer::QCPAbstractPaintBuffer (const QSize &amp;size, double devicePixelRatio)</title> <emphasis></emphasis>
                
<para>Creates a paint buffer and initializes it with the provided <emphasis>size</emphasis> and <emphasis>devicePixelRatio</emphasis>.</para>

<para>Subclasses must call their <link linkend="class_q_c_p_abstract_paint_buffer_1aee7506a52bd7e5a07c2af27935eb13e7">reallocateBuffer</link> implementation in their respective constructors. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a50fbb1265814d019a1707f4cb11e20de">
                <title>QCPAbstractPaintBuffer::~QCPAbstractPaintBuffer ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a3ea8284e547985c5d263f26a6adfa11f">
                <title>QSize QCPAbstractPaintBuffer::size () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a76bf771cda945a6c602cf9b7d365d92b">
                <title>bool QCPAbstractPaintBuffer::invalidated () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1aac1b981f8c1744036610ff1a6b9461f9">
                <title>double QCPAbstractPaintBuffer::devicePixelRatio () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01">
                <title>void QCPAbstractPaintBuffer::setSize (const QSize &amp;size)</title> <emphasis></emphasis>
                
<para>Sets the paint buffer size.</para>

<para>The buffer is reallocated (by calling <link linkend="class_q_c_p_abstract_paint_buffer_1aee7506a52bd7e5a07c2af27935eb13e7">reallocateBuffer</link>), so any painters that were obtained by <link linkend="class_q_c_p_abstract_paint_buffer_1a9e9f29b19c033cf02fb96f1a148463f3">startPainting</link> are invalidated and must not be used after calling this method.</para>

<para>If <emphasis>size</emphasis> is already the current buffer size, this method does nothing. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1ae4c7dc70dfc66be2879ce297b2b3d67f">
                <title>void QCPAbstractPaintBuffer::setInvalidated (bool invalidated=true)</title> <emphasis></emphasis>
                
<para>Sets the invalidated flag to <emphasis>invalidated</emphasis>.</para>

<para>This mechanism is used internally in conjunction with isolated replotting of <link linkend="class_q_c_p_layer">QCPLayer</link> instances (in <link linkend="class_q_c_p_layer_1a67dcfc1590be2a1f2227c5a39bb59c7cab581b9fab3007c4c65f057f4185d7538">QCPLayer::lmBuffered</link> mode). If <link linkend="class_q_c_p_layer_1adefd53b6db02f470151c416f42e37180">QCPLayer::replot</link> is called on a buffered layer, i.e. an isolated repaint of only that layer (and its dedicated paint buffer) is requested, <link linkend="class_q_custom_plot">QCustomPlot</link> will decide depending on the invalidated flags of other paint buffers whether it also replots them, instead of only the layer on which the replot was called.</para>

<para>The invalidated flag is set to true when <link linkend="class_q_c_p_layer">QCPLayer</link> association has changed, i.e. if layers were added or removed from this buffer, or if they were reordered. It is set to false as soon as all associated <link linkend="class_q_c_p_layer">QCPLayer</link> instances are drawn onto the buffer.</para>

<para>Under normal circumstances, it is not necessary to manually call this method. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa">
                <title>void QCPAbstractPaintBuffer::setDevicePixelRatio (double ratio)</title> <emphasis></emphasis>
                
<para>Sets the the device pixel ratio to <emphasis>ratio</emphasis>. This is useful to render on high-DPI output devices. The ratio is automatically set to the device pixel ratio used by the parent <link linkend="class_q_custom_plot">QCustomPlot</link> instance.</para>

<para>The buffer is reallocated (by calling <link linkend="class_q_c_p_abstract_paint_buffer_1aee7506a52bd7e5a07c2af27935eb13e7">reallocateBuffer</link>), so any painters that were obtained by <link linkend="class_q_c_p_abstract_paint_buffer_1a9e9f29b19c033cf02fb96f1a148463f3">startPainting</link> are invalidated and must not be used after calling this method.</para>

<para><formalpara><title>Observação: </title>

<para>This method is only available for Qt versions 5.4 and higher. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a9e9f29b19c033cf02fb96f1a148463f3">
                <title>QCPPainter * QCPAbstractPaintBuffer::startPainting ()=0</title> <emphasis></emphasis>
                
<para>Returns a <link linkend="class_q_c_p_painter">QCPPainter</link> which is ready to draw to this buffer. The ownership and thus the responsibility to delete the painter after the painting operations are complete is given to the caller of this method.</para>

<para>Once you are done using the painter, delete the painter and call <link linkend="class_q_c_p_abstract_paint_buffer_1a41b0dc6e7744f19fae09f8532c207dc1">donePainting</link>.</para>

<para>While a painter generated with this method is active, you must not call <link linkend="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01">setSize</link>, <link linkend="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa">setDevicePixelRatio</link> or <link linkend="class_q_c_p_abstract_paint_buffer_1a9e253f4541dfc01992b77e8830bd7722">clear</link>.</para>

<para>This method may return 0, if a painter couldn&apos;t be activated on the buffer. This usually indicates a problem with the respective painting backend. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a41b0dc6e7744f19fae09f8532c207dc1">
                <title>void QCPAbstractPaintBuffer::donePainting ()</title> <emphasis></emphasis>
                
<para>If you have acquired a <link linkend="class_q_c_p_painter">QCPPainter</link> to paint onto this paint buffer via <link linkend="class_q_c_p_abstract_paint_buffer_1a9e9f29b19c033cf02fb96f1a148463f3">startPainting</link>, call this method as soon as you are done with the painting operations and have deleted the painter.</para>

<para>paint buffer subclasses may use this method to perform any type of cleanup that is necessary. The default implementation does nothing. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1afb998c7525e3ae37d9d2d46c7aaf461a">
                <title>void QCPAbstractPaintBuffer::draw (QCPPainter *painter) const =0</title> <emphasis></emphasis>
                
<para>Draws the contents of this buffer with the provided <emphasis>painter</emphasis>. This is the method that is used to finally join all paint buffers and draw them onto the screen. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1a9e253f4541dfc01992b77e8830bd7722">
                <title>void QCPAbstractPaintBuffer::clear (const QColor &amp;color)=0</title> <emphasis></emphasis>
                
<para>Fills the entire buffer with the provided <emphasis>color</emphasis>. To have an empty transparent buffer, use the named color <computeroutput>Qt::transparent</computeroutput>.</para>

<para>This method must not be called if there is currently a painter (acquired with <link linkend="class_q_c_p_abstract_paint_buffer_1a9e9f29b19c033cf02fb96f1a148463f3">startPainting</link>) active. </para>

            </section>
            <section xml:id="class_q_c_p_abstract_paint_buffer_1aee7506a52bd7e5a07c2af27935eb13e7">
                <title>void QCPAbstractPaintBuffer::reallocateBuffer ()=0</title> <emphasis></emphasis>
                
<para>Reallocates the internal buffer with the currently configured size (<link linkend="class_q_c_p_abstract_paint_buffer_1a8b68c3cd36533f1a4a23b5ce8cd66f01">setSize</link>) and device pixel ratio, if applicable (<link linkend="class_q_c_p_abstract_paint_buffer_1a555eaad5d5c806420ff35602a1bb68fa">setDevicePixelRatio</link>). It is called as soon as any of those properties are changed on this paint buffer.</para>

<para><formalpara><title>Observação: </title>

<para>Subclasses of <link linkend="class_q_c_p_abstract_paint_buffer">QCPAbstractPaintBuffer</link> must call their reimplementation of this method in their constructor, to perform the first allocation (this can not be done by the base class because calling pure virtual methods in base class constructors is not possible). </para>
</formalpara>
</para>

            </section>
</section>
