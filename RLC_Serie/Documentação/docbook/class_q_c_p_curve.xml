<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_curve">
<title>QCPCurve class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPCurve</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_curve__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPCurve</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_curve__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para><literallayout>enum <link linkend="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1">LineStyle</link> {
<link linkend="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1aec1601a191cdf0b4e761c4c66092cc48">lsNone</link>,
<link linkend="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1ade5822ce6fbf131d3df131795c2e1003">lsLine</link>
}</literallayout>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Protected Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QCPScatterStyle mScatterStyle</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mScatterSkip</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>LineStyle mLineStyle</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_curve_1a36de58e2652b3fa47bdf9187d421d3ce">QCPCurve</link> (
<link linkend="class_q_c_p_axis">QCPAxis</link> * keyAxis, <link linkend="class_q_c_p_axis">QCPAxis</link> * valueAxis)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_curve_1a99ee5136754884a220cc0bcacfe419a3">~QCPCurve</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QSharedPointer&lt; <link linkend="qcustomplot_8h_1aaeee80d5664ea91beb9d7968790d0e65">QCPCurveDataContainer</link> &gt; <link linkend="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60">data</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_scatter_style">QCPScatterStyle</link> <link linkend="class_q_c_p_curve_1afa6bd72a3a331a5ed45d3e0c5843b592">scatterStyle</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_curve_1a09b33217172aedf6c62c441b4ff66166">scatterSkip</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1">LineStyle</link> <link linkend="class_q_c_p_curve_1a06e3cf3f8f1add689254b3cda66e040e">lineStyle</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e">setData</link> (
QSharedPointer&lt; <link linkend="qcustomplot_8h_1aaeee80d5664ea91beb9d7968790d0e65">QCPCurveDataContainer</link> &gt; data)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a0768af2c33c8dcffa3cf5bdeb53923a6">setData</link> (
const QVector&lt; double &gt; &amp; t, const QVector&lt; double &gt; &amp; keys, const QVector&lt; double &gt; &amp; values, bool alreadySorted)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a9d3245d43304226e013240c94802f7f6">setData</link> (
const QVector&lt; double &gt; &amp; keys, const QVector&lt; double &gt; &amp; values)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706">setScatterStyle</link> (
const <link linkend="class_q_c_p_scatter_style">QCPScatterStyle</link> &amp; style)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a97dbfecd497e972d5f2162615e6da5be">setScatterSkip</link> (
int skip)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19">setLineStyle</link> (
<link linkend="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1">LineStyle</link> style)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f">addData</link> (
const QVector&lt; double &gt; &amp; t, const QVector&lt; double &gt; &amp; keys, const QVector&lt; double &gt; &amp; values, bool alreadySorted)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a6424fa06da1786648c83ad13a0d0aa14">addData</link> (
const QVector&lt; double &gt; &amp; keys, const QVector&lt; double &gt; &amp; values)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a13398b236f6926014e404eeb5b9f415c">addData</link> (
double t, double key, double value)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1ada4762e793cd5707b33f35b8a4b0f8fb">addData</link> (
double key, double value)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_q_c_p_curve_1a0ed9b7e6b4bc72010d6fcd974af46a8b">selectTest</link> (
const QPointF &amp; pos, bool onlySelectable, QVariant * details)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_curve_1a22d09087f78f254731197cc0b8783299">getKeyRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual <link linkend="class_q_c_p_range">QCPRange</link> <link linkend="class_q_c_p_curve_1a8bb8e3b9085f15921dc40483fb025ab2">getValueRange</link> (
bool &amp; foundRange, <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9">QCP::SignDomain</link> inSignDomain, const <link linkend="class_q_c_p_range">QCPRange</link> &amp; inKeyRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_curve_1ac199d41d23865cd68bd7b598308a4433">draw</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_curve_1aac6e94afbce4002d2cd7793250154e84">drawLegendIcon</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, const QRectF &amp; rect)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_curve_1aa4d7415f7c69eb7820263941f7d88e2c">drawCurveLine</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, const QVector&lt; QPointF &gt; &amp; lines)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_q_c_p_curve_1a0bea811373c5ee8c67c9c2b4d74ad866">drawScatterPlot</link> (
<link linkend="class_q_c_p_painter">QCPPainter</link> * painter, const QVector&lt; QPointF &gt; &amp; points, const <link linkend="class_q_c_p_scatter_style">QCPScatterStyle</link> &amp; style)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1aefca1e5127fae2d7ff65b9e921637c58">getCurveLines</link> (
QVector&lt; QPointF &gt; * lines, const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; dataRange, double penWidth)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a564c5fdc8409e3532b1322389a8434b8">getScatters</link> (
QVector&lt; QPointF &gt; * scatters, const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; dataRange, double scatterWidth)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_curve_1a77c89253397c4754b40d4bc8d3e789bf">getRegion</link> (
double key, double value, double keyMin, double valueMax, double keyMax, double valueMin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointF <link linkend="class_q_c_p_curve_1a1d4530a81f718a2085df03d6a059d5d8">getOptimizedPoint</link> (
int prevRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QVector&lt; QPointF &gt; <link linkend="class_q_c_p_curve_1a66bff7933dac149c4577ad63a27da924">getOptimizedCornerPoints</link> (
int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_curve_1af5df2560b30333fe662ec676bd355415">mayTraverse</link> (
int prevRegion, int currentRegion)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_curve_1afc5367ef0369d7a88ebba6eacf55f14f">getTraverse</link> (
double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, QPointF &amp; crossA, QPointF &amp; crossB)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_curve_1a55e24387fd97a2cad0def8a40809e9ec">getTraverseCornerPoints</link> (
int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, QVector&lt; QPointF &gt; &amp; beforeTraverse, QVector&lt; QPointF &gt; &amp; afterTraverse)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_curve_1aa2c9c9c0e57f11f18a5cb7e47927157c">pointDistance</link> (
const QPointF &amp; pixelPoint, <link linkend="class_q_c_p_data_container_1ae40a91f5cb0bcac61d727427449b7d15">QCPCurveDataContainer::const_iterator</link> &amp; closestData)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>A plottable representing a parametric curve in a plot. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para></para>

<para>Unlike <link linkend="class_q_c_p_graph">QCPGraph</link>, plottables of this type may have multiple points with the same key coordinate, so their visual representation can have <emphasis>loops</emphasis>. This is realized by introducing a third coordinate <emphasis>t</emphasis>, which defines the order of the points described by the other two coordinates <emphasis>x</emphasis> and <emphasis>y</emphasis>.</para>

<para>To plot data, assign it with the <link linkend="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e">setData</link> or <link linkend="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f">addData</link> functions. Alternatively, you can also access and modify the curve&apos;s data via the <link linkend="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60">data</link> method, which returns a pointer to the internal <link linkend="qcustomplot_8h_1aaeee80d5664ea91beb9d7968790d0e65">QCPCurveDataContainer</link>.</para>

<para>Gaps in the curve can be created by adding data points with NaN as key and value (<computeroutput>qQNaN()</computeroutput> or <computeroutput>std::numeric_limits&lt;double&gt;::quiet_NaN()</computeroutput>) in between the two data points that shall be separated.</para>
<section xml:id="class_q_c_p_curve_1qcpcurve-appearance">
<title>Changing the appearance</title>

<para>The appearance of the curve is determined by the pen and the brush (<link linkend="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7">setPen</link>, <link linkend="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74">setBrush</link>).</para>
</section>
<section xml:id="class_q_c_p_curve_1qcpcurve-usage">
<title>Usage</title>

<para>Like all data representing objects in <link linkend="class_q_custom_plot">QCustomPlot</link>, the <link linkend="class_q_c_p_curve">QCPCurve</link> is a plottable (<link linkend="class_q_c_p_abstract_plottable">QCPAbstractPlottable</link>). So the plottable-interface of <link linkend="class_q_custom_plot">QCustomPlot</link> applies (<link linkend="class_q_custom_plot_1a32de81ff53e263e785b83b52ecd99d6f">QCustomPlot::plottable</link>, <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">QCustomPlot::removePlottable</link>, etc.)</para>

<para>Usually, you first create an instance: <literallayout><computeroutput></computeroutput></literallayout>which registers it with the <link linkend="class_q_custom_plot">QCustomPlot</link> instance of the passed axes. Note that this <link linkend="class_q_custom_plot">QCustomPlot</link> instance takes ownership of the plottable, so do not delete it manually but use <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">QCustomPlot::removePlottable()</link> instead. The newly created plottable can be modified, e.g.: <literallayout><computeroutput></computeroutput></literallayout></para>
</section>
                <para>Definition at line 5293 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1">
               <title>enum LineStyle </title>
               
<para>Defines how the curve&apos;s line is represented visually in the plot. The line is drawn with the current pen of the curve (<link linkend="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7">setPen</link>). <formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19">setLineStyle</link> </para>
</formalpara>
</para>

               <formalpara>
                    <title>Enumerator:</title>
                    <variablelist>
                        <varlistentry xml:id="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1aec1601a191cdf0b4e761c4c66092cc48">
                            <term>lsNone</term>
                            <listitem>
                                <para>No line is drawn between data points (e.g. only scatters)</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry xml:id="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1ade5822ce6fbf131d3df131795c2e1003">
                            <term>lsLine</term>
                            <listitem>
                                <para>Data points are connected with a straight line.</para>
                            </listitem>
                        </varlistentry>
                     </variablelist>
                </formalpara>
                <para>Definition at line 5306 of file qcustomplot.h
                    <computeroutput><literallayout>
{
lsNone, 
lsLine, 
}LineStyle;
                    </literallayout></computeroutput>
                </para>
            </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_q_c_p_curve_1a36de58e2652b3fa47bdf9187d421d3ce">
                <title>QCPCurve::QCPCurve (QCPAxis *keyAxis, QCPAxis *valueAxis)</title> <emphasis></emphasis>
                
<para>Constructs a curve which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <link linkend="class_q_custom_plot">QCustomPlot</link> instance and not have the same orientation. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>

<para>The created <link linkend="class_q_c_p_curve">QCPCurve</link> is automatically registered with the <link linkend="class_q_custom_plot">QCustomPlot</link> instance inferred from <emphasis>keyAxis</emphasis>. This <link linkend="class_q_custom_plot">QCustomPlot</link> instance takes ownership of the <link linkend="class_q_c_p_curve">QCPCurve</link>, so do not delete it manually but use <link linkend="class_q_custom_plot_1af3dafd56884208474f311d6226513ab2">QCustomPlot::removePlottable()</link> instead. </para>

            </section>
            <section xml:id="class_q_c_p_curve_1a99ee5136754884a220cc0bcacfe419a3">
                <title>QCPCurve::~QCPCurve ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60">
                <title>QSharedPointer&lt; QCPCurveDataContainer &gt; QCPCurve::data () const</title> <emphasis></emphasis>
                
<para>Returns a shared pointer to the internal data storage of type <link linkend="qcustomplot_8h_1aaeee80d5664ea91beb9d7968790d0e65">QCPCurveDataContainer</link>. You may use it to directly manipulate the data, which may be more convenient and faster than using the regular <link linkend="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e">setData</link> or <link linkend="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f">addData</link> methods. </para>

            </section>
            <section xml:id="class_q_c_p_curve_1afa6bd72a3a331a5ed45d3e0c5843b592">
                <title>QCPScatterStyle QCPCurve::scatterStyle () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a09b33217172aedf6c62c441b4ff66166">
                <title>int QCPCurve::scatterSkip () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a06e3cf3f8f1add689254b3cda66e040e">
                <title>LineStyle QCPCurve::lineStyle () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a41246850d2e080bc57183ca19cd4135e">
                <title>void QCPCurve::setData (QSharedPointer&lt; QCPCurveDataContainer &gt; data)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Replaces the current data container with the provided <emphasis>data</emphasis> container.</para>

<para>Since a QSharedPointer is used, multiple QCPCurves may share the same data container safely. Modifying the data in the container will then affect all curves that share the container. Sharing can be achieved by simply exchanging the data containers wrapped in shared pointers: <literallayout><computeroutput></computeroutput></literallayout> If you do not wish to share containers, but create a copy from an existing container, rather use the <link linkend="class_q_c_p_data_container_1ae7042bd534fc3ce7befa2ce3f790b5bf">QCPDataContainer&lt;DataType&gt;::set</link> method on the curve&apos;s data container directly: <literallayout><computeroutput></computeroutput></literallayout> <formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a0768af2c33c8dcffa3cf5bdeb53923a6">
                <title>void QCPCurve::setData (const QVector&lt; double &gt; &amp;t, const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values, bool alreadySorted=false)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Replaces the current data with the provided points in <emphasis>t</emphasis>, <emphasis>keys</emphasis> and <emphasis>values</emphasis>. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>

<para>If you can guarantee that the passed data points are sorted by <emphasis>t</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a9d3245d43304226e013240c94802f7f6">
                <title>void QCPCurve::setData (const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Replaces the current data with the provided points in <emphasis>keys</emphasis> and <emphasis>values</emphasis>. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>

<para>The t parameter of each data point will be set to the integer index of the respective key/value pair.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f">addData</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706">
                <title>void QCPCurve::setScatterStyle (const QCPScatterStyle &amp;style)</title> <emphasis></emphasis>
                
<para>Sets the visual appearance of single data points in the plot. If set to <link linkend="class_q_c_p_scatter_style_1adb31525af6b680e6f1b7472e43859349abd144c291ca274f77053ec68cab6c022">QCPScatterStyle::ssNone</link>, no scatter points are drawn (e.g. for line-only plots with appropriate line style).</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_scatter_style">QCPScatterStyle</link>, <link linkend="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19">setLineStyle</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a97dbfecd497e972d5f2162615e6da5be">
                <title>void QCPCurve::setScatterSkip (int skip)</title> <emphasis></emphasis>
                
<para>If scatters are displayed (scatter style not <link linkend="class_q_c_p_scatter_style_1adb31525af6b680e6f1b7472e43859349abd144c291ca274f77053ec68cab6c022">QCPScatterStyle::ssNone</link>), <emphasis>skip</emphasis> number of scatter points are skipped/not drawn after every drawn scatter point.</para>

<para>This can be used to make the data appear sparser while for example still having a smooth line, and to improve performance for very high density plots.</para>

<para>If <emphasis>skip</emphasis> is set to 0 (default), all scatter points are drawn.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706">setScatterStyle</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a4a377ec863ff81a1875c3094a6177c19">
                <title>void QCPCurve::setLineStyle (LineStyle style)</title> <emphasis></emphasis>
                
<para>Sets how the single data points are connected in the plot or how they are represented visually apart from the scatter symbol. For scatter-only plots, set <emphasis>style</emphasis> to <link linkend="class_q_c_p_curve_1a2710e9f79302152cff794c6e16cc01f1aec1601a191cdf0b4e761c4c66092cc48">lsNone</link> and <link linkend="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706">setScatterStyle</link> to the desired scatter style.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_curve_1a55e43b44709bf50a35500644988aa706">setScatterStyle</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a73edf394b94f3f24f07518e30565a07f">
                <title>void QCPCurve::addData (const QVector&lt; double &gt; &amp;t, const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values, bool alreadySorted=false)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds the provided points in <emphasis>t</emphasis>, <emphasis>keys</emphasis> and <emphasis>values</emphasis> to the current data. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>

<para>If you can guarantee that the passed data points are sorted by <emphasis>keys</emphasis> in ascending order, you can set <emphasis>alreadySorted</emphasis> to true, to improve performance by saving a sorting run.</para>

<para>Alternatively, you can also access and modify the data directly via the <link linkend="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60">data</link> method, which returns a pointer to the internal data container. </para>

            </section>
            <section xml:id="class_q_c_p_curve_1a6424fa06da1786648c83ad13a0d0aa14">
                <title>void QCPCurve::addData (const QVector&lt; double &gt; &amp;keys, const QVector&lt; double &gt; &amp;values)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds the provided points in <emphasis>keys</emphasis> and <emphasis>values</emphasis> to the current data. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>

<para>The t parameter of each data point will be set to the integer index of the respective key/value pair.</para>

<para>Alternatively, you can also access and modify the data directly via the <link linkend="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60">data</link> method, which returns a pointer to the internal data container. </para>

            </section>
            <section xml:id="class_q_c_p_curve_1a13398b236f6926014e404eeb5b9f415c">
                <title>void QCPCurve::addData (double t, double key, double value)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. Adds the provided data point as <emphasis>t</emphasis>, <emphasis>key</emphasis> and <emphasis>value</emphasis> to the current data.</para>

<para>Alternatively, you can also access and modify the data directly via the <link linkend="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60">data</link> method, which returns a pointer to the internal data container. </para>

            </section>
            <section xml:id="class_q_c_p_curve_1ada4762e793cd5707b33f35b8a4b0f8fb">
                <title>void QCPCurve::addData (double key, double value)</title> <emphasis></emphasis>
                
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>

<para>Adds the provided data point as <emphasis>key</emphasis> and <emphasis>value</emphasis> to the current data.</para>

<para>The t parameter is generated automatically by increments of 1 for each point, starting at the highest t of previously existing data or 0, if the curve data is empty.</para>

<para>Alternatively, you can also access and modify the data directly via the <link linkend="class_q_c_p_curve_1a761492fd00b1ab7cb18ce23c118c6c60">data</link> method, which returns a pointer to the internal data container. </para>

            </section>
            <section xml:id="class_q_c_p_curve_1a0ed9b7e6b4bc72010d6fcd974af46a8b">
                <title>double QCPCurve::selectTest (const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Implements a point-selection algorithm assuming the data (accessed via the 1D data interface) is point-like. Most subclasses will want to reimplement this method again, to provide a more accurate hit test based on the true data visualization geometry.</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a22d09087f78f254731197cc0b8783299">
                <title>QCPRange QCPCurve::getKeyRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that all data in this plottable span in the key axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_curve_1a8bb8e3b9085f15921dc40483fb025ab2">getValueRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1a8bb8e3b9085f15921dc40483fb025ab2">
                <title>QCPRange QCPCurve::getValueRange (bool &amp;foundRange, QCP::SignDomain inSignDomain=QCP::sdBoth, const QCPRange &amp;inKeyRange=QCPRange()) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
<para>Returns the coordinate range that the data points in the specified key range (<emphasis>inKeyRange</emphasis>) span in the value axis dimension. For logarithmic plots, one can set <emphasis>inSignDomain</emphasis> to either <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> or <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a584784b75fb816abcc627cf743bb699f">QCP::sdPositive</link> in order to restrict the returned range to that sign domain. E.g. when only negative range is wanted, set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9a2d18af0bc58f6528d1e82ce699fe4829">QCP::sdNegative</link> and all positive points will be ignored for range calculation. For no restriction, just set <emphasis>inSignDomain</emphasis> to <link linkend="namespace_q_c_p_1afd50e7cf431af385614987d8553ff8a9aa38352ef02d51ddfa4399d9551566e24">QCP::sdBoth</link> (default). <emphasis>foundRange</emphasis> is an output parameter that indicates whether a range could be found or not. If this is false, you shouldn&apos;t use the returned range (e.g. no points in data).</para>

<para>If <emphasis>inKeyRange</emphasis> has both lower and upper bound set to zero (is equal to <computeroutput><link linkend="class_q_c_p_range">QCPRange()</link></computeroutput>), all data points are considered, without any restriction on the keys.</para>

<para>Note that <emphasis>foundRange</emphasis> is not the same as <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>, since the range returned by this function may have size zero (e.g. when there is only one data point). In this case <emphasis>foundRange</emphasis> would return true, but the returned range is not a valid range in terms of <link linkend="class_q_c_p_range_1ab38bd4841c77c7bb86c9eea0f142dcc0">QCPRange::validRange</link>.</para>

<para><formalpara><title>See also: </title>

<para><link linkend="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882">rescaleAxes</link>, <link linkend="class_q_c_p_curve_1a22d09087f78f254731197cc0b8783299">getKeyRange</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_curve_1ac199d41d23865cd68bd7b598308a4433">
                <title>void QCPCurve::draw (QCPPainter *painter) Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1aac6e94afbce4002d2cd7793250154e84">
                <title>void QCPCurve::drawLegendIcon (QCPPainter *painter, const QRectF &amp;rect) const Q_DECL_OVERRIDE</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1aa4d7415f7c69eb7820263941f7d88e2c">
                <title>void QCPCurve::drawCurveLine (QCPPainter *painter, const QVector&lt; QPointF &gt; &amp;lines) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a0bea811373c5ee8c67c9c2b4d74ad866">
                <title>void QCPCurve::drawScatterPlot (QCPPainter *painter, const QVector&lt; QPointF &gt; &amp;points, const QCPScatterStyle &amp;style) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1aefca1e5127fae2d7ff65b9e921637c58">
                <title>void QCPCurve::getCurveLines (QVector&lt; QPointF &gt; *lines, const QCPDataRange &amp;dataRange, double penWidth) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a564c5fdc8409e3532b1322389a8434b8">
                <title>void QCPCurve::getScatters (QVector&lt; QPointF &gt; *scatters, const QCPDataRange &amp;dataRange, double scatterWidth) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a77c89253397c4754b40d4bc8d3e789bf">
                <title>int QCPCurve::getRegion (double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a1d4530a81f718a2085df03d6a059d5d8">
                <title>QPointF QCPCurve::getOptimizedPoint (int prevRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a66bff7933dac149c4577ad63a27da924">
                <title>QVector&lt; QPointF &gt; QCPCurve::getOptimizedCornerPoints (int prevRegion, int currentRegion, double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1af5df2560b30333fe662ec676bd355415">
                <title>bool QCPCurve::mayTraverse (int prevRegion, int currentRegion) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1afc5367ef0369d7a88ebba6eacf55f14f">
                <title>bool QCPCurve::getTraverse (double prevKey, double prevValue, double key, double value, double keyMin, double valueMax, double keyMax, double valueMin, QPointF &amp;crossA, QPointF &amp;crossB) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1a55e24387fd97a2cad0def8a40809e9ec">
                <title>void QCPCurve::getTraverseCornerPoints (int prevRegion, int currentRegion, double keyMin, double valueMax, double keyMax, double valueMin, QVector&lt; QPointF &gt; &amp;beforeTraverse, QVector&lt; QPointF &gt; &amp;afterTraverse) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_curve_1aa2c9c9c0e57f11f18a5cb7e47927157c">
                <title>double QCPCurve::pointDistance (const QPointF &amp;pixelPoint, QCPCurveDataContainer::const_iterator &amp;closestData) const</title> <emphasis></emphasis>
                
            </section>
</section>
