<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_vector2_d">
<title>QCPVector2D class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPVector2D</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_vector2_d__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPVector2D</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_vector2_d__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Atributos Privados</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mX</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double mY</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_vector2_d_1a04c90748c3623044c79fa20788ffbcc6">QCPVector2D</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_vector2_d_1a47bd86cebc5588dad6ec84349d9098d4">QCPVector2D</link> (
double x, double y)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_vector2_d_1ad8f30a064dc37c90a7ba5e6732ceb5bb">QCPVector2D</link> (
const QPoint &amp; point)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_vector2_d_1a3c16eba1006c210ffc3299253fef2339">QCPVector2D</link> (
const QPointF &amp; point)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1a4a099e1f9788d52cb46deb8139aa6195">x</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1a6398fb643ba380d7961a4b208f4eecf1">y</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double &amp; <link linkend="class_q_c_p_vector2_d_1a1516252dac9eb5ffb7ddb17fb26e60e0">rx</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double &amp; <link linkend="class_q_c_p_vector2_d_1aa8f59a5b54aec8be8e4d1f39db892fea">ry</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_vector2_d_1ab4249e6ce7bfc37be56f014c54b761ae">setX</link> (
double x)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_vector2_d_1ada288019aa8cd51e3b30acfc07b461dc">setY</link> (
double y)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e">length</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5">lengthSquared</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPoint <link linkend="class_q_c_p_vector2_d_1add3edf75de9b7bf1abc693b973b2e906">toPoint</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QPointF <link linkend="class_q_c_p_vector2_d_1acd7af3f4a62833ada58be3f3021dbbac">toPointF</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_vector2_d_1ace99f200b347b14864808213eef16593">isNull</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_vector2_d_1ad83268be370685c2a0630acc0fb1a425">normalize</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_vector2_d">QCPVector2D</link> <link linkend="class_q_c_p_vector2_d_1a707bb3af3b1f9331a2450ec75eaf7eb0">normalized</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_vector2_d">QCPVector2D</link> <link linkend="class_q_c_p_vector2_d_1a0e08d09f9027784237e302e32290b001">perpendicular</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1a39f8d28db7dbffcca6aa63a1f1f6e176">dot</link> (
const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; vec)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1a14840cd3da80cfee4eb3f8977cab89ab">distanceSquaredToLine</link> (
const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; start, const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; end)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1a0c44ca97d46ee04feec32c1c57e70831">distanceSquaredToLine</link> (
const QLineF &amp; line)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19">distanceToStraightLine</link> (
const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; base, const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; direction)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; <link linkend="class_q_c_p_vector2_d_1aa52a246d168f475a4231c7bdfdac7df1">operator*=</link> (
double factor)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; <link linkend="class_q_c_p_vector2_d_1aefa55eb9282c066a330ca281881e0ec0">operator/=</link> (
double divisor)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; <link linkend="class_q_c_p_vector2_d_1aa2c34754ce8839b2d074dec741783c5e">operator+=</link> (
const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; vector)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; <link linkend="class_q_c_p_vector2_d_1a3a2e906bb924983bb801e89f28a3d566">operator-=</link> (
const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; vector)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QDebug <link linkend="class_q_c_p_vector2_d_1a6c757af9671d925af4a36c2f58fb7234">operator&lt;&lt;</link> (
QDebug d, const <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> &amp; vec)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>Represents two doubles as a mathematical 2D vector. </para>
    </simplesect>
        <simplesect>
            <title>Descrição detalhada</title>

<para>This class acts as a replacement for QVector2D with the advantage of double precision instead of single, and some convenience methods tailored for the <link linkend="class_q_custom_plot">QCustomPlot</link> library. </para>
                <para>Definition at line 383 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="class_q_c_p_vector2_d_1a04c90748c3623044c79fa20788ffbcc6">
                <title>QCPVector2D::QCPVector2D ()</title> <emphasis></emphasis>
                
<para>Creates a <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> object and initializes the x and y coordinates to 0. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a47bd86cebc5588dad6ec84349d9098d4">
                <title>QCPVector2D::QCPVector2D (double x, double y)</title> <emphasis></emphasis>
                
<para>Creates a <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> object and initializes the <emphasis>x</emphasis> and <emphasis>y</emphasis> coordinates with the specified values. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1ad8f30a064dc37c90a7ba5e6732ceb5bb">
                <title>QCPVector2D::QCPVector2D (const QPoint &amp;point)</title> <emphasis></emphasis>
                
<para>Creates a <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> object and initializes the x and y coordinates respective coordinates of the specified <emphasis>point</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a3c16eba1006c210ffc3299253fef2339">
                <title>QCPVector2D::QCPVector2D (const QPointF &amp;point)</title> <emphasis></emphasis>
                
<para>Creates a <link linkend="class_q_c_p_vector2_d">QCPVector2D</link> object and initializes the x and y coordinates respective coordinates of the specified <emphasis>point</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a4a099e1f9788d52cb46deb8139aa6195">
                <title>double QCPVector2D::x () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_vector2_d_1a6398fb643ba380d7961a4b208f4eecf1">
                <title>double QCPVector2D::y () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_vector2_d_1a1516252dac9eb5ffb7ddb17fb26e60e0">
                <title>double&amp; QCPVector2D::rx ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_vector2_d_1aa8f59a5b54aec8be8e4d1f39db892fea">
                <title>double&amp; QCPVector2D::ry ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_vector2_d_1ab4249e6ce7bfc37be56f014c54b761ae">
                <title>void QCPVector2D::setX (double x)</title> <emphasis></emphasis>
                
<para>Sets the x coordinate of this vector to <emphasis>x</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1ada288019aa8cd51e3b30acfc07b461dc">setY</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1ada288019aa8cd51e3b30acfc07b461dc">
                <title>void QCPVector2D::setY (double y)</title> <emphasis></emphasis>
                
<para>Sets the y coordinate of this vector to <emphasis>y</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1ab4249e6ce7bfc37be56f014c54b761ae">setX</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e">
                <title>double QCPVector2D::length () const</title> <emphasis></emphasis>
                
<para>Returns the length of this vector.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5">lengthSquared</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5">
                <title>double QCPVector2D::lengthSquared () const</title> <emphasis></emphasis>
                
<para>Returns the squared length of this vector. In some situations, e.g. when just trying to find the shortest vector of a group, this is faster than calculating <link linkend="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e">length</link>, because it avoids calculation of a square root.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e">length</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1add3edf75de9b7bf1abc693b973b2e906">
                <title>QPoint QCPVector2D::toPoint () const</title> <emphasis></emphasis>
                
<para>Returns a QPoint which has the x and y coordinates of this vector, truncating any floating point information.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1acd7af3f4a62833ada58be3f3021dbbac">toPointF</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1acd7af3f4a62833ada58be3f3021dbbac">
                <title>QPointF QCPVector2D::toPointF () const</title> <emphasis></emphasis>
                
<para>Returns a QPointF which has the x and y coordinates of this vector.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1add3edf75de9b7bf1abc693b973b2e906">toPoint</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1ace99f200b347b14864808213eef16593">
                <title>bool QCPVector2D::isNull () const</title> <emphasis></emphasis>
                
<para>Returns whether this vector is null. A vector is null if <computeroutput>qIsNull</computeroutput> returns true for both x and y coordinates, i.e. if both are binary equal to 0. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1ad83268be370685c2a0630acc0fb1a425">
                <title>void QCPVector2D::normalize ()</title> <emphasis></emphasis>
                
<para>Normalizes this vector. After this operation, the length of the vector is equal to 1.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1a707bb3af3b1f9331a2450ec75eaf7eb0">normalized</link>, <link linkend="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e">length</link>, <link linkend="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5">lengthSquared</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a707bb3af3b1f9331a2450ec75eaf7eb0">
                <title>QCPVector2D QCPVector2D::normalized () const</title> <emphasis></emphasis>
                
<para>Returns a normalized version of this vector. The length of the returned vector is equal to 1.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1ad83268be370685c2a0630acc0fb1a425">normalize</link>, <link linkend="class_q_c_p_vector2_d_1a10adb5ab031fe94f0b64a3c5aefb552e">length</link>, <link linkend="class_q_c_p_vector2_d_1a766585459d84cb149334fda1a498b2e5">lengthSquared</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a0e08d09f9027784237e302e32290b001">
                <title>QCPVector2D QCPVector2D::perpendicular () const</title> <emphasis></emphasis>
                
<para>Returns a vector perpendicular to this vector, with the same length. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a39f8d28db7dbffcca6aa63a1f1f6e176">
                <title>double QCPVector2D::dot (const QCPVector2D &amp;vec) const</title> <emphasis></emphasis>
                
<para>Returns the dot/scalar product of this vector with the specified vector <emphasis>vec</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a14840cd3da80cfee4eb3f8977cab89ab">
                <title>double QCPVector2D::distanceSquaredToLine (const QCPVector2D &amp;start, const QCPVector2D &amp;end) const</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Returns the squared shortest distance of this vector (interpreted as a point) to the finite line segment given by <emphasis>start</emphasis> and <emphasis>end</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19">distanceToStraightLine</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a0c44ca97d46ee04feec32c1c57e70831">
                <title>double QCPVector2D::distanceSquaredToLine (const QLineF &amp;line) const</title> <emphasis></emphasis>
                
<para>Esse é um método provido por conveniência. Ele difere do método acima apenas na lista de argumentos que devem ser utilizados.</para>

<para>Returns the squared shortest distance of this vector (interpreted as a point) to the finite line segment given by <emphasis>line</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19">distanceToStraightLine</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1ae240b845c3744e43a5d0aa7b2bb66c19">
                <title>double QCPVector2D::distanceToStraightLine (const QCPVector2D &amp;base, const QCPVector2D &amp;direction) const</title> <emphasis></emphasis>
                
<para>Returns the shortest distance of this vector (interpreted as a point) to the infinite straight line given by a <emphasis>base</emphasis> point and a <emphasis>direction</emphasis> vector.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_vector2_d_1a14840cd3da80cfee4eb3f8977cab89ab">distanceSquaredToLine</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1aa52a246d168f475a4231c7bdfdac7df1">
                <title>QCPVector2D &amp; QCPVector2D::operator*= (double factor)</title> <emphasis></emphasis>
                
<para>Scales this vector by the given <emphasis>factor</emphasis>, i.e. the x and y components are multiplied by <emphasis>factor</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1aefa55eb9282c066a330ca281881e0ec0">
                <title>QCPVector2D &amp; QCPVector2D::operator/= (double divisor)</title> <emphasis></emphasis>
                
<para>Scales this vector by the given <emphasis>divisor</emphasis>, i.e. the x and y components are divided by <emphasis>divisor</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1aa2c34754ce8839b2d074dec741783c5e">
                <title>QCPVector2D &amp; QCPVector2D::operator+= (const QCPVector2D &amp;vector)</title> <emphasis></emphasis>
                
<para>Adds the given <emphasis>vector</emphasis> to this vector component-wise. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a3a2e906bb924983bb801e89f28a3d566">
                <title>QCPVector2D &amp; QCPVector2D::operator-= (const QCPVector2D &amp;vector)</title> <emphasis></emphasis>
                
<para>subtracts the given <emphasis>vector</emphasis> from this vector component-wise. </para>

            </section>
            <section xml:id="class_q_c_p_vector2_d_1a6c757af9671d925af4a36c2f58fb7234">
                <title>QDebug operator&lt;&lt; (QDebug d, const QCPVector2D &amp;vec)</title> <emphasis></emphasis>
                
<para>Prints <emphasis>vec</emphasis> in a human readable format to the qDebug output. </para>

            </section>
</section>
