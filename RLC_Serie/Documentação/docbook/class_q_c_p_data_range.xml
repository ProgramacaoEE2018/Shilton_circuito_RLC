<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_q_c_p_data_range">
<title>QCPDataRange class Reference</title>
<para>
    <programlisting>#include <link linkend="qcustomplot_8h">&lt;qcustomplot.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for QCPDataRange</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_data_range__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for QCPDataRange</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="class_q_c_p_data_range__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Atributos Privados</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mBegin</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int mEnd</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_data_range_1a49e72fd9bace1da9d875136dcc04c986">QCPDataRange</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_q_c_p_data_range_1a6c7f4a3684210423270515403060e9cf">QCPDataRange</link> (
int begin, int end)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_data_range_1a8bfd79a282f6ebd766d60caa683242d3">operator==</link> (
const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; other)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_data_range_1a5bcc9597731a7455407853ed0585f6ab">operator!=</link> (
const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; other)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_data_range_1ae76d7eba9defdfafcd0fc41096793129">begin</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_data_range_1aee1b20fb045929c3753ee2ce14af7630">end</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_data_range_1ac6af055e509d1b691c244954ff1c5887">size</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_q_c_p_data_range_1a1e7836058f755c6ab9f11996477b7150">length</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_data_range_1a54ff59048e01e46ac4aefafc844626c6">setBegin</link> (
int begin)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_q_c_p_data_range_1a277f1a9eafe70b9184d9c00b641ae5de">setEnd</link> (
int end)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_data_range_1aae53a37472212dca0a7939963e20dba0">isValid</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_data_range_1ac32e53fc05d6cd2eac96b96a7265d3b8">isEmpty</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_data_range">QCPDataRange</link> <link linkend="class_q_c_p_data_range_1a93529421d12fdd3a8bdb2b8061936352">bounded</link> (
const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; other)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_data_range">QCPDataRange</link> <link linkend="class_q_c_p_data_range_1a36c8ad8acf177ffeb0a72c8d73030844">expanded</link> (
const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; other)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_data_range">QCPDataRange</link> <link linkend="class_q_c_p_data_range_1a84e1e03129dd52528efb4bac18d30183">intersection</link> (
const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; other)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_q_c_p_data_range">QCPDataRange</link> <link linkend="class_q_c_p_data_range_1a279ed36602b39607699dc5652bcaf813">adjusted</link> (
int changeBegin, int changeEnd)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_data_range_1a8a1c437f9beffd55621f48f961d7f679">intersects</link> (
const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; other)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_q_c_p_data_range_1a13ca398776374a3160aa85433718b812">contains</link> (
const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; other)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>QDebug <link linkend="class_q_c_p_data_range_1a486dd7af8a090ed069672e3510e6a082">operator&lt;&lt;</link> (
QDebug d, const <link linkend="class_q_c_p_data_range">QCPDataRange</link> &amp; dataRange)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>Describes a data range given by begin and end index. </para>
    </simplesect>
        <simplesect>
            <title>Descrição detalhada</title>

<para><link linkend="class_q_c_p_data_range">QCPDataRange</link> holds two integers describing the begin (<link linkend="class_q_c_p_data_range_1a54ff59048e01e46ac4aefafc844626c6">setBegin</link>) and end (<link linkend="class_q_c_p_data_range_1a277f1a9eafe70b9184d9c00b641ae5de">setEnd</link>) index of a contiguous set of data points. The end index points to the data point above the last data point that&apos;s part of the data range, similarly to the nomenclature used in standard iterators.</para>

<para>Data Ranges are not bound to a certain plottable, thus they can be freely exchanged, created and modified. If a non-contiguous data set shall be described, the class <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> is used, which holds and manages multiple instances of <link linkend="class_q_c_p_data_range">QCPDataRange</link>. In most situations, <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> is thus used.</para>

<para>Both <link linkend="class_q_c_p_data_range">QCPDataRange</link> and <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> offer convenience methods to work with them, e.g. <link linkend="class_q_c_p_data_range_1a93529421d12fdd3a8bdb2b8061936352">bounded</link>, <link linkend="class_q_c_p_data_range_1a36c8ad8acf177ffeb0a72c8d73030844">expanded</link>, <link linkend="class_q_c_p_data_range_1a8a1c437f9beffd55621f48f961d7f679">intersects</link>, <link linkend="class_q_c_p_data_range_1a84e1e03129dd52528efb4bac18d30183">intersection</link>, <link linkend="class_q_c_p_data_range_1a279ed36602b39607699dc5652bcaf813">adjusted</link>, <link linkend="class_q_c_p_data_range_1a13ca398776374a3160aa85433718b812">contains</link>. Further, addition and subtraction operators (defined in <link linkend="class_q_c_p_data_selection">QCPDataSelection</link>) can be used to join/subtract data ranges and data selections (or mixtures), to retrieve a corresponding <link linkend="class_q_c_p_data_selection">QCPDataSelection</link>.</para>

<para>QCustomPlot&apos;s data selection mechanism is based on <link linkend="class_q_c_p_data_selection">QCPDataSelection</link> and <link linkend="class_q_c_p_data_range">QCPDataRange</link>.</para>

<para><formalpara><title>Observação: </title>

<para>Do not confuse <link linkend="class_q_c_p_data_range">QCPDataRange</link> with <link linkend="class_q_c_p_range">QCPRange</link>. A <link linkend="class_q_c_p_range">QCPRange</link> describes an interval in floating point plot coordinates, e.g. the current axis range. </para>
</formalpara>
</para>
                <para>Definition at line 891 of file qcustomplot.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>qcustomplot.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Atributos</title>
        </section>
            <section xml:id="class_q_c_p_data_range_1a49e72fd9bace1da9d875136dcc04c986">
                <title>QCPDataRange::QCPDataRange ()</title> <emphasis></emphasis>
                
<para>Creates an empty <link linkend="class_q_c_p_data_range">QCPDataRange</link>, with begin and end set to 0. </para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a6c7f4a3684210423270515403060e9cf">
                <title>QCPDataRange::QCPDataRange (int begin, int end)</title> <emphasis></emphasis>
                
<para>Creates a <link linkend="class_q_c_p_data_range">QCPDataRange</link>, initialized with the specified <emphasis>begin</emphasis> and <emphasis>end</emphasis>.</para>

<para>No checks or corrections are made to ensure the resulting range is valid (<link linkend="class_q_c_p_data_range_1aae53a37472212dca0a7939963e20dba0">isValid</link>). </para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a8bfd79a282f6ebd766d60caa683242d3">
                <title>bool QCPDataRange::operator== (const QCPDataRange &amp;other) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_data_range_1a5bcc9597731a7455407853ed0585f6ab">
                <title>bool QCPDataRange::operator!= (const QCPDataRange &amp;other) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_data_range_1ae76d7eba9defdfafcd0fc41096793129">
                <title>int QCPDataRange::begin () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_data_range_1aee1b20fb045929c3753ee2ce14af7630">
                <title>int QCPDataRange::end () const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_q_c_p_data_range_1ac6af055e509d1b691c244954ff1c5887">
                <title>int QCPDataRange::size () const</title> <emphasis></emphasis>
                
<para>Returns the number of data points described by this data range. This is equal to the end index minus the begin index.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_data_range_1a1e7836058f755c6ab9f11996477b7150">length</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a1e7836058f755c6ab9f11996477b7150">
                <title>int QCPDataRange::length () const</title> <emphasis></emphasis>
                
<para>Returns the number of data points described by this data range. Equivalent to <link linkend="class_q_c_p_data_range_1ac6af055e509d1b691c244954ff1c5887">size</link>. </para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a54ff59048e01e46ac4aefafc844626c6">
                <title>void QCPDataRange::setBegin (int begin)</title> <emphasis></emphasis>
                
<para>Sets the begin of this data range. The <emphasis>begin</emphasis> index points to the first data point that is part of the data range.</para>

<para>No checks or corrections are made to ensure the resulting range is valid (<link linkend="class_q_c_p_data_range_1aae53a37472212dca0a7939963e20dba0">isValid</link>).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_data_range_1a277f1a9eafe70b9184d9c00b641ae5de">setEnd</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a277f1a9eafe70b9184d9c00b641ae5de">
                <title>void QCPDataRange::setEnd (int end)</title> <emphasis></emphasis>
                
<para>Sets the end of this data range. The <emphasis>end</emphasis> index points to the data point just above the last data point that is part of the data range.</para>

<para>No checks or corrections are made to ensure the resulting range is valid (<link linkend="class_q_c_p_data_range_1aae53a37472212dca0a7939963e20dba0">isValid</link>).</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_data_range_1a54ff59048e01e46ac4aefafc844626c6">setBegin</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1aae53a37472212dca0a7939963e20dba0">
                <title>bool QCPDataRange::isValid () const</title> <emphasis></emphasis>
                
<para>Returns whether this range is valid. A valid range has a begin index greater or equal to 0, and an end index greater or equal to the begin index.</para>

<para><formalpara><title>Observação: </title>

<para>Invalid ranges should be avoided and are never the result of any of <link linkend="class_q_custom_plot">QCustomPlot</link>&apos;s methods (unless they are themselves fed with invalid ranges). Do not pass invalid ranges to <link linkend="class_q_custom_plot">QCustomPlot</link>&apos;s methods. The invalid range is not inherently prevented in <link linkend="class_q_c_p_data_range">QCPDataRange</link>, to allow temporary invalid begin/end values while manipulating the range. An invalid range is not necessarily empty (<link linkend="class_q_c_p_data_range_1ac32e53fc05d6cd2eac96b96a7265d3b8">isEmpty</link>), since its <link linkend="class_q_c_p_data_range_1a1e7836058f755c6ab9f11996477b7150">length</link> can be negative and thus non-zero. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1ac32e53fc05d6cd2eac96b96a7265d3b8">
                <title>bool QCPDataRange::isEmpty () const</title> <emphasis></emphasis>
                
<para>Returns whether this range is empty, i.e. whether its begin index equals its end index.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_data_range_1ac6af055e509d1b691c244954ff1c5887">size</link>, <link linkend="class_q_c_p_data_range_1a1e7836058f755c6ab9f11996477b7150">length</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a93529421d12fdd3a8bdb2b8061936352">
                <title>QCPDataRange QCPDataRange::bounded (const QCPDataRange &amp;other) const</title> <emphasis></emphasis>
                
<para>Returns a data range that matches this data range, except that parts exceeding <emphasis>other</emphasis> are excluded.</para>

<para>This method is very similar to <link linkend="class_q_c_p_data_range_1a84e1e03129dd52528efb4bac18d30183">intersection</link>, with one distinction: If this range and the <emphasis>other</emphasis> range share no intersection, the returned data range will be empty with begin and end set to the respective boundary side of <emphasis>other</emphasis>, at which this range is residing. (<link linkend="class_q_c_p_data_range_1a84e1e03129dd52528efb4bac18d30183">intersection</link> would just return a range with begin and end set to 0.) </para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a36c8ad8acf177ffeb0a72c8d73030844">
                <title>QCPDataRange QCPDataRange::expanded (const QCPDataRange &amp;other) const</title> <emphasis></emphasis>
                
<para>Returns a data range that contains both this data range as well as <emphasis>other</emphasis>. </para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a84e1e03129dd52528efb4bac18d30183">
                <title>QCPDataRange QCPDataRange::intersection (const QCPDataRange &amp;other) const</title> <emphasis></emphasis>
                
<para>Returns the data range which is contained in both this data range and <emphasis>other</emphasis>.</para>

<para>This method is very similar to <link linkend="class_q_c_p_data_range_1a93529421d12fdd3a8bdb2b8061936352">bounded</link>, with one distinction: If this range and the <emphasis>other</emphasis> range share no intersection, the returned data range will be empty with begin and end set to 0. (<link linkend="class_q_c_p_data_range_1a93529421d12fdd3a8bdb2b8061936352">bounded</link> would return a range with begin and end set to one of the boundaries of <emphasis>other</emphasis>, depending on which side this range is on.)</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_data_selection_1af5267ced53687561367105ee77b874ab">QCPDataSelection::intersection</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a279ed36602b39607699dc5652bcaf813">
                <title>QCPDataRange QCPDataRange::adjusted (int changeBegin, int changeEnd) const</title> <emphasis></emphasis>
                
<para>Returns a data range where <emphasis>changeBegin</emphasis> and <emphasis>changeEnd</emphasis> were added to the begin and end indices, respectively. </para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a8a1c437f9beffd55621f48f961d7f679">
                <title>bool QCPDataRange::intersects (const QCPDataRange &amp;other) const</title> <emphasis></emphasis>
                
<para>Returns whether this data range and <emphasis>other</emphasis> share common data points.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_data_range_1a84e1e03129dd52528efb4bac18d30183">intersection</link>, <link linkend="class_q_c_p_data_range_1a13ca398776374a3160aa85433718b812">contains</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a13ca398776374a3160aa85433718b812">
                <title>bool QCPDataRange::contains (const QCPDataRange &amp;other) const</title> <emphasis></emphasis>
                
<para>Returns whether all data points described by this data range are also in <emphasis>other</emphasis>.</para>

<para><formalpara><title>Veja também: </title>

<para><link linkend="class_q_c_p_data_range_1a8a1c437f9beffd55621f48f961d7f679">intersects</link> </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_q_c_p_data_range_1a486dd7af8a090ed069672e3510e6a082">
                <title>QDebug operator&lt;&lt; (QDebug d, const QCPDataRange &amp;dataRange)</title> <emphasis></emphasis>
                
<para>Prints <emphasis>dataRange</emphasis> in a human readable format to the qDebug output. </para>

            </section>
</section>
